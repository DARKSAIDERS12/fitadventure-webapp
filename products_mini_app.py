#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤" –¥–ª—è FitAdventure Bot
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
"""

import json
import datetime
from pathlib import Path
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
from products_database import PRODUCTS_DATABASE, get_products_by_goal, get_products_by_category, search_product, format_product_info, get_category_description

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = "user_products_data.json"

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_goal(chat_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = load_user_data()
    return user_data.get(str(chat_id), {}).get('goal', '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ')

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ú–ò–ù–ò-–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
async def show_products_mini_app(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    chat_id = update.effective_chat.id
    user_goal = get_user_goal(chat_id)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    text = f"""üçé **–ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ FitAdventure**
*–º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ*

üéØ **–í–∞—à–∞ —Ü–µ–ª—å:** {user_goal.replace('_', ' ').title()}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"""
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = [
        ['üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã', '‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã'],
        ['ü•© –ë–µ–ª–∫–∏', 'ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã'],
        ['üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã', 'üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞'],
        ['üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞', 'üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'],
        ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    return "PRODUCTS_MAIN"

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ===
async def handle_products_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    text = update.message.text
    chat_id = update.effective_chat.id
    user_goal = get_user_goal(chat_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_map = {
        'üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã': '—Å–ª–æ–∂–Ω—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã',
        '‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã': '–ø—Ä–æ—Å—Ç—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã',
        'ü•© –ë–µ–ª–∫–∏': '–±–µ–ª–∫–∏',
        'ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã': '–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã',
        'üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã': '–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã',
        'üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞': '–∫–ª–µ—Ç—á–∞—Ç–∫–∞'
    }
    
    if text in category_map:
        category = category_map[text]
        return await show_category_products(update, context, category, user_goal)
    
    elif text == 'üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞':
        return await show_search_interface(update, context)
    
    elif text == 'üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        return await show_recommendations(update, context, user_goal)
    
    elif text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return await return_to_main_menu(update, context)
    
    elif text == 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º':
        return await show_products_mini_app(update, context)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
    else:
        return await handle_product_search(update, context)
    
    return "PRODUCTS_MAIN"

async def show_category_products(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str, user_goal: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    products = PRODUCTS_DATABASE.get(user_goal, {}).get(category, {})
    
    if not products:
        text = f"‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.replace('_', ' ').title()}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=reply_markup)
        return "PRODUCTS_MAIN"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_description = get_category_description(category)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_names = {
        "—Å–ª–æ–∂–Ω—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": "üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã",
        "–ø—Ä–æ—Å—Ç—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": "‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã", 
        "–±–µ–ª–∫–∏": "ü•© –ë–µ–ª–∫–∏",
        "–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã": "ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã",
        "–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã": "üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã",
        "–∫–ª–µ—Ç—á–∞—Ç–∫–∞": "üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞"
    }
    
    category_display = category_names.get(category, category.replace('_', ' ').title())
    
    text = f"{category_display}\n"
    text += f"üéØ –î–ª—è —Ü–µ–ª–∏: **{user_goal.replace('_', ' ').title()}**\n\n"
    text += f"{category_description}\n\n"
    text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    for i, (name, data) in enumerate(products.items(), 1):
        text += f"{i}. **{name.title()}** - {data['–∫–∞–ª–æ—Ä–∏–∏']} –∫–∫–∞–ª/100–≥\n"
        text += f"   ü•©{data['–±–µ–ª–∫–∏']}–≥ üßà{data['–∂–∏—Ä—ã']}–≥ üçû{data['—É–≥–ª–µ–≤–æ–¥—ã']}–≥"
        if '–∫–ª–µ—Ç—á–∞—Ç–∫–∞' in data:
            text += f" üåæ{data['–∫–ª–µ—Ç—á–∞—Ç–∫–∞']}–≥"
        text += "\n"
        if '–æ–ø–∏—Å–∞–Ω–∏–µ' in data:
            text += f"   üí° {data['–æ–ø–∏—Å–∞–Ω–∏–µ']}\n"
        text += "\n"
    
    text += "üí° **–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏**"
    
    keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    return "PRODUCTS_CATEGORY"

async def show_product_details(update: Update, context: ContextTypes.DEFAULT_TYPE, product_name: str, user_goal: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ"""
    # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    product_data = None
    product_category = None
    
    for category, products in PRODUCTS_DATABASE.get(user_goal, {}).items():
        if product_name.lower() in [name.lower() for name in products.keys()]:
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            for name, data in products.items():
                if product_name.lower() in name.lower():
                    product_data = data
                    product_category = category
                    product_name = name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    break
            if product_data:
                break
    
    if not product_data:
        text = f"‚ùå –ü—Ä–æ–¥—É–∫—Ç '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=reply_markup)
        return "PRODUCTS_MAIN"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    result = format_product_info(product_name, product_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    category_names = {
        "—Å–ª–æ–∂–Ω—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": "üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã",
        "–ø—Ä–æ—Å—Ç—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": "‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã", 
        "–±–µ–ª–∫–∏": "ü•© –ë–µ–ª–∫–∏",
        "–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã": "ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã",
        "–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã": "üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã",
        "–∫–ª–µ—Ç—á–∞—Ç–∫–∞": "üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞"
    }
    
    result += f"\nüìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_names.get(product_category, product_category)}\n"
    result += f"üéØ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è:** {user_goal.replace('_', ' ').title()}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
    if user_goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ":
        if product_category in ["—Å–ª–æ–∂–Ω—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã", "–±–µ–ª–∫–∏"]:
            result += "üí° **–°–æ–≤–µ—Ç:** –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è! –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ü–∏–∏ –∏ –µ—à—å—Ç–µ –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è."
        elif product_category == "–∫–ª–µ—Ç—á–∞—Ç–∫–∞":
            result += "üí° **–°–æ–≤–µ—Ç:** –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è! –ö–ª–µ—Ç—á–∞—Ç–∫–∞ –Ω–∞–¥–æ–ª–≥–æ –Ω–∞—Å—ã—â–∞–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ."
        else:
            result += "üí° **–°–æ–≤–µ—Ç:** –£–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —É–º–µ—Ä–µ–Ω–Ω–æ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è."
    elif user_goal == "–Ω–∞–±–æ—Ä_–º–∞—Å—Å—ã":
        if product_category in ["—Å–ª–æ–∂–Ω—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã", "–±–µ–ª–∫–∏"]:
            result += "üí° **–°–æ–≤–µ—Ç:** –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã! –ú–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ä—Ü–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."
        elif product_category in ["–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã", "–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã"]:
            result += "üí° **–°–æ–≤–µ—Ç:** –ü–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã! –î–æ–±–∞–≤–ª—è–π—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω —É–º–µ—Ä–µ–Ω–Ω–æ."
        else:
            result += "üí° **–°–æ–≤–µ—Ç:** –•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã!"
    else:  # –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ
        result += "üí° **–°–æ–≤–µ—Ç:** –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–æ—Ä–º—ã! –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è."
    
    keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(result, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    return "PRODUCT_DETAILS"

async def show_search_interface(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∏—Å–∫–∞"""
    text = """üîç **–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞**

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

üí° **–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞
‚Ä¢ –æ–≤—Å—è–Ω–∫–∞
‚Ä¢ –∞–≤–æ–∫–∞–¥–æ
‚Ä¢ –≥—Ä–µ—á–∫–∞
‚Ä¢ —Ç–≤–æ—Ä–æ–≥"""
    
    keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    return "PRODUCT_SEARCH_NEW"

async def show_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE, user_goal: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    text = f"üìä **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è {user_goal.replace('_', ' ').title()}:**\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 2-3 –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = ['—Å–ª–æ–∂–Ω—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã', '–±–µ–ª–∫–∏', '–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã', '–∫–ª–µ—Ç—á–∞—Ç–∫–∞']
    
    for category in categories:
        products = PRODUCTS_DATABASE.get(user_goal, {}).get(category, {})
        if products:
            category_names = {
                "—Å–ª–æ–∂–Ω—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": "üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã",
                "–ø—Ä–æ—Å—Ç—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": "‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã", 
                "–±–µ–ª–∫–∏": "ü•© –ë–µ–ª–∫–∏",
                "–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã": "ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã",
                "–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã": "üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã",
                "–∫–ª–µ—Ç—á–∞—Ç–∫–∞": "üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞"
            }
            
            text += f"**{category_names.get(category, category)}:**\n"
            for i, (name, data) in enumerate(list(products.items())[:3]):
                text += f"‚Ä¢ {name.title()} - {data['–∫–∞–ª–æ—Ä–∏–∏']} –∫–∫–∞–ª/100–≥"
                if '–æ–ø–∏—Å–∞–Ω–∏–µ' in data:
                    text += f" ({data['–æ–ø–∏—Å–∞–Ω–∏–µ']})"
                text += "\n"
            text += "\n"
    
    text += "üí° **–≠—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏!**\n\n"
    text += "üéØ **–°–æ–≤–µ—Ç—ã –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é:**\n"
    
    if user_goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ":
        text += "‚Ä¢ –ï—à—å—Ç–µ –±–æ–ª—å—à–µ –±–µ–ª–∫–æ–≤ –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–∏\n"
        text += "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã\n"
        text += "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ü–∏–∏\n"
    elif user_goal == "–Ω–∞–±–æ—Ä_–º–∞—Å—Å—ã":
        text += "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤\n"
        text += "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã\n"
        text += "‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã\n"
    else:
        text += "‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n"
        text += "‚Ä¢ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        text += "‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏\n"
    
    keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    return "PRODUCTS_MAIN"

async def return_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
    keyboard = [['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'], ['üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'üìä –û –±–æ—Ç–µ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)
    return "GENDER"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–ò–°–ö–ê ===
async def handle_product_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    product_name = update.message.text
    chat_id = update.effective_chat.id
    user_goal = get_user_goal(chat_id)
    
    results = search_product(product_name)
    
    if not results:
        text = f"‚ùå –ü—Ä–æ–¥—É–∫—Ç '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
        text += "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
        text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–±—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è\n"
        text += "‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
        
        keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=reply_markup)
        return "PRODUCTS_MAIN"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{product_name}':**\n\n"
    
    found_products = []
    
    for goal, categories in results.items():
        if goal == user_goal:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for category, products in categories.items():
                category_names = {
                    "—Å–ª–æ–∂–Ω—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": "üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã",
                    "–ø—Ä–æ—Å—Ç—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": "‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã", 
                    "–±–µ–ª–∫–∏": "ü•© –ë–µ–ª–∫–∏",
                    "–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã": "ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã",
                    "–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã": "üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã",
                    "–∫–ª–µ—Ç—á–∞—Ç–∫–∞": "üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞"
                }
                
                text += f"**{category_names.get(category, category)}:**\n"
                for name, data in products.items():
                    text += f"‚Ä¢ {name.title()} - {data['–∫–∞–ª–æ—Ä–∏–∏']} –∫–∫–∞–ª/100–≥\n"
                    if '–æ–ø–∏—Å–∞–Ω–∏–µ' in data:
                        text += f"  üí° {data['–æ–ø–∏—Å–∞–Ω–∏–µ']}\n"
                    found_products.append((name, data, category))
                text += "\n"
    
    if not found_products:
        text += f"‚ùå –î–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏ '{user_goal}' –ø—Ä–æ–¥—É–∫—Ç '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
    else:
        text += "üí° **–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏**"
    
    keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    return "PRODUCTS_MAIN" 