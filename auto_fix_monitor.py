#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ "Failed to save: The content of the file is newer"
"""

import os
import sys
import time
import signal
import subprocess
import threading
from pathlib import Path
from datetime import datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class SaveConflictDetector(FileSystemEventHandler):
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, project_path):
        self.project_path = Path(project_path)
        self.last_fix_time = 0
        self.fix_cooldown = 30  # –°–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        self.monitored_files = {'.py', '.md', '.txt', '.json', '.yaml', '.yml'}
        
    def on_modified(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        if event.is_directory:
            return
            
        file_path = Path(event.src_path)
        if file_path.suffix not in self.monitored_files:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.check_and_fix_conflicts(file_path)
    
    def check_and_fix_conflicts(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        current_time = time.time()
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if current_time - self.last_fix_time < self.fix_cooldown:
            return
            
        conflict_patterns = [
            file_path.with_suffix(file_path.suffix + '.lock'),
            file_path.with_suffix(file_path.suffix + '.tmp'),
            file_path.with_suffix(file_path.suffix + '.temp'),
        ]
        
        conflicts_found = any(p.exists() for p in conflict_patterns)
        
        if conflicts_found:
            self.auto_fix_conflicts()
            self.last_fix_time = current_time
    
    def auto_fix_conflicts(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        print(f"üö® [{datetime.now().strftime('%H:%M:%S')}] –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            subprocess.run([
                sys.executable, 
                str(self.project_path / "simple_fix.py")
            ], cwd=self.project_path, check=False)
            
            print(f"‚úÖ [{datetime.now().strftime('%H:%M:%S')}] –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.send_notification("–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–∞–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
            
        except Exception as e:
            print(f"‚ùå [{datetime.now().strftime('%H:%M:%S')}] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    def send_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            subprocess.run([
                'notify-send', 
                'FitAdventure Auto-Fix', 
                message,
                '--icon=info',
                '--urgency=normal'
            ], check=False)
        except:
            pass

class LogMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ª–æ–≥–æ–≤ Cursor –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    
    def __init__(self, project_path):
        self.project_path = Path(project_path)
        self.running = True
        self.error_patterns = [
            "Failed to save",
            "content of the file is newer",
            "file has been changed outside",
            "conflict",
            "cannot save"
        ]
        
    def monitor_cursor_logs(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ Cursor"""
        log_paths = [
            Path.home() / ".cursor" / "logs",
            Path.home() / ".config" / "cursor" / "logs",
            Path.home() / ".cache" / "cursor" / "logs"
        ]
        
        print(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ Cursor –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
        
        while self.running:
            try:
                for log_dir in log_paths:
                    if log_dir.exists():
                        self.scan_log_directory(log_dir)
                
                time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(10)
    
    def scan_log_directory(self, log_dir):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤"""
        for log_file in log_dir.glob("*.log"):
            try:
                if self.check_recent_errors(log_file):
                    self.trigger_auto_fix()
            except:
                continue
    
    def check_recent_errors(self, log_file):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ"""
        try:
            with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                lines = f.readlines()[-50:]
                
                for line in lines:
                    line_lower = line.lower()
                    if any(pattern.lower() in line_lower for pattern in self.error_patterns):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–≤–µ–∂–∞—è (–Ω–µ —Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫—É–Ω–¥)
                        if self.is_recent_log_entry(line):
                            return True
            
        except:
            pass
            
        return False
    
    def is_recent_log_entry(self, line):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –ª–∏–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        current_time = datetime.now()
        time_patterns = [
            current_time.strftime('%H:%M'),
            (current_time.replace(minute=current_time.minute-1) if current_time.minute > 0 
             else current_time.replace(hour=current_time.hour-1, minute=59)).strftime('%H:%M')
        ]
        
        return any(pattern in line for pattern in time_patterns)
    
    def trigger_auto_fix(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print(f"üö® [{datetime.now().strftime('%H:%M:%S')}] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö - –∑–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        
        try:
            subprocess.run([
                sys.executable, 
                str(self.project_path / "simple_fix.py")
            ], cwd=self.project_path, check=False)
            
            print(f"‚úÖ [{datetime.now().strftime('%H:%M:%S')}] –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –ª–æ–≥–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = False

class AutoFixMonitor:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self, project_path="/home/darksaiders/–ó–∞–≥—Ä—É–∑–∫–∏/–º–æ–π –±–æ—Ç2"):
        self.project_path = Path(project_path)
        self.observer = None
        self.log_monitor = None
        self.log_thread = None
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üõ°Ô∏è –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        print(f"üìÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –ø–∞–ø–∫–∞: {self.project_path}")
        print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 60)
        
        # 1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        event_handler = SaveConflictDetector(self.project_path)
        self.observer = Observer()
        self.observer.schedule(event_handler, str(self.project_path), recursive=True)
        self.observer.start()
        
        # 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ Cursor
        self.log_monitor = LogMonitor(self.project_path)
        self.log_thread = threading.Thread(target=self.log_monitor.monitor_cursor_logs)
        self.log_thread.daemon = True
        self.log_thread.start()
        
        # 3. –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        self.initial_check()
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞!")
        print("üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
        try:
            while True:
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                self.routine_maintenance()
                
        except KeyboardInterrupt:
            self.stop()
    
    def initial_check(self):
        """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        print("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        try:
            subprocess.run([
                sys.executable, 
                str(self.project_path / "simple_fix.py")
            ], cwd=self.project_path, check=False)
        except:
            pass
    
    def routine_maintenance(self):
        """–ü–ª–∞–Ω–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"""
        current_time = datetime.now()
        
        # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –¥–µ–ª–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
        if current_time.minute % 10 == 0:
            print(f"üßπ [{current_time.strftime('%H:%M:%S')}] –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞...")
            try:
                subprocess.run([
                    sys.executable, 
                    str(self.project_path / "simple_fix.py"), 
                    "clean"
                ], cwd=self.project_path, check=False, capture_output=True)
            except:
                pass
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        
        if self.observer:
            self.observer.stop()
            self.observer.join()
        
        if self.log_monitor:
            self.log_monitor.stop()
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    sys.exit(0)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        monitor = AutoFixMonitor()
        monitor.start()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 