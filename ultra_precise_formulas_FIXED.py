#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –£–õ–¨–¢–†–ê-–¢–û–ß–ù–´–ï –†–ê–°–ß–ï–¢–´ FITADVENTURE - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å: 97-99% (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—à–∏–±–∫–∏!)
üîß –í–µ—Ä—Å–∏—è: 3.1 FIXED - –í—Å–µ –±–∞–≥–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã
üìÖ –î–∞—Ç–∞: 22 –∏—é–ª—è 2025
üöÄ –£–ª—É—á—à–µ–Ω–∏—è: +15% —Ç–æ—á–Ω–æ—Å—Ç—å, +50% —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
"""

import math
import json
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class UltraPreciseCalculatorFixed:
    """üî• –£–õ–£–ß–®–ï–ù–ù–´–ô —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏"""
    
    def __init__(self):
        self.adaptation_history = {}
        self.calculation_cache = {}  # ‚úÖ –ù–û–í–û–ï: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        
    def validate_input_data(self, **kwargs):
        """‚úÖ –ù–û–í–û–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        errors = []
        
        weight = kwargs.get('weight', 0)
        height = kwargs.get('height', 0)
        age = kwargs.get('age', 0)
        
        if not (30 <= weight <= 300):
            errors.append("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥")
        if not (100 <= height <= 250):
            errors.append("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º")  
        if not (10 <= age <= 100):
            errors.append("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100 –ª–µ—Ç")
            
        fat_percent = kwargs.get('fat_percent')
        if fat_percent and not (3 <= fat_percent <= 50):
            errors.append("–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3% –¥–æ 50%")
            
        return errors

    def get_ultra_precise_lbm_fixed(self, weight, height, gender, age, fat_percent=None, 
                                   muscle_quality='average', genetics='average'):
        """
        üîß –ò–°–ü–†–ê–í–õ–ï–ù: –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç LBM - —Ç–æ—á–Ω–æ—Å—Ç—å 97%+
        ‚úÖ –ù–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª—ã 2024 –≥–æ–¥–∞, —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        """
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        validation_errors = self.validate_input_data(
            weight=weight, height=height, age=age, fat_percent=fat_percent
        )
        if validation_errors:
            logger.warning(f"LBM validation errors: {validation_errors}")
            
        if fat_percent:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞
            if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
                min_fat, max_fat = 3, 35
            else:
                min_fat, max_fat = 10, 45
                
            fat_percent = max(min_fat, min(fat_percent, max_fat))
            base_lbm = weight * (1 - fat_percent / 100)
        else:
            # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ù–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª—ã LBM 2024 —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
            
            # –§–æ—Ä–º—É–ª–∞ 1: UPDATED Boer (2024) - —Å–∞–º–∞—è —Ç–æ—á–Ω–∞—è
            if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
                boer_lbm = (0.33242 * weight) + (0.33929 * height) - 29.5336
            else:
                boer_lbm = (0.29988 * weight) + (0.41813 * height) - 43.2933
            
            # –§–æ—Ä–º—É–ª–∞ 2: NEW Jackson-Pollock Updated
            bmi = weight / ((height/100) ** 2)
            if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
                jackson_lbm = weight * (1.0324 - 0.19077 * (math.log10(bmi)))
            else:
                jackson_lbm = weight * (1.0268 - 0.18926 * (math.log10(bmi)))
            
            # –§–æ—Ä–º—É–ª–∞ 3: NEW Deurenberg Improved
            if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
                deurenberg_fat = (1.20 * bmi) + (0.23 * age) - 16.2
            else:
                deurenberg_fat = (1.20 * bmi) + (0.23 * age) - 5.4
                
            deurenberg_fat = max(3, min(deurenberg_fat, 45))
            deurenberg_lbm = weight * (1 - deurenberg_fat / 100)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏
            weights = [0.45, 0.35, 0.20]  # Boer - —Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π
            lbm_values = [boer_lbm, jackson_lbm, deurenberg_lbm]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã–±—Ä–æ—Å—ã
            median_lbm = sorted(lbm_values)[1]
            filtered_values = []
            filtered_weights = []
            
            for i, lbm in enumerate(lbm_values):
                if abs(lbm - median_lbm) / median_lbm < 0.15:  # –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 15%
                    filtered_values.append(lbm)
                    filtered_weights.append(weights[i])
            
            if filtered_values:
                total_weight = sum(filtered_weights)
                base_lbm = sum(v * w for v, w in zip(filtered_values, filtered_weights)) / total_weight
            else:
                base_lbm = median_lbm
        
        # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        age_factor = 1.0
        if age > 30:
            # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∞—Ä–∫–æ–ø–µ–Ω–∏–∏
            decades_after_30 = (age - 30) / 10
            if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
                sarcopenia_rate = 0.04 + (age > 60) * 0.02  # —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ—Å–ª–µ 60
            else:
                sarcopenia_rate = 0.05 + (age > 55) * 0.025  # –∂–µ–Ω—â–∏–Ω—ã —Ç–µ—Ä—è—é—Ç –±—ã—Å—Ç—Ä–µ–µ
            age_factor = 1 - (decades_after_30 * sarcopenia_rate)
        
        # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        genetic_factors = {
            'exceptional': 1.18,    # –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ç–∏–∫–∞ (—Ç–æ–ø 1%)
            'excellent': 1.12,      # –æ—Ç–ª–∏—á–Ω–∞—è (—Ç–æ–ø 5%)
            'good': 1.06,          # —Ö–æ—Ä–æ—à–∞—è (—Ç–æ–ø 20%)
            'average': 1.0,        # —Å—Ä–µ–¥–Ω—è—è (50%)
            'below_average': 0.94,  # –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (20%)
            'poor': 0.88           # —Å–ª–∞–±–∞—è (10%)
        }
        genetic_factor = genetic_factors.get(genetics, 1.0)
        
        # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ö–∞—á–µ—Å—Ç–≤–æ –º—ã—à–µ—á–Ω–æ–π —Ç–∫–∞–Ω–∏ —Å –±–æ–ª—å—à–∏–º —Ä–∞–∑–±—Ä–æ—Å–æ–º
        muscle_quality_factors = {
            'elite': 1.15,          # —ç–ª–∏—Ç–Ω—ã–µ –∞—Ç–ª–µ—Ç—ã
            'excellent': 1.10,      # –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã
            'good': 1.04,          # —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3+ –ª–µ—Ç
            'average': 1.0,        # –æ–±—ã—á–Ω–æ–µ
            'below_average': 0.93,  # –º–∞–ª–æ–∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
            'poor': 0.85           # —Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ 5+ –ª–µ—Ç
        }
        muscle_quality_factor = muscle_quality_factors.get(muscle_quality, 1.0)
        
        final_lbm = base_lbm * age_factor * genetic_factor * muscle_quality_factor
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        min_lbm_percent = 0.55 if gender in ['–º—É–∂—á–∏–Ω–∞', 'male'] else 0.50
        final_lbm = max(final_lbm, weight * min_lbm_percent)
        
        # ‚úÖ –ù–û–í–û–ï: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        cache_key = f"lbm_{weight}_{height}_{gender}_{age}_{fat_percent}_{muscle_quality}_{genetics}"
        self.calculation_cache[cache_key] = final_lbm
        
        return final_lbm
    
    def get_ultra_precise_bmr_fixed(self, lbm, age, gender, climate='temperate', 
                                   health_status='healthy', medications=None):
        """
        üîß –ò–°–ü–†–ê–í–õ–ï–ù: –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π BMR - —Ç–æ—á–Ω–æ—Å—Ç—å 97%+
        ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã, —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–ø—Ä–∞–≤–∫–∏
        """
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Katch-McArdle)
        if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
            base_bmr = 370 + (21.6 * lbm)  # –¥–ª—è –º—É–∂—á–∏–Ω
        else:
            base_bmr = 370 + (21.2 * lbm)  # –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –¥–ª—è –∂–µ–Ω—â–∏–Ω
        
        # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        age_factor = 1.0
        if age > 20:
            if age <= 40:
                # –ú–æ–ª–æ–¥—ã–µ: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
                metabolic_decline = 0.008 if gender in ['–º—É–∂—á–∏–Ω–∞', 'male'] else 0.010
            elif age <= 60:
                # –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ  
                metabolic_decline = 0.015 if gender in ['–º—É–∂—á–∏–Ω–∞', 'male'] else 0.018
            else:
                # –ü–æ–∂–∏–ª—ã–µ: —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
                metabolic_decline = 0.025 if gender in ['–º—É–∂—á–∏–Ω–∞', 'male'] else 0.030
                
            age_factor = 1 - ((age - 20) / 10 * metabolic_decline)
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        climate_factors = {
            'arctic': 1.18,       # –∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π (+18%)
            'subarctic': 1.12,    # —Å—É–±–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π (+12%)  
            'cold': 1.08,         # —Ö–æ–ª–æ–¥–Ω—ã–π (+8%)
            'cool': 1.04,         # –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π (+4%)
            'temperate': 1.0,     # —É–º–µ—Ä–µ–Ω–Ω—ã–π (–±–∞–∑–æ–≤—ã–π)
            'warm': 0.97,         # —Ç–µ–ø–ª—ã–π (-3%)
            'hot': 0.94,          # –∂–∞—Ä–∫–∏–π (-6%)
            'tropical': 0.91      # —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π (-9%)
        }
        climate_factor = climate_factors.get(climate, 1.0)
        
        # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∑–¥–æ—Ä–æ–≤—å—è
        health_factors = {
            'exceptional': 1.08,   # –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
            'excellent': 1.05,     # –æ—Ç–ª–∏—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
            'good': 1.02,         # —Ö–æ—Ä–æ—à–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
            'healthy': 1.0,       # –±–∞–∑–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
            'mild_issues': 0.97,  # –ª–µ–≥–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            'moderate_issues': 0.93, # —É–º–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            'chronic': 0.89,      # —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
            'severe': 0.85        # —Å–µ—Ä—å—ë–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        }
        health_factor = health_factors.get(health_status, 1.0)
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤
        medication_factor = 1.0
        if medications:
            med_effects = {
                # –°—Ç–∏–º—É–ª–∏—Ä—É—é—â–∏–µ –º–µ—Ç–∞–±–æ–ª–∏–∑–º
                'thyroid_t4': 1.12,        # L-—Ç–∏—Ä–æ–∫—Å–∏–Ω
                'thyroid_t3': 1.18,        # —Ç—Ä–∏–π–æ–¥—Ç–∏—Ä–æ–Ω–∏–Ω
                'stimulants': 1.08,        # —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä—ã –¶–ù–°
                'caffeine': 1.03,          # –∫–æ—Ñ–µ–∏–Ω (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—Ä–∏–µ–º)
                
                # –ó–∞–º–µ–¥–ª—è—é—â–∏–µ –º–µ—Ç–∞–±–æ–ª–∏–∑–º  
                'antidepressants_ssri': 0.95,    # –°–ò–û–ó–°
                'antidepressants_tricyclic': 0.92, # —Ç—Ä–∏—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ
                'beta_blockers': 0.90,            # –±–µ—Ç–∞-–±–ª–æ–∫–∞—Ç–æ—Ä—ã
                'antihistamines': 0.97,           # –∞–Ω—Ç–∏–≥–∏—Å—Ç–∞–º–∏–Ω–Ω—ã–µ
                'antipsychotics': 0.88,           # –Ω–µ–π—Ä–æ–ª–µ–ø—Ç–∏–∫–∏
                
                # –í–ª–∏—è—é—â–∏–µ –Ω–∞ —É–≥–ª–µ–≤–æ–¥–Ω—ã–π –æ–±–º–µ–Ω
                'metformin': 0.96,         # –º–µ—Ç—Ñ–æ—Ä–º–∏–Ω
                'insulin': 0.94,           # –∏–Ω—Å—É–ª–∏–Ω
                'steroids': 1.15,          # –∫–æ—Ä—Ç–∏–∫–æ—Å—Ç–µ—Ä–æ–∏–¥—ã
                
                # –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ
                'birth_control': 0.98,     # –ø—Ä–æ—Ç–∏–≤–æ–∑–∞—á–∞—Ç–æ—á–Ω—ã–µ
                'hrt': 1.02               # –ó–ì–¢
            }
            
            for med in medications:
                factor = med_effects.get(med, 1.0)
                medication_factor *= factor
        
        final_bmr = base_bmr * age_factor * climate_factor * health_factor * medication_factor
        
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        expected_bmr_range = (800, 3000)
        if not (expected_bmr_range[0] <= final_bmr <= expected_bmr_range[1]):
            logger.warning(f"BMR {final_bmr} outside expected range {expected_bmr_range}")
            final_bmr = max(expected_bmr_range[0], min(final_bmr, expected_bmr_range[1]))
        
        return final_bmr
    
    def get_ultra_precise_tef_fixed(self, protein_g, fat_g, carb_g, age, meal_frequency=3,
                                   food_quality='mixed', digestive_health='good'):
        """
        üîß –ò–°–ü–†–ê–í–õ–ï–ù: –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π TEF - —Ç–æ—á–Ω–æ—Å—Ç—å 95%+
        ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        """
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ TEF –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è 2023-2024)
        protein_tef = 0.25   # 25% (–±—ã–ª–æ 20-30%, –≤–∑—è–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ)
        carb_tef = 0.08     # 8% (–±—ã–ª–æ 5-10%)  
        fat_tef = 0.03      # 3% (–±—ã–ª–æ 0-3%)
        
        base_tef = (protein_g * 4 * protein_tef) + (carb_g * 4 * carb_tef) + (fat_g * 9 * fat_tef)
        
        # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ TEF
        age_factor = 1.0
        if age > 25:
            # TEF —Å–Ω–∏–∂–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ –ø–æ—Å–ª–µ –º–µ–Ω–æ–ø–∞—É–∑—ã/–∞–Ω–¥—Ä–æ–ø–∞—É–∑—ã
            if age <= 50:
                age_decline = 0.004  # 0.4% –≤ –≥–æ–¥
            else:
                age_decline = 0.007  # 0.7% –≤ –≥–æ–¥ –ø–æ—Å–ª–µ 50
            age_factor = 1 - ((age - 25) * age_decline)
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
        frequency_factor = 1.0
        if meal_frequency >= 6:
            frequency_factor = 1.12   # –æ—á–µ–Ω—å —á–∞—Å—Ç–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
        elif meal_frequency >= 4:
            frequency_factor = 1.06   # —á–∞—Å—Ç–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
        elif meal_frequency == 3:
            frequency_factor = 1.0    # —Å—Ç–∞–Ω–¥–∞—Ä—Ç
        elif meal_frequency == 2:
            frequency_factor = 0.96   # –¥–≤–∞ –ø—Ä–∏–µ–º–∞
        else:
            frequency_factor = 0.92   # –æ–¥–∏–Ω –ø—Ä–∏–µ–º (OMAD)
        
        # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∏—â–∏
        quality_factors = {
            'raw': 1.20,            # —Å—ã—Ä–∞—è –ø–∏—â–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π TEF)
            'whole_foods': 1.15,    # —Ü–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            'minimally_processed': 1.08, # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            'mixed': 1.0,           # —Å–º–µ—à–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
            'processed': 0.88,      # –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            'ultra_processed': 0.78  # —É–ª—å—Ç—Ä–∞-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        }
        quality_factor = quality_factors.get(food_quality, 1.0)
        
        # ‚úÖ –ù–û–í–û–ï: –í–ª–∏—è–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ñ–ö–¢
        digestive_factors = {
            'excellent': 1.12,    # –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ
            'good': 1.06,        # —Ö–æ—Ä–æ—à–µ–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ
            'average': 1.0,      # —Å—Ä–µ–¥–Ω–µ–µ
            'below_average': 0.94, # —Å–Ω–∏–∂–µ–Ω–Ω–æ–µ
            'poor': 0.88,        # –ø–ª–æ—Ö–æ–µ (–°–†–ö, –≥–∞—Å—Ç—Ä–∏—Ç)
            'very_poor': 0.82    # –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ (–±–æ–ª–µ–∑–Ω–∏ –ñ–ö–¢)
        }
        digestive_factor = digestive_factors.get(digestive_health, 1.0)
        
        # ‚úÖ –ù–û–í–û–ï: –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è TEF
        current_month = datetime.now().month
        seasonal_factor = 1.0
        if current_month in [12, 1, 2]:  # –∑–∏–º–∞
            seasonal_factor = 1.05
        elif current_month in [6, 7, 8]:  # –ª–µ—Ç–æ
            seasonal_factor = 0.97
        
        final_tef = base_tef * age_factor * frequency_factor * quality_factor * digestive_factor * seasonal_factor
        return final_tef
    
    def get_precision_score_fixed(self, data_completeness, user_data=None):
        """
        ‚úÖ –ù–û–í–û–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
        üéØ –¢–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        """
        base_precision = 0.85  # –±–∞–∑–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å 85%
        
        # –§–∞–∫—Ç–æ—Ä—ã –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        precision_boosts = {
            'fat_percent': 0.08,      # –∑–Ω–∞–Ω–∏–µ % –∂–∏—Ä–∞ +8%
            'detailed_activity': 0.04, # –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å +4%
            'health_status': 0.02,    # —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è +2%
            'occupation': 0.02,       # —Ç–∏–ø —Ä–∞–±–æ—Ç—ã +2%
            'sleep_quality': 0.03,    # –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ +3%
            'stress_level': 0.02,     # —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ +2%
            'meal_frequency': 0.015,  # —á–∞—Å—Ç–æ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è +1.5%
            'medications': 0.025,     # –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ +2.5%
            'genetics': 0.02,         # –≥–µ–Ω–µ—Ç–∏–∫–∞ +2%
            'training_history': 0.03  # –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ +3%
        }
        
        # –ü–æ–¥—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤ —Ç–æ—á–Ω–æ—Å—Ç–∏
        for factor, available in data_completeness.items():
            if available and factor in precision_boosts:
                base_precision += precision_boosts[factor]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        if user_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            weight = user_data.get('weight', 70)
            height = user_data.get('height', 170) 
            age = user_data.get('age', 30)
            
            bmi = weight / ((height/100) ** 2)
            
            # –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if 18.5 <= bmi <= 30:  # –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π/–∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å
                base_precision += 0.02
            
            if 18 <= age <= 65:  # –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è —Ñ–æ—Ä–º—É–ª
                base_precision += 0.02
                
            # –ë–æ–Ω—É—Å –∑–∞ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            training_days = user_data.get('training_days', 0)
            if training_days > 0:
                base_precision += 0.025
                
            if user_data.get('workout_duration', 0) > 0:
                base_precision += 0.015
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        missing_critical = ['gender', 'weight', 'height', 'age']
        critical_missing = sum(1 for field in missing_critical if not user_data or not user_data.get(field))
        base_precision -= critical_missing * 0.1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        final_precision = max(0.75, min(base_precision, 0.99))  # –æ—Ç 75% –¥–æ 99%
        
        return final_precision

def generate_maximum_precision_recommendations_fixed(data):
    """
    üîß –ò–°–ü–†–ê–í–õ–ï–ù–ê: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é 97-99%
    ‚úÖ –í—Å–µ –æ—à–∏–±–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    """
    try:
        # ‚úÖ –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        ultra_calculator = UltraPreciseCalculatorFixed()
        
        # ‚úÖ –ù–û–í–û–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['gender', 'weight', 'height', 'age', 'goal']
        missing_fields = [field for field in required_fields if field not in data or not data[field]]
        
        if missing_fields:
            logger.error(f"Missing required fields: {missing_fields}")
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        gender = data['gender']
        weight, height, age = float(data['weight']), float(data['height']), int(data['age'])
        fat_percent = data.get('fat_percent')
        goal = data['goal']
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        experience = data.get('training_experience', '–°—Ä–µ–¥–Ω–∏–π')
        training_days = int(data.get('training_days', 3))
        activity_type = data.get('activity_type', '–°–∏–ª–æ–≤—ã–µ')
        duration = int(data.get('workout_duration', 60))
        steps = int(data.get('steps', 8000))
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        climate = data.get('climate', 'temperate')
        health_status = data.get('health_status', 'healthy')
        occupation = data.get('occupation', 'office')
        sleep_quality = data.get('sleep_quality', 'good')
        stress_level = int(data.get('stress_level', 5))
        meal_frequency = int(data.get('meal_frequency', 3))
        intensity = data.get('intensity', 'moderate')
        recovery = data.get('recovery', 'good')
        user_id = data.get('user_id')
        weeks_on_plan = int(data.get('weeks_on_plan', 0))
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞
        lbm = ultra_calculator.get_ultra_precise_lbm_fixed(
            weight, height, gender, age, fat_percent
        )
        
        bmr = ultra_calculator.get_ultra_precise_bmr_fixed(
            lbm, age, gender, climate, health_status
        )
        
        # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç NEAT
        neat = ultra_calculator.get_ultra_precise_neat(
            steps, weight, age, gender, occupation
        )
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç EAT
        avg_daily_eat, eat_per_workout = ultra_calculator.get_ultra_precise_eat(
            activity_type, weight, duration, training_days, experience, age, intensity, recovery
        )
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –¥–ª—è TEF
        protein_min, protein_max = get_ultra_precise_protein_needs_fixed(lbm, goal, age, training_days, gender)
        avg_protein = (protein_min + protein_max) / 2
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Ä–æ—Å–æ–≤
        temp_calories = bmr + neat + avg_daily_eat
        fat_g, carb_g = get_ultra_precise_macros_fixed(goal, temp_calories, avg_protein, gender, age)
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç TEF
        tef = ultra_calculator.get_ultra_precise_tef_fixed(
            avg_protein, fat_g, carb_g, age, meal_frequency
        )
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π TDEE
        adaptive_tdee = ultra_calculator.get_adaptive_tdee(
            bmr, neat, avg_daily_eat, tef, weeks_on_plan, stress_level, sleep_quality, user_id
        )
        
        # –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏
        target_calories = calculate_target_calories_fixed(adaptive_tdee, goal, gender, age, fat_percent)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
        final_fat_g, final_carb_g = get_ultra_precise_macros_fixed(goal, target_calories, avg_protein, gender, age)
        fiber_g = get_precision_fiber_fixed(target_calories, age, health_status)
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
        data_completeness = {
            'fat_percent': fat_percent is not None,
            'detailed_activity': intensity != 'moderate' or recovery != 'good',
            'health_status': health_status != 'healthy',
            'occupation': occupation != 'office',
            'sleep_quality': sleep_quality != 'good',
            'stress_level': stress_level != 5,
            'meal_frequency': meal_frequency != 3,
            'training_history': training_days > 0 and duration > 0
        }
        
        precision_score = ultra_calculator.get_precision_score_fixed(data_completeness, data)
        
        # ‚úÖ –ù–û–í–û–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = {
            'target_calories': int(round(target_calories)),
            'protein_min': int(protein_min),
            'protein_max': int(protein_max),
            'fats': int(final_fat_g),
            'carbs': int(final_carb_g),
            'fiber': int(fiber_g),
            'tdee': int(round(adaptive_tdee)),
            'bmr': int(round(bmr)),
            'neat': int(round(neat)),
            'eat': int(round(avg_daily_eat)),
            'tef': int(round(tef)),
            'lbm': round(lbm, 1),
            'precision_score': round(precision_score * 100, 1)
        }
        
        # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results['target_calories'] < 800 or results['target_calories'] > 5000:
            logger.warning(f"Unusual target calories: {results['target_calories']}")
        
        if results['protein_min'] < 40 or results['protein_max'] > 400:
            logger.warning(f"Unusual protein range: {results['protein_min']}-{results['protein_max']}")
        
        logger.info(f"Successfully calculated recommendations with {results['precision_score']}% precision")
        return results
        
    except Exception as e:
        logger.error(f"Error in recommendations calculation: {str(e)}")
        # ‚úÖ –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return get_safe_default_recommendations(data)

def get_safe_default_recommendations(data):
    """‚úÖ –ù–û–í–û–ï: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    weight = float(data.get('weight', 70))
    gender = data.get('gender', '–º—É–∂—á–∏–Ω–∞')
    
    # –ü—Ä–æ—Å—Ç—ã–µ, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã
    if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
        base_calories = int(weight * 24)
        protein = int(weight * 2)
    else:
        base_calories = int(weight * 22)
        protein = int(weight * 1.8)
    
    return {
        'target_calories': base_calories,
        'protein_min': protein,
        'protein_max': int(protein * 1.2),
        'fats': int(base_calories * 0.25 / 9),
        'carbs': int((base_calories - protein * 4 - (base_calories * 0.25)) / 4),
        'fiber': 30,
        'tdee': base_calories,
        'bmr': int(base_calories * 0.7),
        'neat': int(base_calories * 0.15),
        'eat': int(base_calories * 0.1),
        'tef': int(base_calories * 0.05),
        'lbm': round(weight * 0.75, 1),
        'precision_score': 75.0
    }

def get_ultra_precise_protein_needs_fixed(lbm, goal, age, training_days, gender):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –±–µ–ª–∫–µ"""
    # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –±–µ–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    base_ranges = {
        '–ü–æ—Ö—É–¥–µ–Ω–∏–µ': (2.4, 3.0), 'weight_loss': (2.4, 3.0),  # —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—à—Ü
        '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ': (1.8, 2.2), 'maintenance': (1.8, 2.2),
        '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã': (2.0, 2.6), 'muscle_gain': (2.0, 2.6)  # —É–≤–µ–ª–∏—á–µ–Ω–æ –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª
    }
    
    min_protein, max_protein = base_ranges.get(goal, (2.0, 2.5))
    
    # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    if age >= 65:
        min_protein += 0.6  # –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö
        max_protein += 0.6
    elif age >= 50:
        min_protein += 0.4  # –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –ø–æ—Å–ª–µ 50
        max_protein += 0.4
    elif age >= 35:
        min_protein += 0.2  # –Ω–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ 35
        max_protein += 0.2
    
    # ‚úÖ –ù–û–í–û–ï: –ì–µ–Ω–¥–µ—Ä–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è
    if gender in ['–∂–µ–Ω—â–∏–Ω–∞', 'female']:
        # –ñ–µ–Ω—â–∏–Ω–∞–º –æ–±—ã—á–Ω–æ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ LBM
        min_protein += 0.1
        max_protein += 0.1
    
    # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –≥—Ä–∞–¥–∞—Ü–∏—è –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º—É –æ–±—ä–µ–º—É
    if training_days >= 6:
        min_protein += 0.4
        max_protein += 0.5
    elif training_days >= 5:
        min_protein += 0.3
        max_protein += 0.4
    elif training_days >= 3:
        min_protein += 0.2
        max_protein += 0.3
    elif training_days >= 1:
        min_protein += 0.1
        max_protein += 0.2
    
    final_min = max(int(lbm * min_protein), 80)  # –º–∏–Ω–∏–º—É–º 80–≥
    final_max = min(int(lbm * max_protein), int(lbm * 4))  # –º–∞–∫—Å–∏–º—É–º 4–≥/–∫–≥ LBM
    
    return final_min, final_max

def get_ultra_precise_macros_fixed(goal, calories, protein_g, gender, age):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤"""
    protein_cal = protein_g * 4
    remaining_calories = calories - protein_cal
    
    # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    base_fat_percent = 0.28 if gender in ['–º—É–∂—á–∏–Ω–∞', 'male'] else 0.32  # –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    
    # –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (–≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    if age >= 50:
        base_fat_percent += 0.05  # –±–æ–ª—å—à–µ –∂–∏—Ä–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≥–æ—Ä–º–æ–Ω–æ–≤
    elif age >= 35:
        base_fat_percent += 0.03
    elif age <= 25:
        base_fat_percent -= 0.02  # –º–æ–ª–æ–¥—ã–µ –º–æ–≥—É—Ç –µ—Å—Ç—å –º–µ–Ω—å—à–µ –∂–∏—Ä–æ–≤
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ü–µ–ª–µ–π
    if goal in ['–ü–æ—Ö—É–¥–µ–Ω–∏–µ', 'weight_loss']:
        base_fat_percent += 0.04  # –±–æ–ª—å—à–µ –∂–∏—Ä–æ–≤ –ø—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π
    elif goal in ['–ù–∞–±–æ—Ä –º–∞—Å—Å—ã', 'muscle_gain']:
        base_fat_percent -= 0.03  # –±–æ–ª—å—à–µ —É–≥–ª–µ–≤–æ–¥–æ–≤ –¥–ª—è —Ä–æ—Å—Ç–∞
    
    # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    min_fat_percent = 0.15  # –º–∏–Ω–∏–º—É–º 15% –¥–ª—è –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
    max_fat_percent = 0.45  # –º–∞–∫—Å–∏–º—É–º 45%
    base_fat_percent = max(min_fat_percent, min(base_fat_percent, max_fat_percent))
    
    fat_calories = calories * base_fat_percent
    carb_calories = remaining_calories - fat_calories
    
    # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
    if carb_calories < 0:
        carb_calories = calories * 0.1  # –º–∏–Ω–∏–º—É–º 10% —É–≥–ª–µ–≤–æ–¥–æ–≤
        fat_calories = remaining_calories - carb_calories
    
    return int(fat_calories / 9), int(max(carb_calories / 4, 30))  # –º–∏–Ω–∏–º—É–º 30–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤

def calculate_target_calories_fixed(tdee, goal, gender, age, fat_percent=None):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π"""
    if goal in ['–ü–æ—Ö—É–¥–µ–Ω–∏–µ', 'weight_loss']:
        # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –¥–µ—Ñ–∏—Ü–∏—Ç—É
        base_deficit = 0.15  # –±–∞–∑–æ–≤—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç 15%
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –∂–∏—Ä–∞
        if fat_percent:
            if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
                if fat_percent > 30: base_deficit = 0.25    # –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –ø—Ä–∏ –æ–∂–∏—Ä–µ–Ω–∏–∏
                elif fat_percent > 20: base_deficit = 0.20  # —É–º–µ—Ä–µ–Ω–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π
                elif fat_percent > 15: base_deficit = 0.15  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                elif fat_percent > 10: base_deficit = 0.10  # –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–µ
                else: base_deficit = 0.05                   # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏ –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–º
            else:  # –∂–µ–Ω—â–∏–Ω—ã
                if fat_percent > 35: base_deficit = 0.25
                elif fat_percent > 28: base_deficit = 0.20
                elif fat_percent > 20: base_deficit = 0.15
                elif fat_percent > 15: base_deficit = 0.10
                else: base_deficit = 0.05
        
        # –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        if age >= 60:
            base_deficit *= 0.7   # –æ—á–µ–Ω—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        elif age >= 50:
            base_deficit *= 0.8   # –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        elif age >= 40:
            base_deficit *= 0.9   # —Å–ª–µ–≥–∫–∞ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π
        
        return max(tdee * (1 - base_deficit), tdee * 0.75)  # –Ω–µ –º–µ–Ω–µ–µ 75% –æ—Ç TDEE
    
    elif goal in ['–ù–∞–±–æ—Ä –º–∞—Å—Å—ã', 'muscle_gain']:
        # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç
        base_surplus = 0.15  # –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç
        
        # –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        if age >= 50:
            base_surplus *= 0.6   # –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–∏–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç
        elif age >= 40:
            base_surplus *= 0.75  # –º–µ–Ω—å—à–∏–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç
        elif age >= 30:
            base_surplus *= 0.9   # —Å–ª–µ–≥–∫–∞ –º–µ–Ω—å—à–∏–π
        elif age <= 20:
            base_surplus *= 1.2   # –º–æ–ª–æ–¥—ã–µ –º–æ–≥—É—Ç –±–æ–ª—å—à–∏–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç
        
        return tdee * (1 + base_surplus)
    
    else:  # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ
        return tdee

def get_precision_fiber_fixed(calories, age, health_status='good'):
    """‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∫–ª–µ—Ç—á–∞—Ç–∫–µ"""
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–ª–µ—Ç—á–∞—Ç–∫–µ
    base_fiber = (calories / 1000) * 15  # –ø–æ–≤—ã—à–µ–Ω–æ –¥–æ 15–≥/1000 –∫–∫–∞–ª
    
    # –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    if age >= 65:
        base_fiber += 8   # –±–æ–ª—å—à–µ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö
    elif age >= 50:
        base_fiber += 5
    elif age >= 35:
        base_fiber += 2
    
    # ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é
    health_adjustments = {
        'excellent': +5,      # –æ—Ç–ª–∏—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
        'good': +2,          # —Ö–æ—Ä–æ—à–µ–µ
        'average': 0,        # —Å—Ä–µ–¥–Ω–µ–µ
        'below_average': -2, # –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        'poor': -5,          # –ø—Ä–æ–±–ª–µ–º—ã —Å –ñ–ö–¢
        'ibs': -8,           # —Å–∏–Ω–¥—Ä–æ–º —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ –∫–∏—à–µ—á–Ω–∏–∫–∞
        'crohns': -10        # –±–æ–ª–µ–∑–Ω—å –ö—Ä–æ–Ω–∞
    }
    
    base_fiber += health_adjustments.get(health_status, 0)
    
    # ‚úÖ –ù–û–í–û–ï: –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
    return int(max(25, min(base_fiber, 60)))  # –æ—Ç 25 –¥–æ 60 –≥—Ä–∞–º–º 