#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π HTTPS —Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram Web App
"""

import ssl
import socket
from http.server import HTTPServer, SimpleHTTPRequestHandler
import os
import sys
import subprocess
import json
import time
from pathlib import Path

class WebAppHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Telegram Web App
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.send_header('Content-Security-Policy', "default-src 'self' 'unsafe-inline' 'unsafe-eval' https://telegram.org")
        super().end_headers()
    
    def do_GET(self):
        print(f"üì• –ó–∞–ø—Ä–æ—Å: {self.path}")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –Ω–∞ Web App
        if self.path == '/':
            self.path = '/webapp_products.html'
            print(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ Web App")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_path = os.path.join(os.getcwd(), self.path.lstrip('/'))
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            self.send_error(404, "File not found")
            return
        
        print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_path}")
        return super().do_GET()
    
    def log_message(self, format, *args):
        print(f"üìù {format % args}")

def create_ssl_cert():
    """–°–æ–∑–¥–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    cert_file = 'webapp_cert.pem'
    key_file = 'webapp_key.pem'
    
    if not os.path.exists(cert_file) or not os.path.exists(key_file):
        print("üîê –°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...")
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            cmd = f'openssl req -x509 -newkey rsa:4096 -keyout {key_file} -out {cert_file} -days 365 -nodes -subj "/C=RU/ST=Moscow/L=Moscow/O=FitAdventure/CN=localhost"'
            subprocess.run(cmd, shell=True, check=True)
            print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω")
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
            return None, None
    
    return cert_file, key_file

def setup_ngrok():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ngrok –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    ngrok_file = 'ngrok'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ngrok
    if not os.path.exists(ngrok_file):
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ ngrok...")
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º ngrok
            subprocess.run('wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz', shell=True, check=True)
            subprocess.run('tar -xzf ngrok-v3-stable-linux-amd64.tgz', shell=True, check=True)
            print("‚úÖ ngrok —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ngrok")
            return None
    
    return ngrok_file

def start_ngrok_tunnel(port):
    """–ó–∞–ø—É—Å–∫–∞–µ–º ngrok —Ç—É–Ω–Ω–µ–ª—å"""
    ngrok_file = setup_ngrok()
    if not ngrok_file:
        return None
    
    print("üåê –ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok –≤ —Ñ–æ–Ω–µ
        ngrok_process = subprocess.Popen(
            [f'./{ngrok_file}', 'http', str(port), '--log=stdout'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Ç—É–Ω–Ω–µ–ª—è
        time.sleep(3)
        
        # –ü–æ–ª—É—á–∞–µ–º URL —Ç—É–Ω–Ω–µ–ª—è
        try:
            response = subprocess.run(['curl', '-s', 'http://localhost:4040/api/tunnels'], 
                                   capture_output=True, text=True, timeout=5)
            tunnels = json.loads(response.stdout)
            if tunnels and 'tunnels' in tunnels:
                public_url = tunnels['tunnels'][0]['public_url']
                print(f"‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π URL: {public_url}")
                return public_url, ngrok_process
        except:
            pass
        
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL, –Ω–æ —Ç—É–Ω–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω")
        return None, ngrok_process
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok: {e}")
        return None, None

def main():
    port = 8443
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ HTTPS Web App —Å–µ—Ä–≤–µ—Ä–∞")
    
    # –ú–µ–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —Ñ–∞–π–ª
    if not os.path.exists('webapp_products.html'):
        print("‚ùå webapp_products.html –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    cert_file, key_file = create_ssl_cert()
    if not cert_file or not key_file:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok —Ç—É–Ω–Ω–µ–ª—å
    public_url, ngrok_process = start_ngrok_tunnel(port)
    
    try:
        # –°–æ–∑–¥–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
        server = HTTPServer(('0.0.0.0', port), WebAppHandler)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL
        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        context.load_cert_chain(cert_file, key_file)
        server.socket = context.wrap_socket(server.socket, server_side=True)
        
        print(f"\nüéâ HTTPS Web App —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
        print(f"üåê –õ–æ–∫–∞–ª—å–Ω—ã–π HTTPS: https://localhost:{port}")
        print(f"üì± Web App URL: https://localhost:{port}/webapp_products.html")
        
        if public_url:
            print(f"üåç –ü—É–±–ª–∏—á–Ω—ã–π URL: {public_url}")
            print(f"üì± –ü—É–±–ª–∏—á–Ω—ã–π Web App: {public_url}/webapp_products.html")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –±–æ—Ç–∞
            with open('webapp_url.txt', 'w') as f:
                f.write(public_url)
            print("üíæ URL —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ webapp_url.txt")
        
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞")
        print("2. –ù–∞–∂–º–∏—Ç–µ 'üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'")
        print("3. –í—ã–±–µ—Ä–∏—Ç–µ 'üçé –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'")
        print("4. –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ Telegram")
        
        print("\n‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        server.serve_forever()
        
    except KeyboardInterrupt:
        print("\n‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        if ngrok_process:
            ngrok_process.terminate()
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if ngrok_process:
            ngrok_process.terminate()

if __name__ == "__main__":
    main() 