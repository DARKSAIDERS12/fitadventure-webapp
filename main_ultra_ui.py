#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FitAdventure Bot v4.0 - Clean Version (No Decorative Elements)
–ß–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
"""

import os
import asyncio
import logging
import json
import random
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—ã
try:
    from ultra_precise_formulas_FIXED import generate_maximum_precision_recommendations
except ImportError:
    from ultra_precise_formulas import generate_maximum_precision_recommendations

# === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –¢–û–ö–ï–ù–ê ===
def setup_bot_token():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    env_file = Path('.env')
    
    if env_file.exists():
        load_dotenv()
        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if token:
            print("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return token
    
    print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram")
    print("2. –ù–∞–π–¥–∏—Ç–µ @BotFather")
    print("3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot")
    print("4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω")
    
    while True:
        token = input("üîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: ").strip()
        
        if not token:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            continue
            
        if not token.startswith(('1', '2', '5', '6')) or ':' not in token:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞!")
            continue
            
        try:
            with open('.env', 'w', encoding='utf-8') as f:
                f.write(f"TELEGRAM_BOT_TOKEN={token}\n")
            
            print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª .env")
            return token
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            continue

load_dotenv()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
LANGUAGE_CHOICE, GENDER, AGE, WEIGHT, HEIGHT, FAT_PERCENTAGE, FAT_PERCENTAGE_INPUT, GOAL, TRAINING_EXPERIENCE, TRAINING_DAYS, ACTIVITY_TYPE, WORKOUT_DURATION, STEPS, INTENSITY, RECOVERY, SLEEP_QUALITY, STRESS_LEVEL, OCCUPATION, USER_SETTINGS = range(19)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
user_data_storage = {}
user_settings = {}
achievements_data = {}

# === –ü–†–û–°–¢–´–ï –ü–†–û–ì–†–ï–°–°-–ë–ê–†–´ –ë–ï–ó –î–ï–ö–û–†–ê ===
def create_clean_progress(current: int, total: int = 12) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    progress_percent = min(current / total, 1.0) * 100
    filled = int(current * 10 / total)
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑ –æ–±—ã—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    progress_bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
    
    return f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{total} ({progress_percent:.0f}%)\n{progress_bar}"

# === –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô ===
def check_achievements(user_id: int, action: str, value=None) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in achievements_data:
        achievements_data[user_id] = {
            'started_survey': False,
            'completed_survey': False,
            'perfectionist': False,
            'fitness_expert': False,
            'health_enthusiast': False
        }
    
    new_achievements = []
    
    if action == "start_survey" and not achievements_data[user_id]['started_survey']:
        achievements_data[user_id]['started_survey'] = True
        new_achievements.append({
            'name': '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
            'description': '–ù–∞—á–∞–ª–∏ –∞–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è',
            'icon': 'üåü'
        })
    
    elif action == "complete_survey" and not achievements_data[user_id]['completed_survey']:
        achievements_data[user_id]['completed_survey'] = True
        new_achievements.append({
            'name': '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
            'description': '–ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å',
            'icon': 'üöÄ'
        })
    
    elif action == "high_precision" and value and value >= 98 and not achievements_data[user_id]['perfectionist']:
        achievements_data[user_id]['perfectionist'] = True
        new_achievements.append({
            'name': '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
            'description': '–ü–æ–ª—É—á–∏–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å 98%+',
            'icon': 'üëë'
        })
    
    return new_achievements

def format_achievement_notification(achievements: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö"""
    if not achievements:
        return ""
    
    notification = f"\nüëë –ù–û–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø üëë\n"
    for achievement in achievements:
        notification += f"{achievement['icon']} **{achievement['name']}**\n"
        notification += f"   _{achievement['description']}_\n"
    notification += f"üëë –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üëë\n"
    
    return notification

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
def get_user_theme(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_settings.get(user_id, {}).get('theme', 'default')

def set_user_theme(user_id: int, theme: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_settings:
        user_settings[user_id] = {}
    user_settings[user_id]['theme'] = theme

def save_user_progress(user_id: int, step: int):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_settings:
        user_settings[user_id] = {}
    user_settings[user_id]['last_step'] = step
    user_settings[user_id]['last_session'] = datetime.now().isoformat()

# === –£–ú–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
def generate_smart_tips(user_data: dict) -> list:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tips = []
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    age = user_data.get('age', 0)
    if age < 25:
        tips.append({
            'title': '–°–æ–≤–µ—Ç –¥–ª—è –º–æ–ª–æ–¥—ã—Ö',
            'text': '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–∏—Ç–∞–Ω–∏—è',
            'icon': 'üå±'
        })
    elif age > 40:
        tips.append({
            'title': '–°–æ–≤–µ—Ç –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö',
            'text': '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ –∏ –æ–º–µ–≥–∞-3',
            'icon': 'üëë'
        })
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–ª–∏
    goal = user_data.get('goal', '')
    if '–ü–æ—Ö—É–¥–µ–Ω–∏–µ' in goal:
        tips.append({
            'title': '–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è',
            'text': '–°–æ–∑–¥–∞–π—Ç–µ —É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 10-20%',
            'icon': 'üî•'
        })
    
    return tips

def format_smart_tips(tips: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    if not tips:
        return ""
    
    formatted = f"\nü™Ñ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –°–û–í–ï–¢–´ ü™Ñ\n"
    for tip in tips:
        formatted += f"{tip['icon']} **{tip['title']}**\n"
        formatted += f"   _{tip['text']}_\n\n"
    
    return formatted

# === –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø ===
def generate_personalized_celebration(user_data: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
    age = user_data.get('age', 25)
    goal = user_data.get('goal', '')
    
    styles = ['energetic', 'motivational', 'wise']
    style = random.choice(styles)
    
    if style == 'energetic' and age < 30:
        return f"""
üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! üéâ
–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≥–æ—Ç–æ–≤!
–í—Ä–µ–º—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å!
"""
    elif style == 'motivational':
        return f"""
üí™ –û–¢–õ–ò–ß–ù–û! üí™
–í—ã —Å–¥–µ–ª–∞–ª–∏ –≤–∞–∂–Ω—ã–π —à–∞–≥ –∫ –∑–¥–æ—Ä–æ–≤—å—é
–í–∞—à–∏ —Ü–µ–ª–∏ –¥–æ—Å—Ç–∏–∂–∏–º—ã!
"""
    else:
        return f"""
‚ú® –ü–†–ï–í–û–°–•–û–î–ù–û! ‚ú®
–í–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω
–ü—É—Ç—å –∫ —É—Å–ø–µ—Ö—É –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è
"""

# === –≠–ö–°–ü–û–†–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
def create_result_summary(user_data: dict, results: dict) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    summary = f"""
üîÆ FITADVENTURE ULTRA v4.0 üîÆ
–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('user_id', 'Unknown')}
üéØ –¶–µ–ª—å: {user_data.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üí™ –û–ø—ã—Ç: {user_data.get('training_experience', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:
–¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {results.get('target_calories', 0)} –∫–∫–∞–ª
–ë–µ–ª–∫–∏: {results.get('protein_min', 0)}-{results.get('protein_max', 0)} –≥
–ñ–∏—Ä—ã: {results.get('fats', 0)} –≥
–£–≥–ª–µ–≤–æ–¥—ã: {results.get('carbs', 0)} –≥

üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {results.get('precision_score', 0)}%
"""
    return summary

# === –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê ===
TEXTS = {
    'ru': {
        'welcome': "üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitAdventure v4.0!**\n\n–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.\n\nüöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –∫ —Ç–µ–ª—É –º–µ—á—Ç—ã?",
        'choose_language': "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:**",
        'language_set': "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π",
        'start_journey': "üéØ **–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ**",
        'help_info': "‚ÑπÔ∏è **–ü–æ–¥—Ä–æ–±–Ω–µ–µ**",
        'help_button': "‚ùì **–ü–æ–º–æ—â—å**",
        'settings': "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**",
        'stage_titles': {
            'gender': "üë§ **–≠—Ç–∞–ø 1/12:** –í–∞—à –ø–æ–ª?",
            'age': "üéÇ **–≠—Ç–∞–ø 2/12:** –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?",
            'weight': "‚öñÔ∏è **–≠—Ç–∞–ø 3/12:** –í–∞—à –≤–µ—Å (–∫–≥)?",
            'height': "üìè **–≠—Ç–∞–ø 4/12:** –í–∞—à —Ä–æ—Å—Ç (—Å–º)?",
            'fat': "üî• **–≠—Ç–∞–ø 5/12:** –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞?",
            'goal': "üéØ **–≠—Ç–∞–ø 6/12:** –í–∞—à–∞ —Ü–µ–ª—å?",
            'experience': "üí™ **–≠—Ç–∞–ø 7/12:** –û–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
            'activity': "üèÉ **–≠—Ç–∞–ø 8/12:** –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            'intensity': "üî• **–≠—Ç–∞–ø 9/12:** –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
            'recovery': "üò¥ **–≠—Ç–∞–ø 10/12:** –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è?",
            'sleep': "üåô **–≠—Ç–∞–ø 11/12:** –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞?",
            'lifestyle': "üíº **–≠—Ç–∞–ø 12/12:** –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏"
        },
        'buttons': {
            'male': "üë® –ú—É–∂—á–∏–Ω–∞",
            'female': "üë© –ñ–µ–Ω—â–∏–Ω–∞",
            'know_fat': "‚úÖ –î–∞, –∑–Ω–∞—é",
            'dont_know_fat': "‚ùå –ù–µ –∑–Ω–∞—é",
            'goal_loss': "üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ",
            'goal_maintain': "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ",
            'goal_gain': "üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã",
            'exp_beginner': "üå± –ù–æ–≤–∏—á–æ–∫",
            'exp_intermediate': "üî• –°—Ä–µ–¥–Ω–∏–π",
            'exp_advanced': "‚ö° –û–ø—ã—Ç–Ω—ã–π",
            'activity_strength': "üèãÔ∏è –°–∏–ª–æ–≤—ã–µ",
            'activity_cardio': "üèÉ –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
            'activity_crossfit': "‚ö° –ö—Ä–æ—Å—Å—Ñ–∏—Ç",
            'intensity_low': "üü¢ –ù–∏–∑–∫–∞—è",
            'intensity_moderate': "üü° –°—Ä–µ–¥–Ω—è—è",
            'intensity_high': "üî¥ –í—ã—Å–æ–∫–∞—è",
            'intensity_very_high': "‚ö° –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è",
            'recovery_excellent': "‚≠ê –û—Ç–ª–∏—á–Ω–æ",
            'recovery_good': "‚úÖ –•–æ—Ä–æ—à–æ",
            'recovery_average': "üî∂ –°—Ä–µ–¥–Ω–µ",
            'recovery_poor': "‚ùå –ü–ª–æ—Ö–æ",
            'sleep_excellent': "üò¥ –û—Ç–ª–∏—á–Ω–æ (8+ —á)",
            'sleep_good': "üòä –•–æ—Ä–æ—à–æ (7-8 —á)",
            'sleep_average': "üòê –°—Ä–µ–¥–Ω–µ (6-7 —á)",
            'sleep_poor': "üòû –ü–ª–æ—Ö–æ (<6 —á)",
            'stress_low': "üòå –ù–∏–∑–∫–∏–π",
            'stress_medium': "üòê –°—Ä–µ–¥–Ω–∏–π",
            'stress_high': "üò∞ –í—ã—Å–æ–∫–∏–π",
            'occupation_office': "üíª –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            'occupation_active': "üèÉ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            'occupation_physical': "üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥"
        },
        'result_title': "üéâ **–í–∞—à —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!**",
        'calculating': "üß† –í—ã–ø–æ–ª–Ω—è—é —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤...",
        'precision_info': "üéØ **–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞:** {precision}%",
        'error_invalid': "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
        'canceled': "‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        'help_text': "üìö **–°–ø—Ä–∞–≤–∫–∞ FitAdventure v4.0**\n\nüéØ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n\nüìä –ú—ã —É—á–∏—Ç—ã–≤–∞–µ–º:\n‚Ä¢ –í–∞—à–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n‚Ä¢ –¶–µ–ª–∏ –∏ –æ–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ\n‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞\n‚Ä¢ –¢–∏–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n‚ú® –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 95-99%!"
    },
    'en': {
        'welcome': "üéØ **Welcome to FitAdventure v4.0!**\n\nI'll help create a personalized nutrition plan to achieve your goals.\n\nüöÄ Ready to start your journey to your dream body?",
        'choose_language': "üåç **Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:**",
        'language_set': "‚úÖ Language set: English",
        'start_journey': "üéØ **Start Journey**",
        'help_info': "‚ÑπÔ∏è **More Info**",
        'help_button': "‚ùì **Help**",
        'settings': "‚öôÔ∏è **Settings**",
        'stage_titles': {
            'gender': "üë§ **Step 1/12:** Your gender?",
            'age': "üéÇ **Step 2/12:** Your age?",
            'weight': "‚öñÔ∏è **Step 3/12:** Your weight (kg)?",
            'height': "üìè **Step 4/12:** Your height (cm)?",
            'fat': "üî• **Step 5/12:** Do you know your body fat %?",
            'goal': "üéØ **Step 6/12:** Your goal?",
            'experience': "üí™ **Step 7/12:** Training experience?",
            'activity': "üèÉ **Step 8/12:** Activity details",
            'intensity': "üî• **Step 9/12:** Training intensity?",
            'recovery': "üò¥ **Step 10/12:** Recovery quality?",
            'sleep': "üåô **Step 11/12:** Sleep quality?",
            'lifestyle': "üíº **Step 12/12:** Lifestyle"
        },
        'buttons': {
            'male': "üë® Male",
            'female': "üë© Female",
            'know_fat': "‚úÖ Yes, I know",
            'dont_know_fat': "‚ùå Don't know",
            'goal_loss': "üìâ Weight Loss",
            'goal_maintain': "‚öñÔ∏è Maintenance",
            'goal_gain': "üìà Muscle Gain",
            'exp_beginner': "üå± Beginner",
            'exp_intermediate': "üî• Intermediate",
            'exp_advanced': "‚ö° Advanced",
            'activity_strength': "üèãÔ∏è Strength",
            'activity_cardio': "üèÉ Cardio",
            'activity_crossfit': "‚ö° CrossFit",
            'intensity_low': "üü¢ Low",
            'intensity_moderate': "üü° Moderate",
            'intensity_high': "üî¥ High",
            'intensity_very_high': "‚ö° Very High",
            'recovery_excellent': "‚≠ê Excellent",
            'recovery_good': "‚úÖ Good",
            'recovery_average': "üî∂ Average",
            'recovery_poor': "‚ùå Poor",
            'sleep_excellent': "üò¥ Excellent (8+ h)",
            'sleep_good': "üòä Good (7-8 h)",
            'sleep_average': "üòê Average (6-7 h)",
            'sleep_poor': "üòû Poor (<6 h)",
            'stress_low': "üòå Low",
            'stress_medium': "üòê Medium",
            'stress_high': "üò∞ High",
            'occupation_office': "üíª Office work",
            'occupation_active': "üèÉ Active work",
            'occupation_physical': "üí™ Physical work"
        },
        'result_title': "üéâ **Your ultra-precise nutrition plan is ready!**",
        'calculating': "üß† Performing ultra-precise calculations with all factors...",
        'precision_info': "üéØ **Calculation Accuracy:** {precision}%",
        'error_invalid': "‚ùå Please enter a valid value",
        'canceled': "‚ùå Analysis canceled",
        'help_text': "üìö **FitAdventure v4.0 Help**\n\nüéØ This bot helps calculate personalized nutrition plans\n\nüìä We consider:\n‚Ä¢ Your physical parameters\n‚Ä¢ Goals and training experience\n‚Ä¢ Activity level\n‚Ä¢ Body fat percentage\n‚Ä¢ Sleep and recovery quality\n‚Ä¢ Stress levels\n‚Ä¢ Professional activity type\n\n‚ú® Get precise recommendations with 95-99% accuracy!"
    }
}

def get_text(user_id: int, key: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_lang = user_data_storage.get(user_id, {}).get('language', 'ru')
    return TEXTS[user_lang].get(key, TEXTS['ru'].get(key, ""))

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞"""
    chat_id = update.message.chat_id
    user_data_storage[chat_id] = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    new_achievements = check_achievements(chat_id, "start_survey")
    achievement_text = format_achievement_notification(new_achievements)
    
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("üá∫üá∏ English", callback_data='lang_en')]
    ]
    
    await update.message.reply_text(
        "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:**" + achievement_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return LANGUAGE_CHOICE

async def language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    if query.data == 'lang_ru':
        user_data_storage[chat_id]['language'] = 'ru'
        lang_text = "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π"
    else:
        user_data_storage[chat_id]['language'] = 'en'
        lang_text = "‚úÖ Language set: English"
    
    welcome_text = get_text(chat_id, 'welcome')
    progress = create_clean_progress(0, 12)
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'start_journey'), callback_data='start_analysis')],
        [InlineKeyboardButton(get_text(chat_id, 'settings'), callback_data='show_settings'),
         InlineKeyboardButton(get_text(chat_id, 'help_info'), callback_data='help_info')]
    ]
    
    await query.edit_message_text(
        f"{lang_text}\n\n{welcome_text}\n\n{progress}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return LANGUAGE_CHOICE

async def start_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    save_user_progress(chat_id, 1)
    progress = create_clean_progress(1, 12)
    stage_text = get_text(chat_id, 'stage_titles')['gender']
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['male'], callback_data='–º—É–∂—á–∏–Ω–∞')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['female'], callback_data='–∂–µ–Ω—â–∏–Ω–∞')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return GENDER

async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['gender'] = query.data
    save_user_progress(chat_id, 2)
    
    progress = create_clean_progress(2, 12)
    stage_text = get_text(chat_id, 'stage_titles')['age']
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        parse_mode=ParseMode.MARKDOWN
    )
    return AGE

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age_value = int(update.message.text)
        if not (10 <= age_value <= 100):
            raise ValueError
    except ValueError:
        await update.message.reply_text(get_text(update.message.chat_id, 'error_invalid'))
        return AGE
    
    chat_id = update.message.chat_id
    user_data_storage[chat_id]['age'] = age_value
    save_user_progress(chat_id, 3)
    
    # –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
    if age_value < 20:
        reaction = "üå± –ú–æ–ª–æ–¥–æ—Å—Ç—å - –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏!"
    elif age_value > 50:
        reaction = "üëë –û–ø—ã—Ç - –≤–∞—à–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π!"
    else:
        reaction = "üí™ –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π!"
    
    progress = create_clean_progress(3, 12)
    stage_text = get_text(chat_id, 'stage_titles')['weight']
    
    await update.message.reply_text(
        f"{reaction}\n\n{progress}\n\n{stage_text}",
        parse_mode=ParseMode.MARKDOWN
    )
    return WEIGHT

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    try:
        weight_value = float(update.message.text)
        if not (30 <= weight_value <= 300):
            raise ValueError
    except ValueError:
        await update.message.reply_text(get_text(update.message.chat_id, 'error_invalid'))
        return WEIGHT
    
    chat_id = update.message.chat_id
    user_data_storage[chat_id]['weight'] = weight_value
    save_user_progress(chat_id, 4)
    
    progress = create_clean_progress(4, 12)
    stage_text = get_text(chat_id, 'stage_titles')['height']
    
    await update.message.reply_text(
        f"{progress}\n\n{stage_text}",
        parse_mode=ParseMode.MARKDOWN
    )
    return HEIGHT

async def height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    try:
        height_value = float(update.message.text)
        if not (100 <= height_value <= 250):
            raise ValueError
    except ValueError:
        await update.message.reply_text(get_text(update.message.chat_id, 'error_invalid'))
        return HEIGHT
    
    chat_id = update.message.chat_id
    user_data_storage[chat_id]['height'] = height_value
    save_user_progress(chat_id, 5)
    
    progress = create_clean_progress(5, 12)
    stage_text = get_text(chat_id, 'stage_titles')['fat']
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['know_fat'], callback_data='know_fat')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['dont_know_fat'], callback_data='dont_know_fat')]
    ]
    
    await update.message.reply_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return FAT_PERCENTAGE

async def fat_percentage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    
    if query.data == 'know_fat':
        await query.edit_message_text("üî• –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (5-50%):")
        return FAT_PERCENTAGE_INPUT
    else:
        user_data_storage[chat_id]['fat_percent'] = None
        return await show_goal_selection(query, chat_id)

async def fat_percentage_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
    try:
        fat_value = float(update.message.text)
        if not (5 <= fat_value <= 50):
            raise ValueError
    except ValueError:
        await update.message.reply_text(get_text(update.message.chat_id, 'error_invalid'))
        return FAT_PERCENTAGE_INPUT
    
    chat_id = update.message.chat_id
    user_data_storage[chat_id]['fat_percent'] = fat_value
    
    return await show_goal_selection_text(update, chat_id)

async def show_goal_selection(query, chat_id) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ü–µ–ª–∏ (callback)"""
    save_user_progress(chat_id, 6)
    progress = create_clean_progress(6, 12)
    stage_text = get_text(chat_id, 'stage_titles')['goal']
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['goal_loss'], callback_data='–ü–æ—Ö—É–¥–µ–Ω–∏–µ')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['goal_maintain'], callback_data='–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['goal_gain'], callback_data='–ù–∞–±–æ—Ä –º–∞—Å—Å—ã')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return GOAL

async def show_goal_selection_text(update, chat_id) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ü–µ–ª–∏ (text)"""
    save_user_progress(chat_id, 6)
    progress = create_clean_progress(6, 12)
    stage_text = get_text(chat_id, 'stage_titles')['goal']
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['goal_loss'], callback_data='–ü–æ—Ö—É–¥–µ–Ω–∏–µ')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['goal_maintain'], callback_data='–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['goal_gain'], callback_data='–ù–∞–±–æ—Ä –º–∞—Å—Å—ã')]
    ]
    
    await update.message.reply_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return GOAL

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['goal'] = query.data
    save_user_progress(chat_id, 7)
    
    progress = create_clean_progress(7, 12)
    stage_text = get_text(chat_id, 'stage_titles')['experience']
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['exp_beginner'], callback_data='–ù–æ–≤–∏—á–æ–∫')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['exp_intermediate'], callback_data='–°—Ä–µ–¥–Ω–∏–π')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['exp_advanced'], callback_data='–û–ø—ã—Ç–Ω—ã–π')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return TRAINING_EXPERIENCE

async def training_experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—ã—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['training_experience'] = query.data
    save_user_progress(chat_id, 8)
    
    progress = create_clean_progress(8, 12)
    
    keyboard = [
        [InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data='1'),
         InlineKeyboardButton("2 –¥–Ω—è", callback_data='2'),
         InlineKeyboardButton("3 –¥–Ω—è", callback_data='3')],
        [InlineKeyboardButton("4 –¥–Ω—è", callback_data='4'),
         InlineKeyboardButton("5 –¥–Ω–µ–π", callback_data='5'),
         InlineKeyboardButton("6 –¥–Ω–µ–π", callback_data='6')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\nüèÉ **–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å?**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return TRAINING_DAYS

async def training_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['training_days'] = int(query.data)
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['activity_strength'], callback_data='–°–∏–ª–æ–≤—ã–µ')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['activity_cardio'], callback_data='–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['activity_crossfit'], callback_data='–ö—Ä–æ—Å—Å—Ñ–∏—Ç')]
    ]
    
    await query.edit_message_text(
        "üí™ **–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return ACTIVITY_TYPE

async def activity_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['activity_type'] = query.data
    
    await query.edit_message_text(
        "‚è±Ô∏è **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–º–∏–Ω—É—Ç—ã)?**",
        parse_mode=ParseMode.MARKDOWN
    )
    return WORKOUT_DURATION

async def workout_duration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        duration = int(update.message.text)
        if not (15 <= duration <= 300):
            raise ValueError
    except ValueError:
        await update.message.reply_text(get_text(update.message.chat_id, 'error_invalid'))
        return WORKOUT_DURATION
    
    chat_id = update.message.chat_id
    user_data_storage[chat_id]['workout_duration'] = duration
    
    await update.message.reply_text(
        "üö∂ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å (–ø—Ä–∏–º–µ—Ä–Ω–æ)?**",
        parse_mode=ParseMode.MARKDOWN
    )
    return STEPS

async def steps(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤"""
    try:
        steps_count = int(update.message.text)
        if not (1000 <= steps_count <= 50000):
            raise ValueError
    except ValueError:
        await update.message.reply_text(get_text(update.message.chat_id, 'error_invalid'))
        return STEPS
    
    chat_id = update.message.chat_id
    user_data_storage[chat_id]['steps'] = steps_count
    save_user_progress(chat_id, 9)
    
    progress = create_clean_progress(9, 12)
    stage_text = get_text(chat_id, 'stage_titles')['intensity']
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['intensity_low'], callback_data='low')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['intensity_moderate'], callback_data='moderate')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['intensity_high'], callback_data='high')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['intensity_very_high'], callback_data='very_high')]
    ]
    
    await update.message.reply_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return INTENSITY

async def intensity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['intensity'] = query.data
    save_user_progress(chat_id, 10)
    
    progress = create_clean_progress(10, 12)
    stage_text = get_text(chat_id, 'stage_titles')['recovery']
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['recovery_excellent'], callback_data='excellent')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['recovery_good'], callback_data='good')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['recovery_average'], callback_data='average')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['recovery_poor'], callback_data='poor')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return RECOVERY

async def recovery(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['recovery'] = query.data
    save_user_progress(chat_id, 11)
    
    progress = create_clean_progress(11, 12)
    stage_text = get_text(chat_id, 'stage_titles')['sleep']
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['sleep_excellent'], callback_data='excellent')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['sleep_good'], callback_data='good')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['sleep_average'], callback_data='average')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['sleep_poor'], callback_data='poor')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return SLEEP_QUALITY

async def sleep_quality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['sleep_quality'] = query.data
    save_user_progress(chat_id, 12)
    
    progress = create_clean_progress(12, 12)
    stage_text = get_text(chat_id, 'stage_titles')['lifestyle']
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['stress_low'], callback_data='2')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['stress_medium'], callback_data='5')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['stress_high'], callback_data='8')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\nüíÜ **–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –≤ –∂–∏–∑–Ω–∏?**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return STRESS_LEVEL

async def stress_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–µ—Å—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['stress_level'] = int(query.data)
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['occupation_office'], callback_data='office')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['occupation_active'], callback_data='healthcare')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['occupation_physical'], callback_data='construction')]
    ]
    
    await query.edit_message_text(
        "üíº **–¢–∏–ø —Ä–∞–±–æ—Ç—ã?**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return OCCUPATION

async def occupation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–∞—Å—á–µ—Ç"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['occupation'] = query.data
    user_data_storage[chat_id]['user_id'] = str(chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    new_achievements = check_achievements(chat_id, "complete_survey")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞
    calculating_msg = await query.edit_message_text(
        get_text(chat_id, 'calculating'),
        parse_mode=ParseMode.MARKDOWN
    )
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = generate_maximum_precision_recommendations(user_data_storage[chat_id])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        precision_achievements = check_achievements(chat_id, "high_precision", results['precision_score'])
        all_achievements = new_achievements + precision_achievements
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        celebration = generate_personalized_celebration(user_data_storage[chat_id])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        smart_tips = generate_smart_tips(user_data_storage[chat_id])
        tips_text = format_smart_tips(smart_tips)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievement_text = format_achievement_notification(all_achievements)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        summary = create_result_summary(user_data_storage[chat_id], results)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_title = get_text(chat_id, 'result_title')
        precision_info = get_text(chat_id, 'precision_info').format(precision=results['precision_score'])
        
        final_message = f"""{result_title}

{celebration}

{precision_info}

üî• **–¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏:** {results['target_calories']} –∫–∫–∞–ª
ü•© **–ë–µ–ª–∫–∏:** {results['protein_min']}-{results['protein_max']} –≥
ü•ë **–ñ–∏—Ä—ã:** {results['fats']} –≥  
üçû **–£–≥–ª–µ–≤–æ–¥—ã:** {results['carbs']} –≥
üåæ **–ö–ª–µ—Ç—á–∞—Ç–∫–∞:** {results['fiber']} –≥

üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞:**
‚Ä¢ TDEE: {results['tdee']} –∫–∫–∞–ª
‚Ä¢ BMR: {results['bmr']} –∫–∫–∞–ª  
‚Ä¢ NEAT: {results['neat']} –∫–∫–∞–ª
‚Ä¢ EAT: {results['eat']} –∫–∫–∞–ª
‚Ä¢ TEF: {results['tef']} –∫–∫–∞–ª
‚Ä¢ LBM: {results['lbm']} –∫–≥

{tips_text}{achievement_text}

‚ú® –†–∞—Å—á–µ—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –í–°–ï –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏!"""
        
        await calculating_msg.edit_text(final_message, parse_mode=ParseMode.MARKDOWN)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await calculating_msg.reply_text(
            f"üìã **–≠–ö–°–ü–û–†–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:**\n```\n{summary}\n```",
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        await calculating_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")
        logger.error(f"Calculation error: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if chat_id in user_data_storage:
        del user_data_storage[chat_id]
    
    return ConversationHandler.END

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer("üîÆ –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
    
    chat_id = query.message.chat_id
    current_theme = get_user_theme(chat_id)
    
    keyboard = [
        [InlineKeyboardButton("üé® –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", callback_data='theme_default')],
        [InlineKeyboardButton("üåü –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π", callback_data='theme_gradient')],
        [InlineKeyboardButton("üî• –û–≥–Ω–µ–Ω–Ω—ã–π", callback_data='theme_fire')],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    
    settings_text = f"""
‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò FITADVENTURE v4.0**

üé® **–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞:** {current_theme}
üìä **–°—Ç–∏–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤**
üéØ **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞**

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:
"""
    
    await query.edit_message_text(
        settings_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return USER_SETTINGS

async def change_theme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–º–µ–Ω–∞ —Ç–µ–º—ã"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    theme = query.data.replace('theme_', '')
    set_user_theme(chat_id, theme)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
    demo_progress = create_clean_progress(8, 12)
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data='back_to_start')],
        [InlineKeyboardButton("üé® –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data='show_settings')]
    ]
    
    theme_names = {
        'default': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
        'gradient': '–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π', 
        'fire': '–û–≥–Ω–µ–Ω–Ω—ã–π'
    }
    
    await query.edit_message_text(
        f"üé® **–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:** {theme_names.get(theme, theme)}\n\n**–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è:**\n{demo_progress}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return USER_SETTINGS

async def help_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    help_text = get_text(chat_id, 'help_text')
    
    keyboard = [
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    
    await query.edit_message_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return LANGUAGE_CHOICE

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    welcome_text = get_text(chat_id, 'welcome')
    progress = create_clean_progress(0, 12)
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'start_journey'), callback_data='start_analysis')],
        [InlineKeyboardButton(get_text(chat_id, 'settings'), callback_data='show_settings'),
         InlineKeyboardButton(get_text(chat_id, 'help_info'), callback_data='help_info')]
    ]
    
    await query.edit_message_text(
        f"{welcome_text}\n\n{progress}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return LANGUAGE_CHOICE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    chat_id = update.message.chat_id
    await update.message.reply_text(
        get_text(chat_id, 'canceled'),
        reply_markup=ReplyKeyboardRemove()
    )
    if chat_id in user_data_storage:
        del user_data_storage[chat_id]
    return ConversationHandler.END

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ FitAdventure Bot v4.0 Clean...")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞
    try:
        TOKEN = setup_bot_token()
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except KeyboardInterrupt:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return
        
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    try:
        application = Application.builder().token(TOKEN).build()
        print("‚úÖ Telegram Application —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANGUAGE_CHOICE: [
                CallbackQueryHandler(language_choice, pattern='^lang_'),
                CallbackQueryHandler(start_analysis, pattern='^start_analysis$'),
                CallbackQueryHandler(show_settings, pattern='^show_settings$'),
                CallbackQueryHandler(help_info, pattern='^help_info$'),
                CallbackQueryHandler(back_to_start, pattern='^back_to_start$')
            ],
            GENDER: [CallbackQueryHandler(gender)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height)],
            FAT_PERCENTAGE: [CallbackQueryHandler(fat_percentage)],
            FAT_PERCENTAGE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, fat_percentage_input)],
            GOAL: [CallbackQueryHandler(goal)],
            TRAINING_EXPERIENCE: [CallbackQueryHandler(training_experience)],
            TRAINING_DAYS: [CallbackQueryHandler(training_days)],
            ACTIVITY_TYPE: [CallbackQueryHandler(activity_type)],
            WORKOUT_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, workout_duration)],
            STEPS: [MessageHandler(filters.TEXT & ~filters.COMMAND, steps)],
            INTENSITY: [CallbackQueryHandler(intensity)],
            RECOVERY: [CallbackQueryHandler(recovery)],
            SLEEP_QUALITY: [CallbackQueryHandler(sleep_quality)],
            STRESS_LEVEL: [CallbackQueryHandler(stress_level)],
            OCCUPATION: [CallbackQueryHandler(occupation)],
            USER_SETTINGS: [
                CallbackQueryHandler(change_theme, pattern='^theme_'),
                CallbackQueryHandler(show_settings, pattern='^show_settings$'),
                CallbackQueryHandler(back_to_start, pattern='^back_to_start$')
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True,
    )

    application.add_handler(conv_handler)
    
    logger.info("üéØ FitAdventure Bot v4.0 Clean –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üßπ –í–µ—Ä—Å–∏—è –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
    print("\nüéØ FitAdventure Bot v4.0 Clean –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞")
    print("‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        application.run_polling()
    except KeyboardInterrupt:
        print("\n‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main() 