#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ API
"""

import requests
import json
import os
import subprocess

def create_github_repo():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    repo_name = "fitadventure-products"
    description = "Telegram Web App –¥–ª—è –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ FitAdventure Bot"
    
    # GitHub API URL
    api_url = f"https://api.github.com/user/repos"
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    repo_data = {
        "name": repo_name,
        "description": description,
        "private": False,
        "auto_init": True,
        "gitignore_template": None,
        "license_template": "mit"
    }
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {repo_name}")
    print(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
    
    # –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüîë –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω—É–∂–µ–Ω GitHub Personal Access Token")
    print("üìã –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ https://github.com/settings/tokens")
    print("   - –í—ã–±–µ—Ä–∏—Ç–µ 'repo' –ø—Ä–∞–≤–∞")
    print("   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω")
    
    token = input("\nüîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à GitHub —Ç–æ–∫–µ–Ω: ").strip()
    
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –≤–≤–µ–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return False
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        response = requests.post(api_url, headers=headers, json=repo_data)
        
        if response.status_code == 201:
            repo_info = response.json()
            repo_url = repo_info["html_url"]
            clone_url = repo_info["clone_url"]
            
            print(f"\n‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üåê URL: {repo_url}")
            print(f"üìÅ Clone URL: {clone_url}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º remote –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
            print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º remote
            subprocess.run(["git", "remote", "add", "origin", clone_url], check=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
            subprocess.run(["git", "push", "-u", "origin", "main"], check=True)
            
            print("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")
            print(f"\nüåê Web App –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:")
            print(f"   https://darksaiders.github.io/{repo_name}/")
            
            return True
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ git: {e}")
        return False

if __name__ == "__main__":
    create_github_repo() 