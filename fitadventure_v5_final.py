#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FitAdventure Bot - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
–£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–∏—Ç–∞–Ω–∏—è —Å Reply Keyboard
–í–µ—Ä—Å–∏—è: 5.0 Final
–î–∞—Ç–∞: 23 –∏—é–ª—è 2025
"""

import os
import sys
import logging
import asyncio
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from telegram.ext import filters as tg_filters

# === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –¢–û–ö–ï–ù–ê ===
def setup_bot_token():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    env_file = Path('.env')
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
    if env_file.exists():
        load_dotenv()
        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if token:
            print("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return token
    
    print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞")
    print("üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram")
    print("2. –ù–∞–π–¥–∏—Ç–µ @BotFather")
    print("3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot")
    print("4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω")
    print()
    
    while True:
        token = input("üîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: ").strip()
        
        if not token:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            continue
            
        if not token.startswith(('1', '2', '5', '6')) or ':' not in token:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞! –ü—Ä–∏–º–µ—Ä: 1234567890:ABCdefGHIjklMNOpqrSTUvwxyz")
            continue
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª
        try:
            with open('.env', 'w', encoding='utf-8') as f:
                f.write(f"TELEGRAM_BOT_TOKEN={token}\n")
            
            print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª .env")
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return token
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            continue

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot_debug.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
GENDER, AGE, WEIGHT, HEIGHT, FAT_PERCENTAGE, FAT_PERCENTAGE_INPUT, GOAL, EXPERIENCE_CHOICE, TRAINING_EXPERIENCE, TRAINING_DAYS, ACTIVITY_TYPE, WORKOUT_DURATION, STEPS, INTENSITY, RECOVERY, SLEEP_QUALITY, STRESS_LEVEL, OCCUPATION = range(18)

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ ---
START_BUTTONS = ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å', 'üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ', 'üí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞', '‚ùì –Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è', 'üòï –ù–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏', 'üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'üì¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π']
START_BUTTONS_REGEX = f"^({'|'.join([b.replace(' ', '\\s') for b in START_BUTTONS])})$"

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
user_data_storage = {}
subscribers = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

# === –£–õ–¨–¢–†–ê-–¢–û–ß–ù–´–ï –†–ê–°–ß–ï–¢–´ ===
def generate_ultra_precise_recommendations(user_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –¥–Ω—è–º"""
    logger.info(f"Starting ultra-precise calculations with data: {user_data}")
    # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = [
        'weight', 'height', 'age', 'gender', 'training_days', 'steps', 'occupation',
        'activity_type', 'intensity', 'workout_duration', 'recovery', 'sleep_quality',
        'stress_level', 'goal'
    ]
    for field in required_fields:
        if field not in user_data:
            logger.error(f"Missing required field: {field}")
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    weight = user_data['weight']
    height = user_data['height'] 
    age = user_data['age']
    gender = user_data['gender']
    
    logger.info(f"Basic parameters - Weight: {weight}, Height: {height}, Age: {age}, Gender: {gender}")
    
    # BMR –ø–æ —Ñ–æ—Ä–º—É–ª–µ Mifflin-St Jeor
    if gender == '–º—É–∂—á–∏–Ω–∞':
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    
    logger.info(f"Base BMR calculated: {bmr}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    training_days = user_data['training_days']
    steps = user_data['steps']
    
    # –†–∞–±–æ—á–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    occupation_factors = {
        'office': 0.15,      # –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        'healthcare': 0.25,  # –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞  
        'construction': 0.35 # –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥
    }
    work_factor = occupation_factors.get(user_data['occupation'], 0.2)
    
    # –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    activity_multipliers = {
        '–°–∏–ª–æ–≤—ã–µ': 0.08,
        '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å': 0.06,
        '–ö—Ä–æ—Å—Å—Ñ–∏—Ç': 0.1
    }
    training_base = activity_multipliers.get(user_data['activity_type'], 0.08)
    
    # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    intensity_multipliers = {
        'low': 0.8,
        'moderate': 1.0,
        'high': 1.2,
        'very_high': 1.4
    }
    intensity_factor = intensity_multipliers.get(user_data['intensity'], 1.0)
    
    # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    duration_factor = min(user_data['workout_duration'] / 60, 2.0)  # –ú–∞–∫—Å–∏–º—É–º 2x
    
    training_factor = training_base * intensity_factor * duration_factor * (training_days / 7)
    
    # –®–∞–≥–∏
    steps_factor = min(steps / 10000 * 0.05, 0.15)  # –ú–∞–∫—Å–∏–º—É–º 0.15
    
    logger.info(f"Activity breakdown - Work: {work_factor}, Training: {training_factor}, Steps: {steps_factor}")
    
    # –§–∞–∫—Ç–æ—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    recovery_factors = {
        'excellent': 1.05,
        'good': 1.0,
        'average': 0.95,
        'poor': 0.9
    }
    recovery_multiplier = recovery_factors.get(user_data['recovery'], 1.0)
    
    sleep_factors = {
        'excellent': 1.05,
        'good': 1.0,
        'average': 0.95,
        'poor': 0.9
    }
    sleep_multiplier = sleep_factors.get(user_data['sleep_quality'], 1.0)
    
    # –°—Ç—Ä–µ—Å—Å (–æ–±—Ä–∞—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å)
    stress_level = user_data['stress_level']
    stress_multiplier = max(0.85, 1.1 - (stress_level / 10) * 0.25)
    
    logger.info(f"Recovery factors - Recovery: {recovery_multiplier}, Sleep: {sleep_multiplier}, Stress: {stress_multiplier}")
    
    # –†–∞–∑–¥–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –¥–Ω–µ–π –æ—Ç–¥—ã—Ö–∞ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    rest_day_factor = 1 + work_factor + steps_factor
    training_day_factor = rest_day_factor + training_factor
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    rest_day_factor *= recovery_multiplier * sleep_multiplier * stress_multiplier
    training_day_factor *= recovery_multiplier * sleep_multiplier * stress_multiplier
    
    logger.info(f"Rest day factor: {rest_day_factor}, Training day factor: {training_day_factor}")
    
    # TDEE –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–Ω—è
    tdee_rest = int(bmr * rest_day_factor)
    tdee_training = int(bmr * training_day_factor)
    
    # –°—Ä–µ–¥–Ω–∏–π TDEE
    rest_days = 7 - training_days
    tdee_average = int((tdee_rest * rest_days + tdee_training * training_days) / 7)
    
    logger.info(f"TDEE Rest Day: {tdee_rest}, TDEE Training Day: {tdee_training}, Average: {tdee_average}")
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ —Ü–µ–ª—å
    goal_adjustments = {
        '–ü–æ—Ö—É–¥–µ–Ω–∏–µ': -0.15,      # –î–µ—Ñ–∏—Ü–∏—Ç 15%
        '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ': 0,        # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã': 0.1       # –ü—Ä–æ—Ñ–∏—Ü–∏—Ç 10%
    }
    
    goal = user_data['goal']
    adjustment = goal_adjustments.get(goal, 0)
    
    logger.info(f"Goal: {goal}")
    
    # –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–Ω—è
    target_calories_rest = int(tdee_rest * (1 + adjustment))
    target_calories_training = int(tdee_training * (1 + adjustment))
    target_calories_average = int(tdee_average * (1 + adjustment))
    
    logger.info(f"Target calories - Rest day: {target_calories_rest}, Training day: {target_calories_training}, Average: {target_calories_average}")
    
    # –†–∞—Å—á–µ—Ç –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    # –ë–µ–ª–∫–∏: 2.0-2.2 –≥/–∫–≥ –≤–µ—Å–∞
    protein_grams = int(weight * 2.1)
    protein_min = int(weight * 1.9)
    protein_max = int(weight * 2.3)
    
    # –ñ–∏—Ä—ã: 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π (–æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π)
    fats_rest = int(target_calories_rest * 0.25 / 9)
    fats_training = int(target_calories_training * 0.25 / 9)
    
    # –£–≥–ª–µ–≤–æ–¥—ã: –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞–ª–æ—Ä–∏–∏
    protein_calories = protein_grams * 4
    fat_calories_rest = fats_rest * 9
    fat_calories_training = fats_training * 9
    
    carbs_rest = int((target_calories_rest - protein_calories - fat_calories_rest) / 4)
    carbs_training = int((target_calories_training - protein_calories - fat_calories_training) / 4)
    
    logger.info(f"Rest day macros - Protein: {protein_grams}–≥, Fats: {fats_rest}–≥, Carbs: {carbs_rest}–≥")
    logger.info(f"Training day macros - Protein: {protein_grams}–≥, Fats: {fats_training}–≥, Carbs: {carbs_training}–≥")
    
    # –ö–ª–µ—Ç—á–∞—Ç–∫–∞ –∏ –≤–æ–¥–∞
    fiber_rest = max(16, int(carbs_rest * 0.1))
    fiber_training = max(19, int(carbs_training * 0.1)) 
    water = int(weight * 35)  # 35 –º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞
    
    result = {
        'bmr': int(bmr),
        'tdee_rest': tdee_rest,
        'tdee_training': tdee_training,
        'tdee_average': tdee_average,
        'target_calories_rest': target_calories_rest,
        'target_calories_training': target_calories_training,
        'target_calories_average': target_calories_average,
        'protein_grams': protein_grams,
        'protein_min': protein_min,
        'protein_max': protein_max,
        'fats_rest': fats_rest,
        'fats_training': fats_training,
        'carbs_rest': carbs_rest,
        'carbs_training': carbs_training,
        'fiber_rest': fiber_rest,
        'fiber_training': fiber_training,
        'water': water,
        'rest_day_factor': round(rest_day_factor, 2),
        'training_day_factor': round(training_day_factor, 2),
        'training_days': training_days,
        'rest_days': rest_days,
        'precision_score': 98  # –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    }
    
    logger.info(f"Ultra-precise result: {result}")
    return result

# --- –î–û–ë–ê–í–õ–Ø–ï–ú –ú–û–¢–ò–í–ê–¶–ò–Æ –ò FAQ ---
MOTIVATION_TEXT = (
    "üí° **–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞**\n\n"
    "‚Ä¢ –î–∞–∂–µ 10 –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å ‚Äî —É–∂–µ –≤–∫–ª–∞–¥ –≤ –∑–¥–æ—Ä–æ–≤—å–µ!\n"
    "‚Ä¢ –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–¥—Ç–∏ –≤ –∑–∞–ª: –ø—Ä–æ–≥—É–ª–∫–∏, –∑–∞—Ä—è–¥–∫–∞, –ø–ª–∞–≤–∞–Ω–∏–µ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç.\n"
    "‚Ä¢ –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å, –∞ –Ω–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å.\n"
    "‚Ä¢ –ö–∞–∂–¥—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ —à–∞–≥ –∫ –ª—É—á—à–µ–º—É —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é!\n"
    "‚Ä¢ –ù–∞—á–∞—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –∏ —Å –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è.\n"
    "\n‚ú® *–¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å!*"
)
FAQ_TEXT = (
    "‚ùì **–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è ‚Äî —á—Ç–æ –¥–µ–ª–∞—Ç—å?**\n\n"
    "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ: –ø—Ä–æ–≥—É–ª–∫–∏, –ª–µ–≥–∫–∞—è –∑–∞—Ä—è–¥–∫–∞, —Ä–∞—Å—Ç—è–∂–∫–∞.\n"
    "‚Ä¢ –ù–µ —Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ —Å—Ä–∞–∑—É –±–æ–ª—å—à–∏–µ —Ü–µ–ª–∏ ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –¥–≤–∏–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –ø—Ä–∏–≤—ã—á–∫–æ–π.\n"
    "‚Ä¢ –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –¥–æ–º–∞ –∏–ª–∏ –Ω–∞ —É–ª–∏—Ü–µ.\n"
    "‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è ‚Äî –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.\n"
    "‚Ä¢ –ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏ ‚Äî –≤–∞—à –ø—É—Ç—å —É–Ω–∏–∫–∞–ª–µ–Ω!\n"
    "\nüí¨ –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ /help."
)
NOMOTIVATION_TEXT = (
    "üòï **–ù–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏?**\n\n"
    "‚Ä¢ –ù–µ –∂–¥–∏—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è ‚Äî –Ω–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ, –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏–¥—ë—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!\n"
    "‚Ä¢ –î—É–º–∞–π—Ç–µ –Ω–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –∞ –æ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ: –ø—Ä–æ—Å—Ç–æ –≤—ã–π–¥–∏—Ç–µ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ 5 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π.\n"
    "‚Ä¢ –ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏ ‚Äî –≤–∞—à –ø—É—Ç—å —É–Ω–∏–∫–∞–ª–µ–Ω.\n"
    "‚Ä¢ –ó–∞–ø–∏—à–∏—Ç–µ, –∑–∞—á–µ–º –≤–∞–º —ç—Ç–æ –Ω—É–∂–Ω–æ: –∑–¥–æ—Ä–æ–≤—å–µ, —ç–Ω–µ—Ä–≥–∏—è, –ø—Ä–∏–º–µ—Ä –¥–ª—è –±–ª–∏–∑–∫–∏—Ö.\n"
    "‚Ä¢ –ü–æ–º–Ω–∏—Ç–µ: –¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ, –∞ –Ω–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ!\n"
    "\nüí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /help."
)

# --- –î–û–ë–ê–í–õ–Ø–Æ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–õ–Ø –í–û–ü–†–û–°–ê –ü–†–û –û–ü–´–¢ ---
EXPERIENCE_QUESTION = '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏–ª–∏ —Å–ø–æ—Ä—Ç–µ?'
EXPERIENCE_BUTTONS = [['‚úÖ –ï—Å—Ç—å –æ–ø—ã—Ç', '‚ùå –ù–µ—Ç –æ–ø—ã—Ç–∞']]

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    chat_id = update.message.chat_id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
    if chat_id not in user_data_storage:
        user_data_storage[chat_id] = {}
    
    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
    keyboard = [
        ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'],
        ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ'],
        ['üí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞', '‚ùì –Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è'],
        ['üòï –ù–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏'],
        ['üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'üì¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π']
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    welcome_text = """üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitAdventure!**

–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º:
‚Ä¢ –í–∞—à–∏—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ –¶–µ–ª–µ–π –∏ –æ–ø—ã—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –£—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

üéÆ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞**
üìä **–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤: 98%**

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –∫ —Ç–µ–ª—É –º–µ—á—Ç—ã?"""

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    logger.info(f"User {chat_id} started the bot")
    return GENDER

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    text = update.message.text
    chat_id = update.message.chat_id
    
    if text == 'üöÄ –ù–∞—á–∞—Ç—å':
        return await start_survey(update, context)
    elif text == '‚ùì –ü–æ–º–æ—â—å':
        return await help_command(update, context)
    elif text == 'üåç –Ø–∑—ã–∫':
        await update.message.reply_text("üá∑üá∫ –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π\nüîÑ –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
        return GENDER
    elif text == 'üìä –û –±–æ—Ç–µ':
        about_text = """ü§ñ **FitAdventure Bot v5.0**

‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–∏—Ç–∞–Ω–∏—è (98% —Ç–æ—á–Ω–æ—Å—Ç—å)
‚Ä¢ –£—á–µ—Ç –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç–¥—ã—Ö–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

üî¨ **–ù–∞—É—á–Ω–∞—è –±–∞–∑–∞:**
‚Ä¢ –§–æ—Ä–º—É–ª–∞ Mifflin-St Jeor –¥–ª—è BMR
‚Ä¢ –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ TDEE
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π**"""
        
        await update.message.reply_text(about_text, parse_mode=ParseMode.MARKDOWN)
        return GENDER
    elif text == 'üí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞':
        return await motivation_command(update, context)
    elif text == '‚ùì –Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è':
        return await faq_command(update, context)
    elif text == 'üòï –ù–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏':
        return await nomotivation_command(update, context)
    elif text == 'üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è':
        return await subscribe_command(update, context)
    elif text == 'üì¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π':
        return await unsubscribe_command(update, context)
    elif text == 'üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞':
        return await consultation_command(update, context)
    elif text == '–Ø –≤—Å—ë-—Ç–∞–∫–∏ —Ö–æ—á—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!':
        await update.message.reply_text(
            '–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∞ –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ï—Å—Ç—å –æ–ø—ã—Ç" –≤ –Ω–æ–≤–æ–º –æ–ø—Ä–æ—Å–µ.',
            parse_mode=ParseMode.MARKDOWN
        )
        return GENDER
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return await handle_message(update, context)

async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞"""
    chat_id = update.message.chat_id
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞
    user_data_storage[chat_id] = {}
    
    keyboard = [['üë® –ú—É–∂—á–∏–Ω–∞', 'üë© –ñ–µ–Ω—â–∏–Ω–∞']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üë§ **–≠—Ç–∞–ø 1/12:** –í–∞—à –ø–æ–ª?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    logger.info(f"Starting survey for user {chat_id}")
    return GENDER

async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if chat_id not in user_data_storage:
        user_data_storage[chat_id] = {}
    
    if text in ['üë® –ú—É–∂—á–∏–Ω–∞', '–º—É–∂—á–∏–Ω–∞', '–ú—É–∂—á–∏–Ω–∞']:
        user_data_storage[chat_id]['gender'] = '–º—É–∂—á–∏–Ω–∞'
    elif text in ['üë© –ñ–µ–Ω—â–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞']: 
        user_data_storage[chat_id]['gender'] = '–∂–µ–Ω—â–∏–Ω–∞'
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return GENDER
    
    logger.info(f"User {chat_id} selected gender: {user_data_storage[chat_id]['gender']}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–∑—Ä–∞—Å—Ç—É
    keyboard = [['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üéÇ **–≠—Ç–∞–ø 2/12:** –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 16 –¥–æ 80)",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return AGE

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    chat_id = update.message.chat_id
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if update.message.text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    try:
        age_value = int(update.message.text)
        if not (16 <= age_value <= 80):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 16 –¥–æ 80)")
        return AGE
    
    user_data_storage[chat_id]['age'] = age_value
    logger.info(f"User {chat_id} entered age: {age_value}")
    
    await update.message.reply_text(
        "‚öñÔ∏è **–≠—Ç–∞–ø 3/12:** –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70)",
        parse_mode=ParseMode.MARKDOWN
    )
    return WEIGHT

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    chat_id = update.message.chat_id
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if update.message.text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    try:
        weight_value = float(update.message.text)
        if not (30 <= weight_value <= 300):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ –æ—Ç 30 –¥–æ 300 –∫–≥)")
        return WEIGHT
    
    user_data_storage[chat_id]['weight'] = weight_value
    logger.info(f"User {chat_id} entered weight: {weight_value}")
    
    await update.message.reply_text(
        "üìè **–≠—Ç–∞–ø 4/12:** –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175)",
        parse_mode=ParseMode.MARKDOWN
    )
    return HEIGHT

async def height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    chat_id = update.message.chat_id
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if update.message.text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    try:
        height_value = float(update.message.text)
        if not (100 <= height_value <= 250):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 250 —Å–º)")
        return HEIGHT
    
    user_data_storage[chat_id]['height'] = height_value
    logger.info(f"User {chat_id} entered height: {height_value}")
    
    keyboard = [['‚úÖ –î–∞, –∑–Ω–∞—é', '‚ùå –ù–µ –∑–Ω–∞—é']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üî• **–≠—Ç–∞–ø 5/12:** –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return FAT_PERCENTAGE

async def fat_percentage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    if text == '‚úÖ –î–∞, –∑–Ω–∞—é':
        keyboard = [['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üìä –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (—á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 50, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15)",
            reply_markup=reply_markup
        )
        return FAT_PERCENTAGE_INPUT
    elif text == '‚ùå –ù–µ –∑–Ω–∞—é':
        user_data_storage[chat_id]['fat_percent'] = None
        logger.info(f"User {chat_id} doesn't know fat percentage")
        return await show_goal_selection(update, context)
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return FAT_PERCENTAGE

async def fat_percentage_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
    chat_id = update.message.chat_id
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if update.message.text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    try:
        fat_value = float(update.message.text)
        if not (5 <= fat_value <= 50):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (—á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 50)")
        return FAT_PERCENTAGE_INPUT
    
    user_data_storage[chat_id]['fat_percent'] = fat_value
    logger.info(f"User {chat_id} entered fat percentage: {fat_value}")
    
    await show_goal_selection(update, context)
    return GOAL

async def show_goal_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ü–µ–ª–∏"""
    keyboard = [
        ['üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ'],
        ['‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ'],
        ['üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üéØ **–≠—Ç–∞–ø 6/12:** –í–∞—à–∞ —Ü–µ–ª—å?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return GOAL

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] goal() called. chat_id={chat_id}, text={text}")
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    if text == 'üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ':
        user_data_storage[chat_id]['goal'] = '–ü–æ—Ö—É–¥–µ–Ω–∏–µ'
    elif text == '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ':
        user_data_storage[chat_id]['goal'] = '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ'
    elif text == 'üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã':
        user_data_storage[chat_id]['goal'] = '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã'
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return GOAL
    
    logger.info(f"User {chat_id} selected goal: {user_data_storage[chat_id]['goal']}")
    
    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –æ–ø—ã—Ç
    await experience_block(update, context)
    return EXPERIENCE_CHOICE

async def experience_block(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.message.chat_id
    reply_markup = ReplyKeyboardMarkup(EXPERIENCE_BUTTONS, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        EXPERIENCE_QUESTION,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return EXPERIENCE_CHOICE

async def experience_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] experience_choice() called. chat_id={chat_id}, text={text}")
    if text == '‚úÖ –ï—Å—Ç—å –æ–ø—ã—Ç':
        return await show_training_experience(update, context)
    elif text == '‚ùå –ù–µ—Ç –æ–ø—ã—Ç–∞':
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —à–∞–≥–∏
        user_data_storage[chat_id]['training_experience'] = '–ù–µ—Ç –æ–ø—ã—Ç–∞'
        user_data_storage[chat_id]['training_days'] = 0
        user_data_storage[chat_id]['activity_type'] = '–ù–µ—Ç'
        user_data_storage[chat_id]['workout_duration'] = 0
        user_data_storage[chat_id]['intensity'] = 'low'
        await update.message.reply_text(
            "üö∂ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å?** (–ø—Ä–∏–º–µ—Ä–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 8000)",
            parse_mode=ParseMode.MARKDOWN
        )
        return STEPS
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return EXPERIENCE_CHOICE

async def show_training_experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.message.chat_id
    keyboard = [
        ['üå± –ù–æ–≤–∏—á–æ–∫ (–¥–æ 1 –≥–æ–¥–∞)'],
        ['üî• –°—Ä–µ–¥–Ω–∏–π (1-3 –≥–æ–¥–∞)'],
        ['‚ö° –û–ø—ã—Ç–Ω—ã–π (3+ –≥–æ–¥–∞)']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "üí™ **–≠—Ç–∞–ø 7/12:** –í–∞—à –æ–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return TRAINING_EXPERIENCE

async def training_experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—ã—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] training_experience() called. chat_id={chat_id}, text={text}")
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    if text == '‚ùå –ù–µ—Ç –æ–ø—ã—Ç–∞':
        user_data_storage[chat_id]['training_experience'] = '–ù–µ—Ç –æ–ø—ã—Ç–∞'
        user_data_storage[chat_id]['training_days'] = 0
        user_data_storage[chat_id]['activity_type'] = '–ù–µ—Ç'
        user_data_storage[chat_id]['workout_duration'] = 0
        user_data_storage[chat_id]['intensity'] = 'low'
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —à–∞–≥–∏
        await update.message.reply_text(
            "üö∂ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å?** (–ø—Ä–∏–º–µ—Ä–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 8000)",
            parse_mode=ParseMode.MARKDOWN
        )
        return STEPS
    if text == 'üå± –ù–æ–≤–∏—á–æ–∫ (–¥–æ 1 –≥–æ–¥–∞)':
        user_data_storage[chat_id]['training_experience'] = '–ù–æ–≤–∏—á–æ–∫'
    elif text == 'üî• –°—Ä–µ–¥–Ω–∏–π (1-3 –≥–æ–¥–∞)':
        user_data_storage[chat_id]['training_experience'] = '–°—Ä–µ–¥–Ω–∏–π'
    elif text == '‚ö° –û–ø—ã—Ç–Ω—ã–π (3+ –≥–æ–¥–∞)':
        user_data_storage[chat_id]['training_experience'] = '–û–ø—ã—Ç–Ω—ã–π'
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return TRAINING_EXPERIENCE
    
    logger.info(f"User {chat_id} selected experience: {user_data_storage[chat_id]['training_experience']}")
    
    keyboard = [
        ['1Ô∏è‚É£ –¥–µ–Ω—å', '2Ô∏è‚É£ –¥–Ω—è', '3Ô∏è‚É£ –¥–Ω—è'],
        ['4Ô∏è‚É£ –¥–Ω—è', '5Ô∏è‚É£ –¥–Ω–µ–π', '6Ô∏è‚É£ –¥–Ω–µ–π']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üèÉ **–≠—Ç–∞–ø 8/12:** –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return TRAINING_DAYS

async def training_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] training_days() called. chat_id={chat_id}, text={text}")
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    if user_data_storage[chat_id].get('training_experience') == '–ù–µ—Ç –æ–ø—ã—Ç–∞':
        user_data_storage[chat_id]['training_days'] = 0
        user_data_storage[chat_id]['activity_type'] = '–ù–µ—Ç'
        user_data_storage[chat_id]['workout_duration'] = 0
        user_data_storage[chat_id]['intensity'] = 'low'
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —à–∞–≥–∏
        await update.message.reply_text(
            "üö∂ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å?** (–ø—Ä–∏–º–µ—Ä–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 8000)",
            parse_mode=ParseMode.MARKDOWN
        )
        return STEPS
    
    days_map = {
        '1Ô∏è‚É£ –¥–µ–Ω—å': 1,
        '2Ô∏è‚É£ –¥–Ω—è': 2, 
        '3Ô∏è‚É£ –¥–Ω—è': 3,
        '4Ô∏è‚É£ –¥–Ω—è': 4,
        '5Ô∏è‚É£ –¥–Ω–µ–π': 5,
        '6Ô∏è‚É£ –¥–Ω–µ–π': 6
    }
    
    if text in days_map:
        user_data_storage[chat_id]['training_days'] = days_map[text]
        logger.info(f"User {chat_id} selected training days: {days_map[text]}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return TRAINING_DAYS
    
    keyboard = [
        ['üèãÔ∏è –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
        ['üèÉ –ö–∞—Ä–¥–∏–æ/–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å'],
        ['‚ö° –ö—Ä–æ—Å—Å—Ñ–∏—Ç/—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üí™ **–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?**",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return ACTIVITY_TYPE

async def activity_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] activity_type() called. chat_id={chat_id}, text={text}")
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    if text == 'üèãÔ∏è –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏':
        user_data_storage[chat_id]['activity_type'] = '–°–∏–ª–æ–≤—ã–µ'
    elif text == 'üèÉ –ö–∞—Ä–¥–∏–æ/–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å':
        user_data_storage[chat_id]['activity_type'] = '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å'
    elif text == '‚ö° –ö—Ä–æ—Å—Å—Ñ–∏—Ç/—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ':
        user_data_storage[chat_id]['activity_type'] = '–ö—Ä–æ—Å—Å—Ñ–∏—Ç'
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return ACTIVITY_TYPE
    
    logger.info(f"User {chat_id} selected activity type: {user_data_storage[chat_id]['activity_type']}")
    
    keyboard = [['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "‚è±Ô∏è **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö?** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 60)",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return WORKOUT_DURATION

async def workout_duration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] workout_duration() called. chat_id={chat_id}, text={text}")
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if update.message.text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    try:
        duration = int(update.message.text)
        if not (15 <= duration <= 300):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–æ—Ç 15 –¥–æ 300 –º–∏–Ω—É—Ç)")
        return WORKOUT_DURATION
    
    user_data_storage[chat_id]['workout_duration'] = duration
    logger.info(f"User {chat_id} entered workout duration: {duration}")
    
    await update.message.reply_text(
        "üö∂ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å?** (–ø—Ä–∏–º–µ—Ä–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 8000)",
        parse_mode=ParseMode.MARKDOWN
    )
    return STEPS

async def steps(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] steps() called. chat_id={chat_id}, text={text}")
    if update.message.text in START_BUTTONS:
        return await handle_buttons(update, context)
    try:
        steps_count = int(update.message.text)
        if not (1000 <= steps_count <= 50000):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–æ—Ç 1000 –¥–æ 50000)")
        return STEPS
    user_data_storage[chat_id]['steps'] = steps_count
    logger.info(f"User {chat_id} entered steps: {steps_count}")
    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø—ã—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏ —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    if user_data_storage[chat_id].get('training_experience') == '–ù–µ—Ç –æ–ø—ã—Ç–∞':
        keyboard = [
            ['‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ'],
            ['‚úÖ –•–æ—Ä–æ—à–µ–µ'],
            ['üî∂ –°—Ä–µ–¥–Ω–µ–µ'],
            ['‚ùå –ü–ª–æ—Ö–æ–µ']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "üò¥ **–≠—Ç–∞–ø 10/12:** –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–Ω—è?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return RECOVERY
    # –∏–Ω–∞—á–µ ‚Äî –∫–∞–∫ –±—ã–ª–æ
    keyboard = [
        ['üü¢ –ù–∏–∑–∫–∞—è'],
        ['üü° –°—Ä–µ–¥–Ω—è—è'], 
        ['üî¥ –í—ã—Å–æ–∫–∞—è'],
        ['‚ö° –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "üî• **–≠—Ç–∞–ø 9/12:** –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return INTENSITY

async def intensity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] intensity() called. chat_id={chat_id}, text={text}")
    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø—ã—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    if user_data_storage[chat_id].get('training_experience') == '–ù–µ—Ç –æ–ø—ã—Ç–∞':
        keyboard = [
            ['‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ'],
            ['‚úÖ –•–æ—Ä–æ—à–µ–µ'],
            ['üî∂ –°—Ä–µ–¥–Ω–µ–µ'],
            ['‚ùå –ü–ª–æ—Ö–æ–µ']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "üò¥ **–≠—Ç–∞–ø 10/12:** –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–Ω—è?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return RECOVERY
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    intensity_map = {
        'üü¢ –ù–∏–∑–∫–∞—è': 'low',
        'üü° –°—Ä–µ–¥–Ω—è—è': 'moderate',
        'üî¥ –í—ã—Å–æ–∫–∞—è': 'high',
        '‚ö° –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è': 'very_high'
    }
    
    if text in intensity_map:
        user_data_storage[chat_id]['intensity'] = intensity_map[text]
        logger.info(f"User {chat_id} selected intensity: {intensity_map[text]}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return INTENSITY
    
    keyboard = [
        ['‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ'],
        ['‚úÖ –•–æ—Ä–æ—à–µ–µ'],
        ['üî∂ –°—Ä–µ–¥–Ω–µ–µ'],
        ['‚ùå –ü–ª–æ—Ö–æ–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üò¥ **–≠—Ç–∞–ø 10/12:** –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return RECOVERY

async def recovery(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] recovery() called. chat_id={chat_id}, text={text}")
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    recovery_map = {
        '‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ': 'excellent',
        '‚úÖ –•–æ—Ä–æ—à–µ–µ': 'good', 
        'üî∂ –°—Ä–µ–¥–Ω–µ–µ': 'average',
        '‚ùå –ü–ª–æ—Ö–æ–µ': 'poor'
    }
    
    if text in recovery_map:
        user_data_storage[chat_id]['recovery'] = recovery_map[text]
        logger.info(f"User {chat_id} selected recovery: {recovery_map[text]}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return RECOVERY
    
    keyboard = [
        ['üò¥ –û—Ç–ª–∏—á–Ω—ã–π (8+ —á–∞—Å–æ–≤)'],
        ['üòä –•–æ—Ä–æ—à–∏–π (7-8 —á–∞—Å–æ–≤)'],
        ['üòê –°—Ä–µ–¥–Ω–∏–π (6-7 —á–∞—Å–æ–≤)'],
        ['üòû –ü–ª–æ—Ö–æ–π (<6 —á–∞—Å–æ–≤)']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üåô **–≠—Ç–∞–ø 11/12:** –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return SLEEP_QUALITY

async def sleep_quality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞"""
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] sleep_quality() called. chat_id={chat_id}, text={text}")
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    sleep_map = {
        'üò¥ –û—Ç–ª–∏—á–Ω—ã–π (8+ —á–∞—Å–æ–≤)': 'excellent',
        'üòä –•–æ—Ä–æ—à–∏–π (7-8 —á–∞—Å–æ–≤)': 'good',
        'üòê –°—Ä–µ–¥–Ω–∏–π (6-7 —á–∞—Å–æ–≤)': 'average',
        'üòû –ü–ª–æ—Ö–æ–π (<6 —á–∞—Å–æ–≤)': 'poor'
    }
    
    if text in sleep_map:
        user_data_storage[chat_id]['sleep_quality'] = sleep_map[text]
        logger.info(f"User {chat_id} selected sleep quality: {sleep_map[text]}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return SLEEP_QUALITY
    
    keyboard = [
        ['üòå –ù–∏–∑–∫–∏–π (1-3)'],
        ['üòê –°—Ä–µ–¥–Ω–∏–π (4-6)'], 
        ['üò∞ –í—ã—Å–æ–∫–∏–π (7-10)']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üíÜ **–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –≤ –∂–∏–∑–Ω–∏ –ø–æ —à–∫–∞–ª–µ 1-10?**",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return STRESS_LEVEL

async def stress_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–µ—Å—Å–∞"""
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] stress_level() called. chat_id={chat_id}, text={text}")
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    stress_map = {
        'üòå –ù–∏–∑–∫–∏–π (1-3)': 2,
        'üòê –°—Ä–µ–¥–Ω–∏–π (4-6)': 5,
        'üò∞ –í—ã—Å–æ–∫–∏–π (7-10)': 8
    }
    
    if text in stress_map:
        user_data_storage[chat_id]['stress_level'] = stress_map[text]
        logger.info(f"User {chat_id} selected stress level: {stress_map[text]}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return STRESS_LEVEL
    
    keyboard = [
        ['üíª –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞'],
        ['üèÉ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞'],
        ['üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üíº **–≠—Ç–∞–ø 12/12:** –¢–∏–ø –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return OCCUPATION

async def occupation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–∞—Å—á–µ—Ç"""
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] occupation() called. chat_id={chat_id}, text={text}")
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text in START_BUTTONS:
        return await handle_buttons(update, context)
    
    occupation_map = {
        'üíª –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞': 'office',
        'üèÉ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞': 'healthcare',
        'üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥': 'construction'
    }
    
    if text in occupation_map:
        user_data_storage[chat_id]['occupation'] = occupation_map[text]
        logger.info(f"User {chat_id} selected occupation: {occupation_map[text]}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return OCCUPATION
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard = [['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞
    calculating_msg = await update.message.reply_text(
        "üß† **–í—ã–ø–æ–ª–Ω—è—é —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã...**\n\n‚ö° –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã\nüî¨ –ü—Ä–∏–º–µ–Ω—è—é –Ω–∞—É—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã\nüìä –°–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"[DEBUG] user_data_storage[{chat_id}] –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º: {user_data_storage[chat_id]}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    required_fields = [
        'weight', 'height', 'age', 'gender', 'training_days', 'steps', 'occupation',
        'activity_type', 'intensity', 'workout_duration', 'recovery', 'sleep_quality',
        'stress_level', 'goal'
    ]
    missing = [f for f in required_fields if f not in user_data_storage[chat_id]]
    if missing:
        logger.error(f"[DEBUG] –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è: {missing}")
        await update.message.reply_text(
            f"‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã. –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è: {', '.join(missing)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ üöÄ –ù–∞—á–∞—Ç—å",
            parse_mode=ParseMode.MARKDOWN
        )
        if chat_id in user_data_storage:
            del user_data_storage[chat_id]
        return GENDER
    try:
        logger.info(f"Starting calculations for user {chat_id}")
        logger.info(f"User data: {user_data_storage[chat_id]}")
        
        results = generate_ultra_precise_recommendations(user_data_storage[chat_id])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_message = f"""üéâ **–í–∞—à —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!**

üéØ **–¶–ï–õ–ï–í–´–ï –ö–ê–õ–û–†–ò–ò (—Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–π —Ü–µ–ª–∏):**
‚Ä¢ –í –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞: **{results['target_calories_rest']} –∫–∫–∞–ª**
‚Ä¢ –í –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: **{results['target_calories_training']} –∫–∫–∞–ª**
‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º: **{results['target_calories_average']} –∫–∫–∞–ª**

üìä **–ö–ê–õ–û–†–ò–ò –ü–û –î–ù–Ø–ú (–¥–æ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏):**
‚Ä¢ üí§ –î–Ω–∏ –æ—Ç–¥—ã—Ö–∞: **{results['tdee_rest']} –∫–∫–∞–ª**
‚Ä¢ üèãÔ∏è –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: **{results['tdee_training']} –∫–∫–∞–ª**
‚Ä¢ üìà –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: **{results['tdee_average']} –∫–∫–∞–ª**

ü•© **–ú–ê–ö–†–û–ù–£–¢–†–ò–ï–ù–¢–´:**

**ü•§ –ë–µ–ª–∫–∏:** {results['protein_grams']} –≥ ({results['protein_min']}-{results['protein_max']} –≥)

**ü•ë –ñ–∏—Ä—ã:**
‚Ä¢ –î–Ω–∏ –æ—Ç–¥—ã—Ö–∞: {results['fats_rest']} –≥
‚Ä¢ –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {results['fats_training']} –≥

**üçû –£–≥–ª–µ–≤–æ–¥—ã:**
‚Ä¢ –î–Ω–∏ –æ—Ç–¥—ã—Ö–∞: {results['carbs_rest']} –≥  
‚Ä¢ –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {results['carbs_training']} –≥

**üåæ –ö–ª–µ—Ç—á–∞—Ç–∫–∞:**
‚Ä¢ –î–Ω–∏ –æ—Ç–¥—ã—Ö–∞: {results['fiber_rest']} –≥
‚Ä¢ –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {results['fiber_training']} –≥

**üíß –í–æ–¥–∞:** {results['water']} –º–ª/–¥–µ–Ω—å

üìà **–î–ï–¢–ê–õ–¨–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**
‚Ä¢ üî• BMR (–±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º): {results['bmr']} –∫–∫–∞–ª
‚Ä¢ ‚ö° TDEE –æ—Ç–¥—ã—Ö: {results['tdee_rest']} –∫–∫–∞–ª
‚Ä¢ üèãÔ∏è TDEE —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {results['tdee_training']} –∫–∫–∞–ª
‚Ä¢ üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç–¥—ã—Ö–∞: {results['rest_day_factor']}
‚Ä¢ üí™ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {results['training_day_factor']}

**üìö –û–ë–™–Ø–°–ù–ï–ù–ò–Ø:**
‚Ä¢ **BMR** - –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø–æ–∫–æ–µ
‚Ä¢ **TDEE** - –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ **–¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏** - –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π —Ü–µ–ª–∏

‚ú® *–†–∞—Å—á–µ—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –í–°–ï –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏!*

üéØ –°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π!"""

        # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –°–û–í–ï–¢–´ –î–õ–Ø –ù–û–í–ò–ß–ö–û–í/–ù–ï –¢–†–ï–ù–ò–†–£–Æ–©–ò–•–°–Ø –í –ö–û–ù–ï–¶ –†–ê–°–°–ß–Å–¢–ê ---
        advice = ""
        if user_data_storage[chat_id].get('training_experience') == '–ù–µ —Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å' or user_data_storage[chat_id].get('training_experience') == '–ù–µ—Ç –æ–ø—ã—Ç–∞' or user_data_storage[chat_id].get('training_days', 1) == 0:
            advice = ("\n\nüí° **–°–æ–≤–µ—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö:**\n"
                      "‚Ä¢ –î–∞–∂–µ –µ—Å–ª–∏ –≤—ã –Ω–µ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å, –¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∂–∏–∑–Ω—å!\n"
                      "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏, –ª–µ–≥–∫–∞—è –∑–∞—Ä—è–¥–∫–∞, —Ä–∞—Å—Ç—è–∂–∫–∞.\n"
                      "‚Ä¢ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –¥–æ–±–∞–≤—å—Ç–µ 5-10 –º–∏–Ω—É—Ç –∫ –ø—Ä–æ–≥—É–ª–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º (–ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, –æ—Ç–∂–∏–º–∞–Ω–∏—è —É —Å—Ç–µ–Ω—ã, –Ω–∞–∫–ª–æ–Ω—ã).\n"
                      "‚Ä¢ –í–∞–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ø–æ—Ä—Ç, –Ω–æ –∏ –±—ã—Ç–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (NEAT): —Ö–æ–¥–∏—Ç–µ –ø–µ—à–∫–æ–º, –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –ø–æ –ª–µ—Å—Ç–Ω–∏—Ü–µ, –¥–µ–ª–∞–π—Ç–µ —É–±–æ—Ä–∫—É.\n"
                      "‚Ä¢ –ù–µ –±–æ–π—Ç–µ—Å—å –Ω–∞—á–∏–Ω–∞—Ç—å —Å –º–∞–ª–æ–≥–æ ‚Äî –≥–ª–∞–≤–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å!\n"
                      "‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–π –≤–µ—Å –∏–ª–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è ‚Äî –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–∞.\n")
        elif user_data_storage[chat_id].get('training_experience') == '–ù–æ–≤–∏—á–æ–∫':
            advice = ("\n\nüí° **–°–æ–≤–µ—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤:**\n"
                      "‚Ä¢ –ù–µ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –∏–¥–µ–∞–ª—É —Å—Ä–∞–∑—É ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –¥–≤–∏–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –ø—Ä–∏–≤—ã—á–∫–æ–π.\n"
                      "‚Ä¢ –°–ª—É—à–∞–π—Ç–µ —Å–≤–æ–µ —Ç–µ–ª–æ, —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ.\n"
                      "‚Ä¢ –ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏ ‚Äî –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —É–Ω–∏–∫–∞–ª–µ–Ω!\n"
                      "‚Ä¢ –ü—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –π–æ–≥–∞, –ø–ª–∞–≤–∞–Ω–∏–µ, —Ç–∞–Ω—Ü—ã, –¥–æ–º–∞—à–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n")
        if advice:
            result_message += advice
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –±–ª–æ–∫—É –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            reply_markup = ReplyKeyboardMarkup([
                ['–Ø –≤—Å—ë-—Ç–∞–∫–∏ —Ö–æ—á—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!'],
                ['üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞']
            ], resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(result_message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            reply_markup = ReplyKeyboardMarkup([
                ['üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞']
            ], resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(result_message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
        logger.info(f"Successfully sent results to user {chat_id}")
        
    except Exception as e:
        logger.error(f"Error calculating for user {chat_id}: {str(e)}")
        await update.message.reply_text(
            f"‚ùå **–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:** {str(e)}\n\n–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ üöÄ –ù–∞—á–∞—Ç—å",
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if chat_id in user_data_storage:
        del user_data_storage[chat_id]
    
    return GENDER

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """‚ùì **–°–ø—Ä–∞–≤–∫–∞ FitAdventure Bot**

üéØ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–æ–Ω, —Å—Ç—Ä–µ—Å—Å
‚Ä¢ –†–∞–∑–¥–µ–ª—è—é –∫–∞–ª–æ—Ä–∏–∏ –ø–æ –¥–Ω—è–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç–¥—ã—Ö–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é –Ω–∞—É—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã (—Ç–æ—á–Ω–æ—Å—Ç—å 98%)

üî¨ **–ù–∞—É—á–Ω–∞—è –±–∞–∑–∞:**
‚Ä¢ –§–æ—Ä–º—É–ª–∞ Mifflin-St Jeor –¥–ª—è BMR
‚Ä¢ –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ TDEE
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üéÆ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞
‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤

üí° **–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üöÄ **–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?** –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üöÄ –ù–∞—á–∞—Ç—å"!"""

    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    return GENDER

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    chat_id = update.message.chat_id
    
    keyboard = [['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "‚ùå **–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω**\n\n–ù–∞–∂–º–∏—Ç–µ üöÄ –ù–∞—á–∞—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    if chat_id in user_data_storage:
        del user_data_storage[chat_id]
    
    return GENDER

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\nüéÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
        parse_mode=ParseMode.MARKDOWN
    )
    return GENDER

# --- –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ú–ê–ù–î–´ ---
async def motivation_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(MOTIVATION_TEXT, parse_mode=ParseMode.MARKDOWN)
    return GENDER
async def faq_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(FAQ_TEXT, parse_mode=ParseMode.MARKDOWN)
    return GENDER
async def nomotivation_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(NOMOTIVATION_TEXT, parse_mode=ParseMode.MARKDOWN)
    return GENDER

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ–ª—å–∫–æ –±–ª–æ–∫–∞ –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ---
async def start_training_block(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.message.chat_id
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data_storage[chat_id]['training_experience'] = None
    user_data_storage[chat_id]['training_days'] = None
    user_data_storage[chat_id]['activity_type'] = None
    user_data_storage[chat_id]['workout_duration'] = None
    user_data_storage[chat_id]['intensity'] = None
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ –æ–ø—ã—Ç
    keyboard = [
        ['üå± –ù–æ–≤–∏—á–æ–∫ (–¥–æ 1 –≥–æ–¥–∞)'],
        ['üî• –°—Ä–µ–¥–Ω–∏–π (1-3 –≥–æ–¥–∞)'],
        ['‚ö° –û–ø—ã—Ç–Ω—ã–π (3+ –≥–æ–¥–∞)']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "üí™ **–í–∞—à –æ–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?**",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    context.user_data['training_block'] = True  # –§–ª–∞–≥, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –±–ª–æ–∫–∞
    return TRAINING_EXPERIENCE

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
    chat_id = update.message.chat_id
    user_name = update.message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if chat_id in subscribers:
        await update.message.reply_text(
            f"‚úÖ **{user_name}**, –≤—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! üì¢\n\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n"
            "‚Ä¢ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É\n"
            "‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        subscribers.add(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        await update.message.reply_text(
            f"üéâ **{user_name}**, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! üì¢\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n"
            "‚Ä¢ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É\n"
            "‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π' –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è—Ö
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
        await update.message.reply_text(
            "üì¢ **–ü–û–°–õ–ï–î–ù–ò–ï –ù–û–í–û–í–í–ï–î–ï–ù–ò–Ø –ë–û–¢–ê:**\n\n"
            "üéØ **–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏**\n"
            "‚Ä¢ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä–æ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n"
            "üí¨ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º**\n"
            "‚Ä¢ –ö–Ω–æ–ø–∫–∞ \"üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞\" –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–æ–≤\n"
            "‚Ä¢ –ü—Ä—è–º–∞—è —Å–≤—è–∑—å —Å —Ñ–∏—Ç–Ω–µ—Å-—ç–∫—Å–ø–µ—Ä—Ç–æ–º @DARKSIDERS17\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è\n"
            "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "üîß **–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å**\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏\n"
            "‚Ä¢ –ë–æ–ª–µ–µ —É–¥–æ–±–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "üìä **–ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã**\n"
            "‚Ä¢ `/subscribe` - –±—ã—Å—Ç—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"
            "‚Ä¢ `/unsubscribe` - –±—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞\n"
            "‚Ä¢ `/broadcast` - —Ä–∞—Å—Å—ã–ª–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n\n"
            "üöÄ **–ü–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ**\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–∞–º–∏\n"
            "‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        await asyncio.sleep(1)
        
        await update.message.reply_text(
            "üí° **–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò:**\n\n"
            "1Ô∏è‚É£ **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è**\n"
            "   –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\"\n"
            "   –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/subscribe`\n\n"
            "2Ô∏è‚É£ **–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π**\n"
            "   –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üì¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\"\n"
            "   –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/unsubscribe`\n\n"
            "3Ô∏è‚É£ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º**\n"
            "   –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ\n"
            "   \"üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞\"\n"
            "   –¥–ª—è —Å–≤—è–∑–∏ —Å —Ñ–∏—Ç–Ω–µ—Å-—ç–∫—Å–ø–µ—Ä—Ç–æ–º @DARKSIDERS17\n\n"
            "4Ô∏è‚É£ **–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n"
            "   –í—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
            "‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?**\n"
            "   –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/help` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏",
            parse_mode=ParseMode.MARKDOWN
        )
        
        logger.info(f"User {chat_id} ({user_name}) subscribed to updates")
    
    return ConversationHandler.END

async def consultation_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º"""
    chat_id = update.message.chat_id
    user_name = update.message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    await update.message.reply_text(
        f"üí¨ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º**\n\n"
        f"üëã **{user_name}**, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?\n\n"
        "üéØ **–ù–∞—à —ç–∫—Å–ø–µ—Ä—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å:**\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø–ª–∞–Ω–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ–∏—Ç–Ω–µ—Å–µ\n\n"
        "üì± **–î–ª—è —Å–≤—è–∑–∏ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º:**\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: @DARKSIDERS17\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –∏–∑ FitAdventure Bot\n"
        "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "‚è∞ **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö, –æ–ø—ã—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
        parse_mode=ParseMode.MARKDOWN
    )
    
    logger.info(f"User {chat_id} ({user_name}) requested consultation")
    return ConversationHandler.END

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞"""
    chat_id = update.message.chat_id
    user_name = update.message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        await update.message.reply_text(
            f"üòî **{user_name}**, –≤—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.\n\n"
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n\n"
            "üí° –ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –Ω–∞–∂–∞–≤ 'üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'",
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info(f"User {chat_id} ({user_name}) unsubscribed from updates")
    else:
        await update.message.reply_text(
            f"‚ÑπÔ∏è **{user_name}**, –≤—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "üí° –•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è? –ù–∞–∂–º–∏—Ç–µ 'üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'",
            parse_mode=ParseMode.MARKDOWN
        )
    
    return ConversationHandler.END

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    chat_id = update.message.chat_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
    ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
    
    if chat_id != ADMIN_ID:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.",
            parse_mode=ParseMode.MARKDOWN
        )
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast
    message_text = update.message.text.replace('/broadcast', '').strip()
    
    if not message_text:
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            parse_mode=ParseMode.MARKDOWN
        )
        return ConversationHandler.END
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    success_count = 0
    error_count = 0
    
    for subscriber_id in subscribers:
        try:
            await context.bot.send_message(
                chat_id=subscriber_id,
                text=f"üì¢ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç FitAdventure Bot:**\n\n{message_text}",
                parse_mode=ParseMode.MARKDOWN
            )
            success_count += 1
        except Exception as e:
            error_count += 1
            logger.error(f"Failed to send broadcast to {subscriber_id}: {e}")
    
    await update.message.reply_text(
        f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
        f"üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}",
        parse_mode=ParseMode.MARKDOWN
    )
    
    logger.info(f"Broadcast sent to {success_count} subscribers by admin {chat_id}")
    return ConversationHandler.END

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ FitAdventure Bot v5.0 Final...")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞
    try:
        TOKEN = setup_bot_token()
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except KeyboardInterrupt:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        sys.exit(1)
        
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    try:
        application = Application.builder().token(TOKEN).build()
        print("‚úÖ Telegram Application —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            GENDER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, gender),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            AGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, age),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            WEIGHT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, weight),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            HEIGHT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, height),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            FAT_PERCENTAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, fat_percentage),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            FAT_PERCENTAGE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, fat_percentage_input),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            GOAL: [
                MessageHandler(filters.ALL, goal),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            EXPERIENCE_CHOICE: [
                MessageHandler(filters.ALL, experience_choice),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            TRAINING_EXPERIENCE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, training_experience),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            TRAINING_DAYS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, training_days),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            ACTIVITY_TYPE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, activity_type),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            WORKOUT_DURATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, workout_duration),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            STEPS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, steps),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            INTENSITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, intensity),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            RECOVERY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, recovery),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            SLEEP_QUALITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, sleep_quality),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            STRESS_LEVEL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, stress_level),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
            OCCUPATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, occupation),
                MessageHandler(~filters.TEXT, handle_message),
                MessageHandler(tg_filters.Regex(START_BUTTONS_REGEX), handle_buttons)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('motivation', motivation_command))
    application.add_handler(CommandHandler('faq', faq_command))
    application.add_handler(CommandHandler('nomotivation', nomotivation_command))
    application.add_handler(CommandHandler('subscribe', subscribe_command))
    application.add_handler(CommandHandler('unsubscribe', unsubscribe_command))
    application.add_handler(CommandHandler('broadcast', broadcast_message))
    
    logger.info("üöÄ FitAdventure Bot v5.0 Final –∑–∞–ø—É—â–µ–Ω!")
    logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
    print("\nüéØ FitAdventure Bot v5.0 Final –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üéÆ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞!")
    print("üìä –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 98%")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞")
    print("‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        application.run_polling()
    except KeyboardInterrupt:
        print("\n‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main() 