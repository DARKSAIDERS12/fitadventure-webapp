import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode
from ultra_precise_formulas import generate_maximum_precision_recommendations

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
LANGUAGE_CHOICE, GENDER, AGE, WEIGHT, HEIGHT, FAT_PERCENTAGE, FAT_PERCENTAGE_INPUT, GOAL, TRAINING_EXPERIENCE, TRAINING_DAYS, ACTIVITY_TYPE, WORKOUT_DURATION, STEPS, INTENSITY, RECOVERY, SLEEP_QUALITY, STRESS_LEVEL, OCCUPATION = range(18)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
user_data_storage = {}

# === –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê ===
TEXTS = {
    'ru': {
        'welcome': "üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitAdventure!**\n\n–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.\n\nüöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –∫ —Ç–µ–ª—É –º–µ—á—Ç—ã?",
        'choose_language': "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:**",
        'language_set': "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π",
        'start_analysis': "üéØ **–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑**",
        'help_info': "‚ÑπÔ∏è **–ü–æ–¥—Ä–æ–±–Ω–µ–µ**",
        'help_button': "‚ùì **–ü–æ–º–æ—â—å**",
        'progress_bar': "üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {current}/{total} —à–∞–≥–æ–≤\n{'‚ñì' * current}{'‚ñë' * (total - current)}",
        'stage_gender': "üë§ **–≠—Ç–∞–ø 1/8:** –í–∞—à –ø–æ–ª?",
        'stage_age': "üéÇ **–≠—Ç–∞–ø 2/8:** –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?",
        'stage_weight': "‚öñÔ∏è **–≠—Ç–∞–ø 3/8:** –í–∞—à –≤–µ—Å (–∫–≥)?",
        'stage_height': "üìè **–≠—Ç–∞–ø 4/8:** –í–∞—à —Ä–æ—Å—Ç (—Å–º)?",
        'stage_fat': "üî• **–≠—Ç–∞–ø 5/8:** –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞?",
        'stage_goal': "üéØ **–≠—Ç–∞–ø 6/8:** –í–∞—à–∞ —Ü–µ–ª—å?",
        'stage_experience': "üí™ **–≠—Ç–∞–ø 7/8:** –û–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
        'stage_activity': "üèÉ **–≠—Ç–∞–ø 8/8:** –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        'male': "üë® –ú—É–∂—á–∏–Ω–∞",
        'female': "üë© –ñ–µ–Ω—â–∏–Ω–∞",
        'know_fat': "‚úÖ –î–∞, –∑–Ω–∞—é",
        'dont_know_fat': "‚ùå –ù–µ –∑–Ω–∞—é",
        'goal_loss': "üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ",
        'goal_maintain': "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ",
        'goal_gain': "üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã",
        'exp_beginner': "üå± –ù–æ–≤–∏—á–æ–∫",
        'exp_intermediate': "üî• –°—Ä–µ–¥–Ω–∏–π",
        'exp_advanced': "‚ö° –û–ø—ã—Ç–Ω—ã–π",
        'activity_strength': "üèãÔ∏è –°–∏–ª–æ–≤—ã–µ",
        'activity_cardio': "üèÉ –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", 
        'activity_crossfit': "‚ö° –ö—Ä–æ—Å—Å—Ñ–∏—Ç",
        'result_title': "üéâ **–í–∞—à —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!**",
        'calculating': "üß† –í—ã–ø–æ–ª–Ω—è—é —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤...",
        'precision_info': "üéØ **–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞:** {precision}%",
        'stage_intensity': "üî• **–≠—Ç–∞–ø 9/12:** –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
        'stage_recovery': "üò¥ **–≠—Ç–∞–ø 10/12:** –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è?",
        'stage_sleep': "üåô **–≠—Ç–∞–ø 11/12:** –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞?",
        'stage_lifestyle': "üíº **–≠—Ç–∞–ø 12/12:** –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
        'intensity_low': "üü¢ –ù–∏–∑–∫–∞—è",
        'intensity_moderate': "üü° –°—Ä–µ–¥–Ω—è—è",
        'intensity_high': "üî¥ –í—ã—Å–æ–∫–∞—è",
        'intensity_very_high': "‚ö° –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è",
        'recovery_excellent': "‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ",
        'recovery_good': "‚úÖ –•–æ—Ä–æ—à–µ–µ",
        'recovery_average': "üî∂ –°—Ä–µ–¥–Ω–µ–µ",
        'recovery_poor': "‚ùå –ü–ª–æ—Ö–æ–µ",
        'sleep_excellent': "üò¥ –û—Ç–ª–∏—á–Ω—ã–π (8+ —á–∞—Å–æ–≤)",
        'sleep_good': "üòä –•–æ—Ä–æ—à–∏–π (7-8 —á–∞—Å–æ–≤)",
        'sleep_average': "üòê –°—Ä–µ–¥–Ω–∏–π (6-7 —á–∞—Å–æ–≤)",
        'sleep_poor': "üòû –ü–ª–æ—Ö–æ–π (<6 —á–∞—Å–æ–≤)",
        'stress_low': "üòå –ù–∏–∑–∫–∏–π (1-3)",
        'stress_medium': "üòê –°—Ä–µ–¥–Ω–∏–π (4-6)",
        'stress_high': "üò∞ –í—ã—Å–æ–∫–∏–π (7-10)",
        'occupation_office': "üíª –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        'occupation_active': "üèÉ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        'occupation_physical': "üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥",
        'error_invalid': "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
        'canceled': "‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        'help_text': "üìö **–°–ø—Ä–∞–≤–∫–∞ FitAdventure**\n\nüéØ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n\nüìä –ú—ã —É—á–∏—Ç—ã–≤–∞–µ–º:\n‚Ä¢ –í–∞—à–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n‚Ä¢ –¶–µ–ª–∏ –∏ –æ–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ\n\n‚ú® –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º!"
    },
    'en': {
        'welcome': "üéØ **Welcome to FitAdventure!**\n\nI'll help create a personalized nutrition plan to achieve your goals.\n\nüöÄ Ready to start your journey to your dream body?",
        'choose_language': "üåç **Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:**",
        'language_set': "‚úÖ Language set: English",
        'start_analysis': "üéØ **Start Analysis**",
        'help_info': "‚ÑπÔ∏è **More Info**",
        'help_button': "‚ùì **Help**",
        'progress_bar': "üìä **Progress:** {current}/{total} steps\n{'‚ñì' * current}{'‚ñë' * (total - current)}",
        'stage_gender': "üë§ **Step 1/8:** Your gender?",
        'stage_age': "üéÇ **Step 2/8:** Your age?",
        'stage_weight': "‚öñÔ∏è **Step 3/8:** Your weight (kg)?",
        'stage_height': "üìè **Step 4/8:** Your height (cm)?",
        'stage_fat': "üî• **Step 5/8:** Do you know your body fat %?",
        'stage_goal': "üéØ **Step 6/8:** Your goal?",
        'stage_experience': "üí™ **Step 7/8:** Training experience?",
        'stage_activity': "üèÉ **Step 8/8:** Activity details",
        'male': "üë® Male",
        'female': "üë© Female",
        'know_fat': "‚úÖ Yes, I know",
        'dont_know_fat': "‚ùå Don't know",
        'goal_loss': "üìâ Weight Loss",
        'goal_maintain': "‚öñÔ∏è Maintenance",
        'goal_gain': "üìà Muscle Gain",
        'exp_beginner': "üå± Beginner",
        'exp_intermediate': "üî• Intermediate",
        'exp_advanced': "‚ö° Advanced",
        'activity_strength': "üèãÔ∏è Strength",
        'activity_cardio': "üèÉ Cardio", 
        'activity_crossfit': "‚ö° CrossFit",
        'result_title': "üéâ **Your ultra-precise nutrition plan is ready!**",
        'calculating': "üß† Performing ultra-precise calculations with all factors...",
        'precision_info': "üéØ **Calculation Accuracy:** {precision}%",
        'stage_intensity': "üî• **Step 9/12:** Training intensity?",
        'stage_recovery': "üò¥ **Step 10/12:** Recovery quality?",
        'stage_sleep': "üåô **Step 11/12:** Sleep quality?",
        'stage_lifestyle': "üíº **Step 12/12:** Lifestyle",
        'intensity_low': "üü¢ Low",
        'intensity_moderate': "üü° Moderate",
        'intensity_high': "üî¥ High",
        'intensity_very_high': "‚ö° Very High",
        'recovery_excellent': "‚≠ê Excellent",
        'recovery_good': "‚úÖ Good",
        'recovery_average': "üî∂ Average",
        'recovery_poor': "‚ùå Poor",
        'sleep_excellent': "üò¥ Excellent (8+ hours)",
        'sleep_good': "üòä Good (7-8 hours)",
        'sleep_average': "üòê Average (6-7 hours)",
        'sleep_poor': "üòû Poor (<6 hours)",
        'stress_low': "üòå Low (1-3)",
        'stress_medium': "üòê Medium (4-6)",
        'stress_high': "üò∞ High (7-10)",
        'occupation_office': "üíª Office work",
        'occupation_active': "üèÉ Active work",
        'occupation_physical': "üí™ Physical work",
        'error_invalid': "‚ùå Please enter a valid value",
        'canceled': "‚ùå Analysis canceled",
        'help_text': "üìö **FitAdventure Help**\n\nüéØ This bot helps calculate personalized nutrition plans\n\nüìä We consider:\n‚Ä¢ Your physical parameters\n‚Ä¢ Goals and training experience\n‚Ä¢ Activity level\n‚Ä¢ Body fat percentage\n\n‚ú® Get precise recommendations for calories and macronutrients!"
    }
}

def get_text(user_id: int, key: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_lang = user_data_storage.get(user_id, {}).get('language', 'ru')
    return TEXTS[user_lang].get(key, TEXTS['ru'][key])

def get_progress_bar(current: int, total: int = 12) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è 12-—ç—Ç–∞–ø–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
    filled = min(current, total)
    return f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {filled}/{total}\n{'‚ñì' * filled}{'‚ñë' * (total - filled)}"

# --- –°—Ç–∞—Ä—ã–µ —Ä–∞—Å—á–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É ---
# –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ ultra_precise_formulas.py

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞"""
    chat_id = update.message.chat_id
    user_data_storage[chat_id] = {}
    
    # –ö—Ä–∞—Å–∏–≤—ã–µ –∫—Ä—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("üá∫üá∏ English", callback_data='lang_en')]
    ]
    
    await update.message.reply_text(
        "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return LANGUAGE_CHOICE

async def language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    if query.data == 'lang_ru':
        user_data_storage[chat_id]['language'] = 'ru'
        lang_text = "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π"
    else:
        user_data_storage[chat_id]['language'] = 'en'
        lang_text = "‚úÖ Language set: English"
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    welcome_text = get_text(chat_id, 'welcome')
    progress = get_progress_bar(0, 12)
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'start_analysis'), callback_data='start_analysis')],
        [InlineKeyboardButton(get_text(chat_id, 'help_info'), callback_data='help_info'),
         InlineKeyboardButton(get_text(chat_id, 'help_button'), callback_data='help')]
    ]
    
    await query.edit_message_text(
        f"{lang_text}\n\n{welcome_text}\n\n{progress}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return LANGUAGE_CHOICE

async def start_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    progress = get_progress_bar(1, 12)
    stage_text = get_text(chat_id, 'stage_gender')
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'male'), callback_data='–º—É–∂—á–∏–Ω–∞')],
        [InlineKeyboardButton(get_text(chat_id, 'female'), callback_data='–∂–µ–Ω—â–∏–Ω–∞')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return GENDER

async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['gender'] = query.data
    
    progress = get_progress_bar(2, 12)
    stage_text = get_text(chat_id, 'stage_age')
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        parse_mode=ParseMode.MARKDOWN
    )
    return AGE

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age_value = int(update.message.text)
        if not (10 <= age_value <= 100):
            raise ValueError
    except ValueError:
        await update.message.reply_text(get_text(update.message.chat_id, 'error_invalid'))
        return AGE
    
    chat_id = update.message.chat_id
    user_data_storage[chat_id]['age'] = age_value
    
    progress = get_progress_bar(3, 12)
    stage_text = get_text(chat_id, 'stage_weight')
    
    await update.message.reply_text(
        f"{progress}\n\n{stage_text}",
        parse_mode=ParseMode.MARKDOWN
    )
    return WEIGHT

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    try:
        weight_value = float(update.message.text)
        if not (30 <= weight_value <= 300):
            raise ValueError
    except ValueError:
        await update.message.reply_text(get_text(update.message.chat_id, 'error_invalid'))
        return WEIGHT
    
    chat_id = update.message.chat_id
    user_data_storage[chat_id]['weight'] = weight_value
    
    progress = get_progress_bar(4, 12)
    stage_text = get_text(chat_id, 'stage_height')
    
    await update.message.reply_text(
        f"{progress}\n\n{stage_text}",
        parse_mode=ParseMode.MARKDOWN
    )
    return HEIGHT

async def height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    try:
        height_value = float(update.message.text)
        if not (100 <= height_value <= 250):
            raise ValueError
    except ValueError:
        await update.message.reply_text(get_text(update.message.chat_id, 'error_invalid'))
        return HEIGHT
    
    chat_id = update.message.chat_id
    user_data_storage[chat_id]['height'] = height_value
    
    progress = get_progress_bar(5, 12)
    stage_text = get_text(chat_id, 'stage_fat')
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'know_fat'), callback_data='know_fat')],
        [InlineKeyboardButton(get_text(chat_id, 'dont_know_fat'), callback_data='dont_know_fat')]
    ]
    
    await update.message.reply_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return FAT_PERCENTAGE

async def fat_percentage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    
    if query.data == 'know_fat':
        await query.edit_message_text("üî• –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (5-50%):")
        return FAT_PERCENTAGE_INPUT
    else:
        user_data_storage[chat_id]['fat_percent'] = None
        return await show_goal_selection(query, chat_id)

async def fat_percentage_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
    try:
        fat_value = float(update.message.text)
        if not (5 <= fat_value <= 50):
            raise ValueError
    except ValueError:
        await update.message.reply_text(get_text(update.message.chat_id, 'error_invalid'))
        return FAT_PERCENTAGE_INPUT
    
    chat_id = update.message.chat_id
    user_data_storage[chat_id]['fat_percent'] = fat_value
    
    return await show_goal_selection_text(update, chat_id)

async def show_goal_selection(query, chat_id) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ü–µ–ª–∏ (callback)"""
    progress = get_progress_bar(6, 12)
    stage_text = get_text(chat_id, 'stage_goal')
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'goal_loss'), callback_data='–ü–æ—Ö—É–¥–µ–Ω–∏–µ')],
        [InlineKeyboardButton(get_text(chat_id, 'goal_maintain'), callback_data='–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ')],
        [InlineKeyboardButton(get_text(chat_id, 'goal_gain'), callback_data='–ù–∞–±–æ—Ä –º–∞—Å—Å—ã')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return GOAL

async def show_goal_selection_text(update, chat_id) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ü–µ–ª–∏ (text)"""
    progress = get_progress_bar(6, 12)
    stage_text = get_text(chat_id, 'stage_goal')
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'goal_loss'), callback_data='–ü–æ—Ö—É–¥–µ–Ω–∏–µ')],
        [InlineKeyboardButton(get_text(chat_id, 'goal_maintain'), callback_data='–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ')],
        [InlineKeyboardButton(get_text(chat_id, 'goal_gain'), callback_data='–ù–∞–±–æ—Ä –º–∞—Å—Å—ã')]
    ]
    
    await update.message.reply_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return GOAL

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['goal'] = query.data
    
    progress = get_progress_bar(7, 12)
    stage_text = get_text(chat_id, 'stage_experience')
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'exp_beginner'), callback_data='–ù–æ–≤–∏—á–æ–∫')],
        [InlineKeyboardButton(get_text(chat_id, 'exp_intermediate'), callback_data='–°—Ä–µ–¥–Ω–∏–π')],
        [InlineKeyboardButton(get_text(chat_id, 'exp_advanced'), callback_data='–û–ø—ã—Ç–Ω—ã–π')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return TRAINING_EXPERIENCE

async def training_experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—ã—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['training_experience'] = query.data
    
    progress = get_progress_bar(8, 12)
    stage_text = get_text(chat_id, 'stage_activity')
    
    keyboard = [
        [InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data='1'),
         InlineKeyboardButton("2 –¥–Ω—è", callback_data='2'),
         InlineKeyboardButton("3 –¥–Ω—è", callback_data='3')],
        [InlineKeyboardButton("4 –¥–Ω—è", callback_data='4'),
         InlineKeyboardButton("5 –¥–Ω–µ–π", callback_data='5'),
         InlineKeyboardButton("6 –¥–Ω–µ–π", callback_data='6')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\nüèÉ **–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å?**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return TRAINING_DAYS

async def training_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['training_days'] = int(query.data)
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'activity_strength'), callback_data='–°–∏–ª–æ–≤—ã–µ')],
        [InlineKeyboardButton(get_text(chat_id, 'activity_cardio'), callback_data='–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å')],
        [InlineKeyboardButton(get_text(chat_id, 'activity_crossfit'), callback_data='–ö—Ä–æ—Å—Å—Ñ–∏—Ç')]
    ]
    
    await query.edit_message_text(
        "üí™ **–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return ACTIVITY_TYPE

async def activity_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['activity_type'] = query.data
    
    await query.edit_message_text(
        "‚è±Ô∏è **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–º–∏–Ω—É—Ç—ã)?**",
        parse_mode=ParseMode.MARKDOWN
    )
    return WORKOUT_DURATION

async def workout_duration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        duration = int(update.message.text)
        if not (15 <= duration <= 300):
            raise ValueError
    except ValueError:
        await update.message.reply_text(get_text(update.message.chat_id, 'error_invalid'))
        return WORKOUT_DURATION
    
    chat_id = update.message.chat_id
    user_data_storage[chat_id]['workout_duration'] = duration
    
    await update.message.reply_text(
        "üö∂ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å (–ø—Ä–∏–º–µ—Ä–Ω–æ)?**",
        parse_mode=ParseMode.MARKDOWN
    )
    return STEPS

async def steps(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        steps_count = int(update.message.text)
        if not (1000 <= steps_count <= 50000):
            raise ValueError
    except ValueError:
        await update.message.reply_text(get_text(update.message.chat_id, 'error_invalid'))
        return STEPS
    
    chat_id = update.message.chat_id
    user_data_storage[chat_id]['steps'] = steps_count
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    progress = get_progress_bar(9, 12)
    stage_text = get_text(chat_id, 'stage_intensity')
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'intensity_low'), callback_data='low')],
        [InlineKeyboardButton(get_text(chat_id, 'intensity_moderate'), callback_data='moderate')],
        [InlineKeyboardButton(get_text(chat_id, 'intensity_high'), callback_data='high')],
        [InlineKeyboardButton(get_text(chat_id, 'intensity_very_high'), callback_data='very_high')]
    ]
    
    await update.message.reply_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return INTENSITY

async def intensity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['intensity'] = query.data
    
    progress = get_progress_bar(10, 12)
    stage_text = get_text(chat_id, 'stage_recovery')
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'recovery_excellent'), callback_data='excellent')],
        [InlineKeyboardButton(get_text(chat_id, 'recovery_good'), callback_data='good')],
        [InlineKeyboardButton(get_text(chat_id, 'recovery_average'), callback_data='average')],
        [InlineKeyboardButton(get_text(chat_id, 'recovery_poor'), callback_data='poor')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return RECOVERY

async def recovery(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–Ω—É"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['recovery'] = query.data
    
    progress = get_progress_bar(11, 12)
    stage_text = get_text(chat_id, 'stage_sleep')
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'sleep_excellent'), callback_data='excellent')],
        [InlineKeyboardButton(get_text(chat_id, 'sleep_good'), callback_data='good')],
        [InlineKeyboardButton(get_text(chat_id, 'sleep_average'), callback_data='average')],
        [InlineKeyboardButton(get_text(chat_id, 'sleep_poor'), callback_data='poor')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return SLEEP_QUALITY

async def sleep_quality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–µ—Å—Å—É"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['sleep_quality'] = query.data
    
    progress = get_progress_bar(12, 12)
    stage_text = get_text(chat_id, 'stage_lifestyle')
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'stress_low'), callback_data='2')],
        [InlineKeyboardButton(get_text(chat_id, 'stress_medium'), callback_data='5')],
        [InlineKeyboardButton(get_text(chat_id, 'stress_high'), callback_data='8')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\nüíÜ **–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –≤ –∂–∏–∑–Ω–∏?**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return STRESS_LEVEL

async def stress_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['stress_level'] = int(query.data)
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'occupation_office'), callback_data='office')],
        [InlineKeyboardButton(get_text(chat_id, 'occupation_active'), callback_data='healthcare')],
        [InlineKeyboardButton(get_text(chat_id, 'occupation_physical'), callback_data='construction')]
    ]
    
    await query.edit_message_text(
        "üíº **–¢–∏–ø —Ä–∞–±–æ—Ç—ã?**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return OCCUPATION

async def occupation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['occupation'] = query.data
    user_data_storage[chat_id]['user_id'] = str(chat_id)  # –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ TDEE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    calculating_msg = await query.edit_message_text(
        get_text(chat_id, 'calculating'),
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    try:
        results = generate_maximum_precision_recommendations(user_data_storage[chat_id])
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_title = get_text(chat_id, 'result_title')
        precision_info = get_text(chat_id, 'precision_info').format(precision=results['precision_score'])
        
        final_message = f"""{result_title}

{precision_info}

üî• <b>–¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏:</b> {results['target_calories']} –∫–∫–∞–ª
ü•© <b>–ë–µ–ª–∫–∏:</b> {results['protein_min']}-{results['protein_max']} –≥
ü•ë <b>–ñ–∏—Ä—ã:</b> {results['fats']} –≥  
üçû <b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {results['carbs']} –≥
üåæ <b>–ö–ª–µ—Ç—á–∞—Ç–∫–∞:</b> {results['fiber']} –≥

üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞:</b>
‚Ä¢ TDEE: {results['tdee']} –∫–∫–∞–ª
‚Ä¢ BMR: {results['bmr']} –∫–∫–∞–ª  
‚Ä¢ NEAT: {results['neat']} –∫–∫–∞–ª
‚Ä¢ EAT: {results['eat']} –∫–∫–∞–ª
‚Ä¢ TEF: {results['tef']} –∫–∫–∞–ª
‚Ä¢ LBM: {results['lbm']} –∫–≥

‚ú® <i>–†–∞—Å—á–µ—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –í–°–ï –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏!</i>"""
        
        await calculating_msg.edit_text(final_message, parse_mode=ParseMode.HTML)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —É—Å–ø–µ—Ö–∞
        try:
            await query.message.reply_sticker(
                sticker="CAACAgIAAxkBAAIBYWF5yK8PAAGgUYOsLw7RH1vwiHrmCQAC7gADBXQMGGKOXoekKG_eHgQ"
            )
        except:
            await query.message.reply_text("üéâ‚ú®üéØ")
            
    except Exception as e:
        await calculating_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if chat_id in user_data_storage:
        del user_data_storage[chat_id]
    
    return ConversationHandler.END

async def help_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    help_text = get_text(chat_id, 'help_text')
    
    keyboard = [
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    
    await query.edit_message_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return LANGUAGE_CHOICE

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    help_text = get_text(chat_id, 'help_text')
    
    keyboard = [
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    
    await query.edit_message_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return LANGUAGE_CHOICE

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    welcome_text = get_text(chat_id, 'welcome')
    progress = get_progress_bar(0, 8)
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'start_analysis'), callback_data='start_analysis')],
        [InlineKeyboardButton(get_text(chat_id, 'help_info'), callback_data='help_info'),
         InlineKeyboardButton(get_text(chat_id, 'help_button'), callback_data='help')]
    ]
    
    await query.edit_message_text(
        f"{welcome_text}\n\n{progress}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return LANGUAGE_CHOICE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    chat_id = update.message.chat_id
    await update.message.reply_text(
        get_text(chat_id, 'canceled'),
        reply_markup=ReplyKeyboardRemove()
    )
    if chat_id in user_data_storage:
        del user_data_storage[chat_id]
    return ConversationHandler.END

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    application = Application.builder().token(TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler —Å –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å—é
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANGUAGE_CHOICE: [
                CallbackQueryHandler(language_choice, pattern='^lang_'),
                CallbackQueryHandler(start_analysis, pattern='^start_analysis$'),
                CallbackQueryHandler(help_info, pattern='^help_info$'),
                CallbackQueryHandler(help_command, pattern='^help$'),
                CallbackQueryHandler(back_to_start, pattern='^back_to_start$')
            ],
            GENDER: [CallbackQueryHandler(gender)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height)],
            FAT_PERCENTAGE: [CallbackQueryHandler(fat_percentage)],
            FAT_PERCENTAGE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, fat_percentage_input)],
            GOAL: [CallbackQueryHandler(goal)],
            TRAINING_EXPERIENCE: [CallbackQueryHandler(training_experience)],
            TRAINING_DAYS: [CallbackQueryHandler(training_days)],
            ACTIVITY_TYPE: [CallbackQueryHandler(activity_type)],
            WORKOUT_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, workout_duration)],
            STEPS: [MessageHandler(filters.TEXT & ~filters.COMMAND, steps)],
            INTENSITY: [CallbackQueryHandler(intensity)],
            RECOVERY: [CallbackQueryHandler(recovery)],
            SLEEP_QUALITY: [CallbackQueryHandler(sleep_quality)],
            STRESS_LEVEL: [CallbackQueryHandler(stress_level)],
            OCCUPATION: [CallbackQueryHandler(occupation)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    
    logger.info("üöÄ FitAdventure Bot –∑–∞–ø—É—â–µ–Ω —Å –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å—é!")
    application.run_polling()

if __name__ == '__main__':
    main() 