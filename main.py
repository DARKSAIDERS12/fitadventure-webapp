#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FitAdventure Bot - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
–£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–∏—Ç–∞–Ω–∏—è —Å Reply Keyboard
–í–µ—Ä—Å–∏—è: 5.0 Final
–î–∞—Ç–∞: 23 –∏—é–ª—è 2025
"""

import os
import sys
import json
import logging
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, WebAppInfo
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
try:
    from mini_apps import (
        show_mini_apps_menu, handle_mini_apps_navigation,
        show_products_menu, show_products_category, search_product_handler, 
        show_product_details, show_recommendations
    )
    MINI_APPS_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    MINI_APPS_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
try:
    from products_mini_app import (
        show_products_mini_app, handle_products_navigation, handle_product_search,
        show_category_products, show_product_details, show_search_interface,
        show_recommendations, return_to_main_menu
    )
    PRODUCTS_MINI_APP_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
    PRODUCTS_MINI_APP_AVAILABLE = False

# === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –¢–û–ö–ï–ù–ê ===
def setup_bot_token():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    env_file = Path('.env')
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
    if env_file.exists():
        load_dotenv()
        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if token:
            print("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return token
    
    print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞")
    print("üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram")
    print("2. –ù–∞–π–¥–∏—Ç–µ @BotFather")
    print("3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot")
    print("4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω")
    print()
    
    while True:
        token = input("üîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: ").strip()
        
        if not token:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            continue
            
        if not token.startswith(('1', '2', '5', '6')) or ':' not in token:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞! –ü—Ä–∏–º–µ—Ä: 1234567890:ABCdefGHIjklMNOpqrSTUvwxyz")
            continue
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª
        try:
            with open('.env', 'w', encoding='utf-8') as f:
                f.write(f"TELEGRAM_BOT_TOKEN={token}\n")
            
            print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª .env")
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return token
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            continue

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot_debug.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
GENDER, AGE, WEIGHT, HEIGHT, FAT_PERCENTAGE, FAT_PERCENTAGE_INPUT, GOAL, HAS_TRAINING_EXPERIENCE, TRAINING_EXPERIENCE, TRAINING_DAYS, ACTIVITY_TYPE, WORKOUT_DURATION, STEPS, INTENSITY, RECOVERY, SLEEP_QUALITY, STRESS_LEVEL, OCCUPATION = range(18)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
MINI_APPS_MENU, PRODUCTS_MENU, PRODUCT_SEARCH = range(18, 21)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
PRODUCTS_MAIN, PRODUCTS_CATEGORY, PRODUCT_DETAILS, PRODUCT_SEARCH_NEW = range(21, 25)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
user_data_storage = {}

# === –£–õ–¨–¢–†–ê-–¢–û–ß–ù–´–ï –†–ê–°–ß–ï–¢–´ ===
def generate_ultra_precise_recommendations(user_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –¥–Ω—è–º"""
    logger.info(f"Starting ultra-precise calculations with data: {user_data}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = [
        'weight', 'height', 'age', 'gender', 'steps',
        'occupation', 'recovery', 'sleep_quality', 'stress_level', 'goal'
    ]
    missing = [field for field in required_fields if field not in user_data]
    if missing:
        raise ValueError(f"–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing)}. –ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ —ç—Ç–∞–ø—ã –æ–ø—Ä–æ—Å–∞!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø—ã—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    has_training_experience = user_data.get('has_training_experience', True)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø—ã—Ç –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if has_training_experience:
        training_fields = ['training_days', 'activity_type', 'intensity', 'workout_duration']
        missing_training = [field for field in training_fields if field not in user_data]
        if missing_training:
            raise ValueError(f"–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {', '.join(missing_training)}. –ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ —ç—Ç–∞–ø—ã –æ–ø—Ä–æ—Å–∞!")
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    weight = user_data['weight']
    height = user_data['height'] 
    age = user_data['age']
    gender = user_data['gender']
    
    logger.info(f"Basic parameters - Weight: {weight}, Height: {height}, Age: {age}, Gender: {gender}")
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
    fat_percent = user_data.get('fat_percent')
    if fat_percent is None:
        # –†–∞—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ BMI –∏ –≤–æ–∑—Ä–∞—Å—Ç—É
        bmi = weight / ((height / 100) ** 2)
        
        if gender == '–º—É–∂—á–∏–Ω–∞':
            if age < 30:
                fat_percent = 1.20 * bmi + 0.23 * age - 16.2
            elif age < 50:
                fat_percent = 1.20 * bmi + 0.23 * age - 16.2
            else:
                fat_percent = 1.20 * bmi + 0.23 * age - 16.2
        else:  # –∂–µ–Ω—â–∏–Ω–∞
            if age < 30:
                fat_percent = 1.20 * bmi + 0.23 * age - 5.4
            elif age < 50:
                fat_percent = 1.20 * bmi + 0.23 * age - 5.4
            else:
                fat_percent = 1.20 * bmi + 0.23 * age - 5.4
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        fat_percent = max(8, min(35, fat_percent))
        user_data['fat_percent'] = round(fat_percent, 1)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –∂–∏—Ä–∞
    if gender == '–º—É–∂—á–∏–Ω–∞':
        if fat_percent < 6:
            fat_category = "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π"
        elif fat_percent < 14:
            fat_category = "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π"
        elif fat_percent < 18:
            fat_category = "–§–∏—Ç–Ω–µ—Å"
        elif fat_percent < 25:
            fat_category = "–°—Ä–µ–¥–Ω–∏–π"
        elif fat_percent < 32:
            fat_category = "–í—ã—Å–æ–∫–∏–π"
        else:
            fat_category = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"
    else:  # –∂–µ–Ω—â–∏–Ω–∞
        if fat_percent < 14:
            fat_category = "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π"
        elif fat_percent < 21:
            fat_category = "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π"
        elif fat_percent < 25:
            fat_category = "–§–∏—Ç–Ω–µ—Å"
        elif fat_percent < 32:
            fat_category = "–°—Ä–µ–¥–Ω–∏–π"
        elif fat_percent < 38:
            fat_category = "–í—ã—Å–æ–∫–∏–π"
        else:
            fat_category = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"
    
    user_data['fat_category'] = fat_category
    logger.info(f"Calculated fat percentage: {fat_percent}% ({fat_category})")
    
    # BMR –ø–æ —Ñ–æ—Ä–º—É–ª–µ Mifflin-St Jeor
    if gender == '–º—É–∂—á–∏–Ω–∞':
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    
    logger.info(f"Base BMR calculated: {bmr}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    steps = user_data['steps']
    
    # –†–∞–±–æ—á–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    occupation_factors = {
        'office': 0.15,      # –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        'healthcare': 0.25,  # –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞  
        'construction': 0.35 # –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥
    }
    work_factor = occupation_factors.get(user_data['occupation'], 0.2)
    
    # –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø—ã—Ç)
    if has_training_experience:
        training_days = user_data['training_days']
        
        # –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        activity_multipliers = {
            '–°–∏–ª–æ–≤—ã–µ': 0.08,
            '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å': 0.06,
            '–ö—Ä–æ—Å—Å—Ñ–∏—Ç': 0.1
        }
        training_base = activity_multipliers.get(user_data['activity_type'], 0.08)
        
        # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        intensity_multipliers = {
            'low': 0.8,
            'moderate': 1.0,
            'high': 1.2,
            'very_high': 1.4
        }
        intensity_factor = intensity_multipliers.get(user_data['intensity'], 1.0)
        
        # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        duration_factor = min(user_data['workout_duration'] / 60, 2.0)  # –ú–∞–∫—Å–∏–º—É–º 2x
        
        training_factor = training_base * intensity_factor * duration_factor * (training_days / 7)
    else:
        training_factor = 0.0  # –ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    
    # –®–∞–≥–∏
    steps_factor = min(steps / 10000 * 0.05, 0.15)  # –ú–∞–∫—Å–∏–º—É–º 0.15
    
    logger.info(f"Activity breakdown - Work: {work_factor}, Training: {training_factor}, Steps: {steps_factor}")
    
    # –§–∞–∫—Ç–æ—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    recovery_factors = {
        'excellent': 1.05,
        'good': 1.0,
        'average': 0.95,
        'poor': 0.9
    }
    recovery_multiplier = recovery_factors.get(user_data['recovery'], 1.0)
    
    sleep_factors = {
        'excellent': 1.05,
        'good': 1.0,
        'average': 0.95,
        'poor': 0.9
    }
    sleep_multiplier = sleep_factors.get(user_data['sleep_quality'], 1.0)
    
    # –°—Ç—Ä–µ—Å—Å (–æ–±—Ä–∞—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å)
    stress_level = user_data['stress_level']
    stress_multiplier = max(0.85, 1.1 - (stress_level / 10) * 0.25)
    
    logger.info(f"Recovery factors - Recovery: {recovery_multiplier}, Sleep: {sleep_multiplier}, Stress: {stress_multiplier}")
    
    # –†–∞–∑–¥–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –¥–Ω–µ–π –æ—Ç–¥—ã—Ö–∞ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    rest_day_factor = 1 + work_factor + steps_factor
    training_day_factor = rest_day_factor + training_factor
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    rest_day_factor *= recovery_multiplier * sleep_multiplier * stress_multiplier
    training_day_factor *= recovery_multiplier * sleep_multiplier * stress_multiplier
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø—ã—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –≤—Å–µ –¥–Ω–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–∞–∫ –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞
    if not has_training_experience:
        training_day_factor = rest_day_factor
    
    logger.info(f"Rest day factor: {rest_day_factor}, Training day factor: {training_day_factor}")
    
    # TDEE –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–Ω—è
    tdee_rest = int(bmr * rest_day_factor)
    tdee_training = int(bmr * training_day_factor)
    
    # –°—Ä–µ–¥–Ω–∏–π TDEE
    if has_training_experience:
        rest_days = 7 - training_days
        tdee_average = int((tdee_rest * rest_days + tdee_training * training_days) / 7)
    else:
        rest_days = 7
        training_days = 0
        tdee_average = tdee_rest  # –í—Å–µ –¥–Ω–∏ –∫–∞–∫ –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞
    
    logger.info(f"TDEE Rest Day: {tdee_rest}, TDEE Training Day: {tdee_training}, Average: {tdee_average}")
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ —Ü–µ–ª—å
    goal_adjustments = {
        '–ü–æ—Ö—É–¥–µ–Ω–∏–µ': -0.15,      # –î–µ—Ñ–∏—Ü–∏—Ç 15%
        '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ': 0,        # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã': 0.1       # –ü—Ä–æ—Ñ–∏—Ü–∏—Ç 10%
    }
    
    goal = user_data['goal']
    adjustment = goal_adjustments.get(goal, 0)
    
    logger.info(f"Goal: {goal}")
    
    # –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–Ω—è
    target_calories_rest = int(tdee_rest * (1 + adjustment))
    target_calories_training = int(tdee_training * (1 + adjustment))
    target_calories_average = int(tdee_average * (1 + adjustment))
    
    logger.info(f"Target calories - Rest day: {target_calories_rest}, Training day: {target_calories_training}, Average: {target_calories_average}")
    
    # –†–∞—Å—á–µ—Ç –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    # –ë–µ–ª–∫–∏: 2.0-2.2 –≥/–∫–≥ –≤–µ—Å–∞
    protein_grams = int(weight * 2.1)
    protein_min = int(weight * 1.9)
    protein_max = int(weight * 2.3)
    
    # –ñ–∏—Ä—ã: 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π (–æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π)
    fats_rest = int(target_calories_rest * 0.25 / 9)
    fats_training = int(target_calories_training * 0.25 / 9)
    
    # –£–≥–ª–µ–≤–æ–¥—ã: –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞–ª–æ—Ä–∏–∏
    protein_calories = protein_grams * 4
    fat_calories_rest = fats_rest * 9
    fat_calories_training = fats_training * 9
    
    carbs_rest = int((target_calories_rest - protein_calories - fat_calories_rest) / 4)
    carbs_training = int((target_calories_training - protein_calories - fat_calories_training) / 4)
    
    logger.info(f"Rest day macros - Protein: {protein_grams}–≥, Fats: {fats_rest}–≥, Carbs: {carbs_rest}–≥")
    logger.info(f"Training day macros - Protein: {protein_grams}–≥, Fats: {fats_training}–≥, Carbs: {carbs_training}–≥")
    
    # –ö–ª–µ—Ç—á–∞—Ç–∫–∞ –∏ –≤–æ–¥–∞
    fiber_rest = max(16, int(carbs_rest * 0.1))
    fiber_training = max(19, int(carbs_training * 0.1)) 
    water = int(weight * 35)  # 35 –º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞
    
    result = {
        'bmr': int(bmr),
        'tdee_rest': tdee_rest,
        'tdee_training': tdee_training,
        'tdee_average': tdee_average,
        'target_calories_rest': target_calories_rest,
        'target_calories_training': target_calories_training,
        'target_calories_average': target_calories_average,
        'protein_grams': protein_grams,
        'protein_min': protein_min,
        'protein_max': protein_max,
        'fats_rest': fats_rest,
        'fats_training': fats_training,
        'carbs_rest': carbs_rest,
        'carbs_training': carbs_training,
        'fiber_rest': fiber_rest,
        'fiber_training': fiber_training,
        'water': water,
        'rest_day_factor': round(rest_day_factor, 2),
        'training_day_factor': round(training_day_factor, 2),
        'training_days': training_days,
        'rest_days': rest_days,
        'has_training_experience': has_training_experience,
        'fat_percent': user_data['fat_percent'],
        'fat_category': user_data['fat_category'],
        'precision_score': 98  # –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    }
    
    logger.info(f"Ultra-precise result: {result}")
    return result

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    chat_id = update.message.chat_id
    user_data_storage[chat_id] = {}
    
    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
    keyboard = [
        ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'],
        ['üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'üìä –û –±–æ—Ç–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True, 
        one_time_keyboard=False
    )
    
    welcome_text = """üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitAdventure!**

–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º:
‚Ä¢ –í–∞—à–∏—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ –¶–µ–ª–µ–π –∏ –æ–ø—ã—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –£—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

üéÆ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞**
üìä **–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤: 98%**

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –∫ —Ç–µ–ª—É –º–µ—á—Ç—ã?"""

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    logger.info(f"User {chat_id} started the bot")
    return GENDER

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    text = update.message.text
    chat_id = update.message.chat_id
    
    if text == 'üöÄ –ù–∞—á–∞—Ç—å':
        return await start_survey(update, context)
    elif text == '‚ùì –ü–æ–º–æ—â—å':
        return await help_command(update, context)
    elif text == 'üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è':
        if MINI_APPS_AVAILABLE:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é
            keyboard = [
                ['üçé –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'],
                ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
            ]
            
            text = """üéÆ **–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FitAdventure**

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:

üçé **–ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤** - –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ë–ñ–£ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   ‚Ä¢ üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
   ‚Ä¢ ‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
   ‚Ä¢ ü•© –ë–µ–ª–∫–∏
   ‚Ä¢ ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã
   ‚Ä¢ üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã
   ‚Ä¢ üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞
   ‚Ä¢ üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   ‚Ä¢ üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥ –≤–∞—à—É —Ü–µ–ª—å
   ‚Ä¢ üí° –°–æ–≤–µ—Ç—ã –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é"""
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            return GENDER
        else:
            await update.message.reply_text("‚ö†Ô∏è –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return GENDER
    elif text == 'üìä –û –±–æ—Ç–µ':
        about_text = """ü§ñ **FitAdventure Bot v5.0**

‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–∏—Ç–∞–Ω–∏—è (98% —Ç–æ—á–Ω–æ—Å—Ç—å)
‚Ä¢ –£—á–µ—Ç –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç–¥—ã—Ö–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤)

üçé **–ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤–∫–ª—é—á–∞–µ—Ç:**
‚Ä¢ üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã (–æ–≤—Å—è–Ω–∫–∞, –≥—Ä–µ—á–∫–∞, –∫–∏–Ω–æ–∞)
‚Ä¢ ‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã (–º–µ–¥, —Ñ—Ä—É–∫—Ç—ã)
‚Ä¢ ü•© –ë–µ–ª–∫–∏ (–º—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞, —Ç–≤–æ—Ä–æ–≥)
‚Ä¢ ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã (–æ—Ä–µ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ, –º–∞—Å–ª–∞)
‚Ä¢ üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã (—Å—ã—Ä, –º–∞—Å–ª–æ)
‚Ä¢ üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞ (–æ–≤–æ—â–∏, –±–æ–±–æ–≤—ã–µ)

üî¨ **–ù–∞—É—á–Ω–∞—è –±–∞–∑–∞:**
‚Ä¢ –§–æ—Ä–º—É–ª–∞ Mifflin-St Jeor –¥–ª—è BMR
‚Ä¢ –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ TDEE
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π**"""
        
        await update.message.reply_text(about_text, parse_mode=ParseMode.MARKDOWN)
        return GENDER
    elif text == 'üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é':
        consultation_text = """üí¨ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è**

üéØ **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ üìã –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ üçΩÔ∏è –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–∞ –ø–æ –º–µ—Ä–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
‚Ä¢ üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üë®‚Äçüíº **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä:** @DARKSIDERS17

üì± **–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è:**
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ @DARKSIDERS17
2. –ù–∞–ø–∏—à–∏—Ç–µ "–•–æ—á—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è

üí° **–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –¥–µ—Ç–∞–ª–∏ –æ–±—Å—É–¥–∏–º –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö**

üöÄ **–ì–æ—Ç–æ–≤—ã –∫ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏?** –°–≤—è–∂–∏—Ç–µ—Å—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""
        
        keyboard = [['üöÄ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', '‚ùì –ü–æ–º–æ—â—å'], ['üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'üìä –û –±–æ—Ç–µ']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(consultation_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return GENDER
    elif text == 'üöÄ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
        return await start_survey(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    elif text == 'üçé –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤':
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º Web App —Å –±–∞–∑–æ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        web_app_url = "https://fitadventure-products.web.app"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App
        keyboard = [[KeyboardButton(text="üçé –û—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤", web_app=WebAppInfo(url=web_app_url))]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        text = """üçé **–ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ FitAdventure**

üì± **–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:**
‚Ä¢ üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
‚Ä¢ ‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã  
‚Ä¢ ü•© –ë–µ–ª–∫–∏
‚Ä¢ ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã
‚Ä¢ üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã
‚Ä¢ üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞

üîç **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–ñ–£
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥ –≤–∞—à—É —Ü–µ–ª—å

üí° **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è**"""
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return GENDER
    
    elif text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return await return_to_main_menu(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    elif text == 'üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã':
        return await show_products_category(update, context, '—Å–ª–æ–∂–Ω—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã')
    
    elif text == '‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã':
        return await show_products_category(update, context, '–ø—Ä–æ—Å—Ç—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã')
    
    elif text == 'ü•© –ë–µ–ª–∫–∏':
        return await show_products_category(update, context, '–±–µ–ª–∫–∏')
    
    elif text == 'ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã':
        return await show_products_category(update, context, '–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã')
    
    elif text == 'üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã':
        return await show_products_category(update, context, '–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã')
    
    elif text == 'üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞':
        return await show_products_category(update, context, '–∫–ª–µ—Ç—á–∞—Ç–∫–∞')
    
    elif text == 'üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞':
        return await show_search_interface(update, context)
    
    elif text == 'üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        return await show_recommendations(update, context)
    
    elif text == 'üîô –ù–∞–∑–∞–¥':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        keyboard = [
            ['üçé –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'],
            ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ]
        
        text = """üéÆ **–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FitAdventure**

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:

üçé **–ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤** - –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ë–ñ–£ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   ‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥ –≤–∞—à—É —Ü–µ–ª—å
   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"""
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return GENDER
    
    elif text == 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        keyboard = [
            ['üçé –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'],
            ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ]
        
        text = """üéÆ **–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FitAdventure**

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:

üçé **–ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤** - –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ë–ñ–£ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   ‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥ –≤–∞—à—É —Ü–µ–ª—å
   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"""
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return GENDER
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return await handle_message(update, context)

async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞"""
    chat_id = update.message.chat_id
    user_data_storage[chat_id] = {}
    
    keyboard = [['üë® –ú—É–∂—á–∏–Ω–∞', 'üë© –ñ–µ–Ω—â–∏–Ω–∞']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üë§ **–≠—Ç–∞–ø 1/12:** –í–∞—à –ø–æ–ª?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    logger.info(f"Starting survey for user {chat_id}")
    return GENDER

async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] gender() called. chat_id={chat_id}, text={text}")
    try:
        if text in ['üë® –ú—É–∂—á–∏–Ω–∞', '–º—É–∂—á–∏–Ω–∞', '–ú—É–∂—á–∏–Ω–∞']:
            user_data_storage[chat_id]['gender'] = '–º—É–∂—á–∏–Ω–∞'
        elif text in ['üë© –ñ–µ–Ω—â–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞']:
            user_data_storage[chat_id]['gender'] = '–∂–µ–Ω—â–∏–Ω–∞'
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
            return GENDER
        logger.info(f"User {chat_id} selected gender: {user_data_storage[chat_id]['gender']}")
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–∑—Ä–∞—Å—Ç—É
        keyboard = [['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üéÇ **–≠—Ç–∞–ø 2/12:** –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 16 –¥–æ 80)",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return AGE
    except Exception as e:
        logger.error(f"[ERROR] gender() exception: {e}")
        await update.message.reply_text(f"[gender] –û—à–∏–±–∫–∞: {e}")
        return GENDER

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    chat_id = update.message.chat_id
    text = update.message.text
    logger.info(f"[DEBUG] age() called. chat_id={chat_id}, text={text}")
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
        if text in ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å', 'üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']:
            return await handle_buttons(update, context)
        age_value = int(text)
        if not (16 <= age_value <= 80):
            raise ValueError
        user_data_storage[chat_id]['age'] = age_value
        logger.info(f"User {chat_id} entered age: {age_value}")
        await update.message.reply_text(
            "‚öñÔ∏è **–≠—Ç–∞–ø 3/12:** –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70)",
            parse_mode=ParseMode.MARKDOWN
        )
        return WEIGHT
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 16 –¥–æ 80)")
        return AGE
    except Exception as e:
        logger.error(f"[ERROR] age() exception: {e}")
        await update.message.reply_text(f"[age] –û—à–∏–±–∫–∞: {e}")
        return AGE

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    chat_id = update.message.chat_id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if update.message.text in ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å', 'üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']:
        return await handle_buttons(update, context)
    
    try:
        weight_value = float(update.message.text)
        if not (30 <= weight_value <= 300):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ –æ—Ç 30 –¥–æ 300 –∫–≥)")
        return WEIGHT
    
    user_data_storage[chat_id]['weight'] = weight_value
    logger.info(f"User {chat_id} entered weight: {weight_value}")
    
    await update.message.reply_text(
        "üìè **–≠—Ç–∞–ø 4/12:** –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175)",
        parse_mode=ParseMode.MARKDOWN
    )
    return HEIGHT

async def height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    chat_id = update.message.chat_id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if update.message.text in ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å', 'üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']:
        return await handle_buttons(update, context)
    
    try:
        height_value = float(update.message.text)
        if not (100 <= height_value <= 250):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 250 —Å–º)")
        return HEIGHT
    
    user_data_storage[chat_id]['height'] = height_value
    logger.info(f"User {chat_id} entered height: {height_value}")
    
    keyboard = [['‚úÖ –î–∞, –∑–Ω–∞—é', '‚ùå –ù–µ –∑–Ω–∞—é']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üî• **–≠—Ç–∞–ø 5/12:** –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return FAT_PERCENTAGE

async def fat_percentage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    if text == '‚úÖ –î–∞, –∑–Ω–∞—é':
        keyboard = [['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, persistent=True)
        
        await update.message.reply_text(
            "üìä –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (—á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 50, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15)",
            reply_markup=reply_markup
        )
        return FAT_PERCENTAGE_INPUT
    elif text == '‚ùå –ù–µ –∑–Ω–∞—é':
        user_data_storage[chat_id]['fat_percent'] = None
        logger.info(f"User {chat_id} doesn't know fat percentage")
        return await show_goal_selection(update, context)
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return FAT_PERCENTAGE

async def fat_percentage_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
    chat_id = update.message.chat_id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if update.message.text in ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å', 'üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']:
        return await handle_buttons(update, context)
    
    try:
        fat_value = float(update.message.text)
        if not (5 <= fat_value <= 50):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (—á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 50)")
        return FAT_PERCENTAGE_INPUT
    
    user_data_storage[chat_id]['fat_percent'] = fat_value
    logger.info(f"User {chat_id} entered fat percentage: {fat_value}")
    
    return await show_goal_selection(update, context)

async def show_goal_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ü–µ–ª–∏"""
    keyboard = [
        ['üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ'],
        ['‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ'],
        ['üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üéØ **–≠—Ç–∞–ø 6/12:** –í–∞—à–∞ —Ü–µ–ª—å?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return GOAL

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    if text == 'üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ':
        user_data_storage[chat_id]['goal'] = '–ü–æ—Ö—É–¥–µ–Ω–∏–µ'
    elif text == '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ':
        user_data_storage[chat_id]['goal'] = '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ'
    elif text == 'üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã':
        user_data_storage[chat_id]['goal'] = '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã'
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return GOAL
    
    logger.info(f"User {chat_id} selected goal: {user_data_storage[chat_id]['goal']}")
    
    keyboard = [
        ['‚úÖ –ï—Å—Ç—å –æ–ø—ã—Ç'],
        ['‚ùå –ù–µ—Ç –æ–ø—ã—Ç–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üí™ **–≠—Ç–∞–ø 7/12:** –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏–ª–∏ —Å–ø–æ—Ä—Ç–µ?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return HAS_TRAINING_EXPERIENCE

async def has_training_experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–ø—ã—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    if text == '‚úÖ –ï—Å—Ç—å –æ–ø—ã—Ç':
        user_data_storage[chat_id]['has_training_experience'] = True
        logger.info(f"User {chat_id} has training experience")
        
        keyboard = [
            ['üå± –ù–æ–≤–∏—á–æ–∫ (–¥–æ 1 –≥–æ–¥–∞)'],
            ['üî• –°—Ä–µ–¥–Ω–∏–π (1-3 –≥–æ–¥–∞)'],
            ['‚ö° –û–ø—ã—Ç–Ω—ã–π (3+ –≥–æ–¥–∞)']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            "üí™ **–≠—Ç–∞–ø 8/12:** –í–∞—à –æ–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return TRAINING_EXPERIENCE
        
    elif text == '‚ùå –ù–µ—Ç –æ–ø—ã—Ç–∞':
        user_data_storage[chat_id]['has_training_experience'] = False
        user_data_storage[chat_id]['training_experience'] = '–ù–æ–≤–∏—á–æ–∫'
        user_data_storage[chat_id]['training_days'] = 0
        user_data_storage[chat_id]['activity_type'] = '–ù–µ—Ç'
        user_data_storage[chat_id]['workout_duration'] = 0
        user_data_storage[chat_id]['intensity'] = 'low'
        user_data_storage[chat_id]['recovery'] = 'average'
        logger.info(f"User {chat_id} has no training experience, skipping training questions")
        
        keyboard = [['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üö∂ **–≠—Ç–∞–ø 8/12:** –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å –≤—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return STEPS
        
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return HAS_TRAINING_EXPERIENCE

async def training_experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—ã—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    if text == 'üå± –ù–æ–≤–∏—á–æ–∫ (–¥–æ 1 –≥–æ–¥–∞)':
        user_data_storage[chat_id]['training_experience'] = '–ù–æ–≤–∏—á–æ–∫'
    elif text == 'üî• –°—Ä–µ–¥–Ω–∏–π (1-3 –≥–æ–¥–∞)':
        user_data_storage[chat_id]['training_experience'] = '–°—Ä–µ–¥–Ω–∏–π'
    elif text == '‚ö° –û–ø—ã—Ç–Ω—ã–π (3+ –≥–æ–¥–∞)':
        user_data_storage[chat_id]['training_experience'] = '–û–ø—ã—Ç–Ω—ã–π'
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return TRAINING_EXPERIENCE
    
    logger.info(f"User {chat_id} selected experience: {user_data_storage[chat_id]['training_experience']}")
    
    keyboard = [
        ['1Ô∏è‚É£ –¥–µ–Ω—å', '2Ô∏è‚É£ –¥–Ω—è', '3Ô∏è‚É£ –¥–Ω—è'],
        ['4Ô∏è‚É£ –¥–Ω—è', '5Ô∏è‚É£ –¥–Ω–µ–π', '6Ô∏è‚É£ –¥–Ω–µ–π']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üèÉ **–≠—Ç–∞–ø 9/12:** –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return TRAINING_DAYS

async def training_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    days_map = {
        '1Ô∏è‚É£ –¥–µ–Ω—å': 1,
        '2Ô∏è‚É£ –¥–Ω—è': 2, 
        '3Ô∏è‚É£ –¥–Ω—è': 3,
        '4Ô∏è‚É£ –¥–Ω—è': 4,
        '5Ô∏è‚É£ –¥–Ω–µ–π': 5,
        '6Ô∏è‚É£ –¥–Ω–µ–π': 6
    }
    
    if text in days_map:
        user_data_storage[chat_id]['training_days'] = days_map[text]
        logger.info(f"User {chat_id} selected training days: {days_map[text]}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return TRAINING_DAYS
    
    keyboard = [
        ['üèãÔ∏è –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
        ['üèÉ –ö–∞—Ä–¥–∏–æ/–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å'],
        ['‚ö° –ö—Ä–æ—Å—Å—Ñ–∏—Ç/—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üí™ **–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?**",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return ACTIVITY_TYPE

async def activity_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    if text == 'üèãÔ∏è –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏':
        user_data_storage[chat_id]['activity_type'] = '–°–∏–ª–æ–≤—ã–µ'
    elif text == 'üèÉ –ö–∞—Ä–¥–∏–æ/–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å':
        user_data_storage[chat_id]['activity_type'] = '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å'
    elif text == '‚ö° –ö—Ä–æ—Å—Å—Ñ–∏—Ç/—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ':
        user_data_storage[chat_id]['activity_type'] = '–ö—Ä–æ—Å—Å—Ñ–∏—Ç'
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return ACTIVITY_TYPE
    
    logger.info(f"User {chat_id} selected activity type: {user_data_storage[chat_id]['activity_type']}")
    
    keyboard = [['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "‚è±Ô∏è **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö?** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 60)",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return WORKOUT_DURATION

async def workout_duration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    chat_id = update.message.chat_id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if update.message.text in ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å', 'üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']:
        return await handle_buttons(update, context)
    
    try:
        duration = int(update.message.text)
        if not (15 <= duration <= 300):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–æ—Ç 15 –¥–æ 300 –º–∏–Ω—É—Ç)")
        return WORKOUT_DURATION
    
    user_data_storage[chat_id]['workout_duration'] = duration
    logger.info(f"User {chat_id} entered workout duration: {duration}")
    
    await update.message.reply_text(
        "üö∂ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å?** (–ø—Ä–∏–º–µ—Ä–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 8000)",
        parse_mode=ParseMode.MARKDOWN
    )
    return STEPS

async def steps(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤"""
    chat_id = update.message.chat_id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if update.message.text in ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å', 'üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']:
        return await handle_buttons(update, context)
    
    try:
        steps_count = int(update.message.text)
        if not (1000 <= steps_count <= 50000):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–æ—Ç 1000 –¥–æ 50000)")
        return STEPS
    
    user_data_storage[chat_id]['steps'] = steps_count
    logger.info(f"User {chat_id} entered steps: {steps_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø—ã—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    has_training_experience = user_data_storage[chat_id].get('has_training_experience', True)
    
    if has_training_experience:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø—ã—Ç –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        keyboard = [
            ['üü¢ –ù–∏–∑–∫–∞—è'],
            ['üü° –°—Ä–µ–¥–Ω—è—è'], 
            ['üî¥ –í—ã—Å–æ–∫–∞—è'],
            ['‚ö° –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            "üî• **–≠—Ç–∞–ø 9/12:** –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return INTENSITY
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø—ã—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_data_storage[chat_id]['intensity'] = 'low'
        user_data_storage[chat_id]['recovery'] = 'average'
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–Ω–∞
        keyboard = [
            ['üò¥ –û—Ç–ª–∏—á–Ω—ã–π (8+ —á–∞—Å–æ–≤)'],
            ['üòä –•–æ—Ä–æ—à–∏–π (7-8 —á–∞—Å–æ–≤)'],
            ['üòê –°—Ä–µ–¥–Ω–∏–π (6-7 —á–∞—Å–æ–≤)'],
            ['üòû –ü–ª–æ—Ö–æ–π (<6 —á–∞—Å–æ–≤)']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            "üåô **–≠—Ç–∞–ø 9/12:** –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return SLEEP_QUALITY

async def intensity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    intensity_map = {
        'üü¢ –ù–∏–∑–∫–∞—è': 'low',
        'üü° –°—Ä–µ–¥–Ω—è—è': 'moderate',
        'üî¥ –í—ã—Å–æ–∫–∞—è': 'high',
        '‚ö° –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è': 'very_high'
    }
    
    if text in intensity_map:
        user_data_storage[chat_id]['intensity'] = intensity_map[text]
        logger.info(f"User {chat_id} selected intensity: {intensity_map[text]}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return INTENSITY
    
    keyboard = [
        ['‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ'],
        ['‚úÖ –•–æ—Ä–æ—à–µ–µ'],
        ['üî∂ –°—Ä–µ–¥–Ω–µ–µ'],
        ['‚ùå –ü–ª–æ—Ö–æ–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —ç—Ç–∞–ø–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ–ø—ã—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    stage_number = "10/12" if user_data_storage[chat_id].get('has_training_experience', True) else "9/12"
    
    await update.message.reply_text(
        f"üò¥ **–≠—Ç–∞–ø {stage_number}:** –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return RECOVERY

async def recovery(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    recovery_map = {
        '‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ': 'excellent',
        '‚úÖ –•–æ—Ä–æ—à–µ–µ': 'good', 
        'üî∂ –°—Ä–µ–¥–Ω–µ–µ': 'average',
        '‚ùå –ü–ª–æ—Ö–æ–µ': 'poor'
    }
    
    if text in recovery_map:
        user_data_storage[chat_id]['recovery'] = recovery_map[text]
        logger.info(f"User {chat_id} selected recovery: {recovery_map[text]}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return RECOVERY
    
    keyboard = [
        ['üò¥ –û—Ç–ª–∏—á–Ω—ã–π (8+ —á–∞—Å–æ–≤)'],
        ['üòä –•–æ—Ä–æ—à–∏–π (7-8 —á–∞—Å–æ–≤)'],
        ['üòê –°—Ä–µ–¥–Ω–∏–π (6-7 —á–∞—Å–æ–≤)'],
        ['üòû –ü–ª–æ—Ö–æ–π (<6 —á–∞—Å–æ–≤)']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —ç—Ç–∞–ø–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ–ø—ã—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    stage_number = "11/12" if user_data_storage[chat_id].get('has_training_experience', True) else "9/12"
    
    await update.message.reply_text(
        f"üåô **–≠—Ç–∞–ø {stage_number}:** –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return SLEEP_QUALITY

async def sleep_quality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    sleep_map = {
        'üò¥ –û—Ç–ª–∏—á–Ω—ã–π (8+ —á–∞—Å–æ–≤)': 'excellent',
        'üòä –•–æ—Ä–æ—à–∏–π (7-8 —á–∞—Å–æ–≤)': 'good',
        'üòê –°—Ä–µ–¥–Ω–∏–π (6-7 —á–∞—Å–æ–≤)': 'average',
        'üòû –ü–ª–æ—Ö–æ–π (<6 —á–∞—Å–æ–≤)': 'poor'
    }
    
    if text in sleep_map:
        user_data_storage[chat_id]['sleep_quality'] = sleep_map[text]
        logger.info(f"User {chat_id} selected sleep quality: {sleep_map[text]}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return SLEEP_QUALITY
    
    keyboard = [
        ['üòå –ù–∏–∑–∫–∏–π (1-3)'],
        ['üòê –°—Ä–µ–¥–Ω–∏–π (4-6)'], 
        ['üò∞ –í—ã—Å–æ–∫–∏–π (7-10)']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —ç—Ç–∞–ø–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ–ø—ã—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    stage_number = "11/12" if user_data_storage[chat_id].get('has_training_experience', True) else "10/12"
    
    await update.message.reply_text(
        f"üíÜ **–≠—Ç–∞–ø {stage_number}:** –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –≤ –∂–∏–∑–Ω–∏ –ø–æ —à–∫–∞–ª–µ 1-10?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return STRESS_LEVEL

async def stress_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–µ—Å—Å–∞"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    stress_map = {
        'üòå –ù–∏–∑–∫–∏–π (1-3)': 2,
        'üòê –°—Ä–µ–¥–Ω–∏–π (4-6)': 5,
        'üò∞ –í—ã—Å–æ–∫–∏–π (7-10)': 8
    }
    
    if text in stress_map:
        user_data_storage[chat_id]['stress_level'] = stress_map[text]
        logger.info(f"User {chat_id} selected stress level: {stress_map[text]}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return STRESS_LEVEL
    
    keyboard = [
        ['üíª –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞'],
        ['üèÉ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞'],
        ['üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —ç—Ç–∞–ø–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ–ø—ã—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    stage_number = "12/12" if user_data_storage[chat_id].get('has_training_experience', True) else "11/12"
    
    await update.message.reply_text(
        f"üíº **–≠—Ç–∞–ø {stage_number}:** –¢–∏–ø –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return OCCUPATION

async def occupation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–∞—Å—á–µ—Ç"""
    chat_id = update.message.chat_id
    text = update.message.text
    
    occupation_map = {
        'üíª –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞': 'office',
        'üèÉ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞': 'healthcare',
        'üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥': 'construction'
    }
    
    if text in occupation_map:
        user_data_storage[chat_id]['occupation'] = occupation_map[text]
        logger.info(f"User {chat_id} selected occupation: {occupation_map[text]}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return OCCUPATION
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard = [['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞
    calculating_msg = await update.message.reply_text(
        "üß† **–í—ã–ø–æ–ª–Ω—è—é —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã...**\n\n‚ö° –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã\nüî¨ –ü—Ä–∏–º–µ–Ω—è—é –Ω–∞—É—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã\nüìä –°–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    try:
        logger.info(f"Starting calculations for user {chat_id}")
        logger.info(f"User data: {user_data_storage[chat_id]}")
        
        results = generate_ultra_precise_recommendations(user_data_storage[chat_id])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ–ø—ã—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
        if results['has_training_experience']:
            result_message = f"""üéâ **–í–∞—à —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!**

üéØ **–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞:** {results['precision_score']}%

üìä **–ö–ê–õ–û–†–ò–ò –ü–û –î–ù–Ø–ú:**
‚Ä¢ üí§ –î–Ω–∏ –æ—Ç–¥—ã—Ö–∞: **{results['target_calories_rest']} –∫–∫–∞–ª**
‚Ä¢ üèãÔ∏è –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: **{results['target_calories_training']} –∫–∫–∞–ª**
‚Ä¢ üìà –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: **{results['target_calories_average']} –∫–∫–∞–ª**

ü•© **–ú–ê–ö–†–û–ù–£–¢–†–ò–ï–ù–¢–´:**

**ü•§ –ë–µ–ª–∫–∏:** {results['protein_grams']} –≥ ({results['protein_min']}-{results['protein_max']} –≥)

**ü•ë –ñ–∏—Ä—ã:**
‚Ä¢ –î–Ω–∏ –æ—Ç–¥—ã—Ö–∞: {results['fats_rest']} –≥
‚Ä¢ –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {results['fats_training']} –≥

**üçû –£–≥–ª–µ–≤–æ–¥—ã:**
‚Ä¢ –î–Ω–∏ –æ—Ç–¥—ã—Ö–∞: {results['carbs_rest']} –≥  
‚Ä¢ –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {results['carbs_training']} –≥

**üåæ –ö–ª–µ—Ç—á–∞—Ç–∫–∞:**
‚Ä¢ –î–Ω–∏ –æ—Ç–¥—ã—Ö–∞: {results['fiber_rest']} –≥
‚Ä¢ –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {results['fiber_training']} –≥

**üíß –í–æ–¥–∞:** {results['water']} –º–ª/–¥–µ–Ω—å

üìà **–î–ï–¢–ê–õ–¨–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**
‚Ä¢ üî• BMR (–±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º): {results['bmr']} –∫–∫–∞–ª
‚Ä¢ ‚ö° TDEE –æ—Ç–¥—ã—Ö: {results['tdee_rest']} –∫–∫–∞–ª
‚Ä¢ üèãÔ∏è TDEE —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {results['tdee_training']} –∫–∫–∞–ª
‚Ä¢ üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç–¥—ã—Ö–∞: {results['rest_day_factor']}
‚Ä¢ üí™ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {results['training_day_factor']}

üìä **–ê–ù–ê–õ–ò–ó –¢–ï–õ–ê:**
‚Ä¢ üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞: **{results['fat_percent']}%**
‚Ä¢ üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{results['fat_category']}**

**üìö –û–ë–™–Ø–°–ù–ï–ù–ò–Ø:**
‚Ä¢ **BMR** - –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø–æ–∫–æ–µ
‚Ä¢ **TDEE** - –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ **–¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏** - –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π —Ü–µ–ª–∏
‚Ä¢ **–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞** - —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

‚ú® *–†–∞—Å—á–µ—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –í–°–ï –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏!*

üéØ –°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π!"""
        else:
            result_message = f"""üéâ **–í–∞—à —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!**

üéØ **–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞:** {results['precision_score']}%

üìä **–ö–ê–õ–û–†–ò–ò:**
‚Ä¢ üìà –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: **{results['target_calories_average']} –∫–∫–∞–ª**

ü•© **–ú–ê–ö–†–û–ù–£–¢–†–ò–ï–ù–¢–´:**

**ü•§ –ë–µ–ª–∫–∏:** {results['protein_grams']} –≥ ({results['protein_min']}-{results['protein_max']} –≥)

**ü•ë –ñ–∏—Ä—ã:** {results['fats_rest']} –≥

**üçû –£–≥–ª–µ–≤–æ–¥—ã:** {results['carbs_rest']} –≥

**üåæ –ö–ª–µ—Ç—á–∞—Ç–∫–∞:** {results['fiber_rest']} –≥

**üíß –í–æ–¥–∞:** {results['water']} –º–ª/–¥–µ–Ω—å

üìà **–î–ï–¢–ê–õ–¨–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**
‚Ä¢ üî• BMR (–±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º): {results['bmr']} –∫–∫–∞–ª
‚Ä¢ ‚ö° TDEE (–æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏): {results['tdee_average']} –∫–∫–∞–ª
‚Ä¢ üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {results['rest_day_factor']}

üìä **–ê–ù–ê–õ–ò–ó –¢–ï–õ–ê:**
‚Ä¢ üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞: **{results['fat_percent']}%**
‚Ä¢ üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{results['fat_category']}**

**üìö –û–ë–™–Ø–°–ù–ï–ù–ò–Ø:**
‚Ä¢ **BMR** - –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø–æ–∫–æ–µ
‚Ä¢ **TDEE** - –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ **–¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏** - –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π —Ü–µ–ª–∏
‚Ä¢ **–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞** - —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:** –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø–µ—Ä–µ—Å—á–∏—Ç–∞–π—Ç–µ –ø–ª–∞–Ω —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!

‚ú® *–†–∞—Å—á–µ—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –í–°–ï –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏!*

üéØ –°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π!"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        consultation_keyboard = [['üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'], ['üöÄ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
        consultation_markup = ReplyKeyboardMarkup(consultation_keyboard, resize_keyboard=True)
        
        try:
            await calculating_msg.edit_text(result_message, parse_mode=ParseMode.MARKDOWN)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            await update.message.reply_text(
                "üí¨ **–ù—É–∂–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?**\n\n"
                "üéØ –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞\n"
                "üìã –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
                "üçΩÔ∏è –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏\n"
                "üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–∞\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å @DARKSIDERS17",
                reply_markup=consultation_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"Edit failed, sending new message: {e}")
            await update.message.reply_text(result_message, parse_mode=ParseMode.MARKDOWN)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            await update.message.reply_text(
                "üí¨ **–ù—É–∂–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?**\n\n"
                "üéØ –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞\n"
                "üìã –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
                "üçΩÔ∏è –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏\n"
                "üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–∞\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å @DARKSIDERS17",
                reply_markup=consultation_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        logger.info(f"Successfully sent results to user {chat_id}")
        
    except Exception as e:
        logger.error(f"Error calculating for user {chat_id}: {str(e)}")
        await calculating_msg.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:** {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ üöÄ –ù–∞—á–∞—Ç—å",
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if chat_id in user_data_storage:
        del user_data_storage[chat_id]
    
    return GENDER

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """‚ùì **–°–ø—Ä–∞–≤–∫–∞ FitAdventure Bot**

üéØ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–æ–Ω, —Å—Ç—Ä–µ—Å—Å
‚Ä¢ –†–∞–∑–¥–µ–ª—è—é –∫–∞–ª–æ—Ä–∏–∏ –ø–æ –¥–Ω—è–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç–¥—ã—Ö–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é –Ω–∞—É—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã (—Ç–æ—á–Ω–æ—Å—Ç—å 98%)

üî¨ **–ù–∞—É—á–Ω–∞—è –±–∞–∑–∞:**
‚Ä¢ –§–æ—Ä–º—É–ª–∞ Mifflin-St Jeor –¥–ª—è BMR
‚Ä¢ –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ TDEE
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üéÆ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞
‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤

üí° **–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üöÄ **–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?** –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üöÄ –ù–∞—á–∞—Ç—å"!"""

    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    return GENDER

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    chat_id = update.message.chat_id
    
    keyboard = [['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "‚ùå **–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω**\n\n–ù–∞–∂–º–∏—Ç–µ üöÄ –ù–∞—á–∞—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    if chat_id in user_data_storage:
        del user_data_storage[chat_id]
    
    return GENDER

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\nüéÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
        parse_mode=ParseMode.MARKDOWN
    )
    return GENDER

async def handle_webapp_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ Web App"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "products_regular":
        if PRODUCTS_MINI_APP_AVAILABLE:
            return await show_products_mini_app(update, context)
        elif MINI_APPS_AVAILABLE:
            return await show_products_menu(update, context)
        else:
            await query.edit_message_text("‚ö†Ô∏è –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return GENDER
    
    return GENDER

async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App"""
    try:
        if update.message.web_app_data:
            data = json.loads(update.message.web_app_data.data)
            
            if data.get('action') == 'product_details':
                product_name = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç')
                details = data.get('details', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
                goal = data.get('goal', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å')
                category = data.get('category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
                
                text = f"""üçé **{product_name.replace('_', ' ').upper()}**

üìä **–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 100–≥:**
{details}

üéØ **–¶–µ–ª—å:** {goal.replace('_', ' ').title()}
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category.replace('_', ' ').title()}

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞!"""
                
                keyboard = [['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
                return GENDER
        
        return GENDER
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Web App –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        return GENDER

# === –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –ü–†–û–î–£–ö–¢–û–í ===
async def show_products_category(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    from products_database import PRODUCTS_DATABASE
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ—Ö—É–¥–µ–Ω–∏–µ)
    chat_id = update.message.chat_id
    user_goal = '–ø–æ—Ö—É–¥–µ–Ω–∏–µ'  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–∏
    
    products = PRODUCTS_DATABASE.get(user_goal, {}).get(category, {})
    
    if not products:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return "PRODUCTS_MAIN"
    
    category_names = {
        "—Å–ª–æ–∂–Ω—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": "üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã",
        "–ø—Ä–æ—Å—Ç—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": "‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã", 
        "–±–µ–ª–∫–∏": "ü•© –ë–µ–ª–∫–∏",
        "–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã": "ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã",
        "–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã": "üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã",
        "–∫–ª–µ—Ç—á–∞—Ç–∫–∞": "üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞"
    }
    
    text = f"**{category_names.get(category, category)}**\n\n"
    
    for name, data in products.items():
        text += f"üçé **{name.replace('_', ' ').upper()}**\n"
        text += f"üìä –ö–∞–ª–æ—Ä–∏–∏: {data['–∫–∞–ª–æ—Ä–∏–∏']} –∫–∫–∞–ª/100–≥\n"
        text += f"ü•© –ë–µ–ª–∫–∏: {data['–±–µ–ª–∫–∏']}g | ü´í –ñ–∏—Ä—ã: {data['–∂–∏—Ä—ã']}g | üåæ –£–≥–ª–µ–≤–æ–¥—ã: {data['—É–≥–ª–µ–≤–æ–¥—ã']}g\n"
        if '–æ–ø–∏—Å–∞–Ω–∏–µ' in data:
            text += f"üí° {data['–æ–ø–∏—Å–∞–Ω–∏–µ']}\n"
        text += "\n"
    
    keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    return "PRODUCTS_MAIN"

async def show_search_interface(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∏—Å–∫–∞"""
    text = """üîç **–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞**

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

üí° **–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞
‚Ä¢ –æ–≤—Å—è–Ω–∫–∞
‚Ä¢ –∞–≤–æ–∫–∞–¥–æ
‚Ä¢ –≥—Ä–µ—á–∫–∞
‚Ä¢ —Ç–≤–æ—Ä–æ–≥"""
    
    keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    return "PRODUCT_SEARCH_NEW"

async def show_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    from products_database import PRODUCTS_DATABASE
    
    chat_id = update.message.chat_id
    user_goal = '–ø–æ—Ö—É–¥–µ–Ω–∏–µ'  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–∏
    
    text = f"üìä **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è {user_goal.replace('_', ' ').title()}:**\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 2-3 –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = ['—Å–ª–æ–∂–Ω—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã', '–±–µ–ª–∫–∏', '–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã', '–∫–ª–µ—Ç—á–∞—Ç–∫–∞']
    
    for category in categories:
        products = PRODUCTS_DATABASE.get(user_goal, {}).get(category, {})
        if products:
            category_names = {
                "—Å–ª–æ–∂–Ω—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": "üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã",
                "–ø—Ä–æ—Å—Ç—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": "‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã", 
                "–±–µ–ª–∫–∏": "ü•© –ë–µ–ª–∫–∏",
                "–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã": "ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã",
                "–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ_–∂–∏—Ä—ã": "üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã",
                "–∫–ª–µ—Ç—á–∞—Ç–∫–∞": "üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞"
            }
            
            text += f"**{category_names.get(category, category)}:**\n"
            for i, (name, data) in enumerate(list(products.items())[:3]):
                text += f"‚Ä¢ {name.title()} - {data['–∫–∞–ª–æ—Ä–∏–∏']} –∫–∫–∞–ª/100–≥"
                if '–æ–ø–∏—Å–∞–Ω–∏–µ' in data:
                    text += f" ({data['–æ–ø–∏—Å–∞–Ω–∏–µ']})"
                text += "\n"
            text += "\n"
    
    text += "üí° **–≠—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏!**\n\n"
    text += "üéØ **–°–æ–≤–µ—Ç—ã –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é:**\n"
    
    if user_goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ":
        text += "‚Ä¢ –ï—à—å—Ç–µ –±–æ–ª—å—à–µ –±–µ–ª–∫–æ–≤ –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–∏\n"
        text += "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã\n"
        text += "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ü–∏–∏\n"
    elif user_goal == "–Ω–∞–±–æ—Ä_–º–∞—Å—Å—ã":
        text += "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤\n"
        text += "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã\n"
        text += "‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã\n"
    else:
        text += "‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n"
        text += "‚Ä¢ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        text += "‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏\n"
    
    keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    return "PRODUCTS_MAIN"

async def return_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    chat_id = update.message.chat_id
    user_data_storage[chat_id] = {}
    
    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
    keyboard = [
        ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å'],
        ['üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'üìä –û –±–æ—Ç–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True, 
        one_time_keyboard=False
    )
    
    welcome_text = """üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitAdventure!**

–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º:
‚Ä¢ –í–∞—à–∏—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ –¶–µ–ª–µ–π –∏ –æ–ø—ã—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –£—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

üéÆ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞**
üìä **–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤: 98%**

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –∫ —Ç–µ–ª—É –º–µ—á—Ç—ã?"""

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return GENDER

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ FitAdventure Bot v5.0 Final...")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞
    try:
        TOKEN = setup_bot_token()
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except KeyboardInterrupt:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        sys.exit(1)
        
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    try:
        application = Application.builder().token(TOKEN).build()
        print("‚úÖ Telegram Application —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            GENDER: [
                MessageHandler(filters.Regex('^(üë® –ú—É–∂—á–∏–Ω–∞|üë© –ñ–µ–Ω—â–∏–Ω–∞|–º—É–∂—á–∏–Ω–∞|–ú—É–∂—á–∏–Ω–∞|–∂–µ–Ω—â–∏–Ω–∞|–ñ–µ–Ω—â–∏–Ω–∞)$'), gender),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons)
            ],
            AGE: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, age)
            ],
            WEIGHT: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, weight)
            ],
            HEIGHT: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, height)
            ],
            FAT_PERCENTAGE: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, fat_percentage)
            ],
            FAT_PERCENTAGE_INPUT: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, fat_percentage_input)
            ],
            GOAL: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, goal)
            ],
            HAS_TRAINING_EXPERIENCE: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, has_training_experience)
            ],
            TRAINING_EXPERIENCE: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, training_experience)
            ],
            TRAINING_DAYS: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, training_days)
            ],
            ACTIVITY_TYPE: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, activity_type)
            ],
            WORKOUT_DURATION: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, workout_duration)
            ],
            STEPS: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, steps)
            ],
            INTENSITY: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, intensity)
            ],
            RECOVERY: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, recovery)
            ],
            SLEEP_QUALITY: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, sleep_quality)
            ],
            STRESS_LEVEL: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, stress_level)
            ],
            OCCUPATION: [
                MessageHandler(filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å|‚ùì –ü–æ–º–æ—â—å|üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è|üìä –û –±–æ—Ç–µ)$'), handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, occupation)
            ],


            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            MINI_APPS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_mini_apps_navigation)
            ],
            PRODUCTS_MENU: [
                MessageHandler(filters.Regex('^(ü•© –ë–µ–ª–∫–∏|üçû –£–≥–ª–µ–≤–æ–¥—ã|üßà –ñ–∏—Ä—ã)$'), show_products_category),
                MessageHandler(filters.Regex('^(üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞|üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏|üîô –ù–∞–∑–∞–¥)$'), search_product_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, show_product_details)
            ],
            PRODUCT_SEARCH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, search_product_handler)
            ],
            
            # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            PRODUCTS_MAIN: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_products_navigation)
            ],
            PRODUCTS_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_products_navigation)
            ],
            PRODUCT_DETAILS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_products_navigation)
            ],
            PRODUCT_SEARCH_NEW: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_search)
            ],
            "WEBAPP_CHOICE": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons)
            ],
            
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('start', start))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback –∫–Ω–æ–ø–æ–∫ Web App
    from telegram.ext import CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(handle_webapp_callback))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Web App
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    

    
    logger.info("üöÄ FitAdventure Bot v5.0 Final –∑–∞–ø—É—â–µ–Ω!")
    logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
    print("\nüéØ FitAdventure Bot v5.0 Final –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üéÆ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞!")
    print("üìä –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 98%")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞")
    print("‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        application.run_polling()
    except KeyboardInterrupt:
        print("\n‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main() 