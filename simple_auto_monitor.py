#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
import time
import signal
import subprocess
from pathlib import Path
from datetime import datetime
import threading

class SimpleAutoMonitor:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self, project_path="/home/darksaiders/–ó–∞–≥—Ä—É–∑–∫–∏/–º–æ–π –±–æ—Ç2"):
        self.project_path = Path(project_path)
        self.running = True
        self.last_check = 0
        self.check_interval = 10  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        self.fix_cooldown = 30    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        self.last_fix_time = 0
        
    def detect_conflicts(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ"""
        conflict_files = []
        
        # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
        patterns = ["*.lock", "*.tmp", "*.temp", "*~", "*.swp", "*.swo"]
        
        for pattern in patterns:
            for file in self.project_path.glob(pattern):
                conflict_files.append(file)
                
        return conflict_files
    
    def check_cursor_processes(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Cursor –Ω–∞ –∑–∞–≤–∏—Å–∞–Ω–∏–µ"""
        try:
            result = subprocess.run(['ps', 'aux'], 
                                  capture_output=True, text=True)
            cursor_processes = [line for line in result.stdout.split('\n') 
                              if 'cursor' in line.lower()]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            problem_processes = []
            for proc in cursor_processes:
                if any(keyword in proc.lower() for keyword in ['defunct', '<zombie>', 'stuck']):
                    problem_processes.append(proc)
                    
            return len(cursor_processes), problem_processes
            
        except:
            return 0, []
    
    def auto_fix(self, reason="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã"):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        if current_time - self.last_fix_time < self.fix_cooldown:
            return False
            
        print(f"üö® [{datetime.now().strftime('%H:%M:%S')}] {reason} - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            result = subprocess.run([
                sys.executable, 
                str(self.project_path / "simple_fix.py")
            ], cwd=self.project_path, check=False, capture_output=True, text=True)
            
            self.last_fix_time = current_time
            
            print(f"‚úÖ [{datetime.now().strftime('%H:%M:%S')}] –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.send_notification("–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
            return True
            
        except Exception as e:
            print(f"‚ùå [{datetime.now().strftime('%H:%M:%S')}] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def send_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            subprocess.run(['notify-send', 'Auto-Fix Monitor', message], 
                         check=False, timeout=5)
        except:
            print(f"üì¢ {message}")
    
    def monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üõ°Ô∏è –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        print(f"üìÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –ø–∞–ø–∫–∞: {self.project_path}")
        print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 60)
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        conflicts = self.detect_conflicts()
        if conflicts:
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {len(conflicts)}")
            self.auto_fix("–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
        
        print("‚úÖ –ê–≤—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω!")
        
        while self.running:
            try:
                current_time = time.time()
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                if current_time - self.last_check >= self.check_interval:
                    self.last_check = current_time
                    
                    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    conflicts = self.detect_conflicts()
                    if conflicts:
                        print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {len(conflicts)}")
                        self.auto_fix(f"–ù–∞–π–¥–µ–Ω–æ {len(conflicts)} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
                    
                    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Cursor
                    cursor_count, problems = self.check_cursor_processes()
                    if problems:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Cursor: {len(problems)}")
                        self.auto_fix("–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Cursor")
                    
                    # 3. –¢–∏—Ö–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                    if current_time % 300 == 0:  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                        print(f"üìä [{datetime.now().strftime('%H:%M:%S')}] "
                              f"–°—Ç–∞—Ç—É—Å: –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Cursor: {cursor_count}, "
                              f"–∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {len(conflicts)}")
                
                time.sleep(1)  # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(5)
        
        print("\nüõë –ê–≤—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = False

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    sys.exit(0)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        monitor = SimpleAutoMonitor()
        monitor.monitor_loop()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 