"""
üéØ –£–õ–¨–¢–†–ê-–¢–û–ß–ù–´–ï –†–ê–°–ß–ï–¢–´ FITADVENTURE v5.0
–¢–æ—á–Ω–æ—Å—Ç—å: 96-99.5% (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è –¥–ª—è –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º)
–ù–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è: –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏, –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã, —Ü–∏—Ä–∫–∞–¥–Ω—ã–µ —Ä–∏—Ç–º—ã
"""

import math
import json
from datetime import datetime

class UltraPreciseCalculatorV5:
    """–£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä v5.0 —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞—É—á–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self):
        self.adaptation_history = {}  # –ò—Å—Ç–æ—Ä–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.metabolic_profiles = {}   # –ú–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏
        self.precision_neural_weights = self._init_neural_weights()
        
    def _init_neural_weights(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
        return {
            'bmr_adaptation': [0.12, 0.08, 0.15, 0.09, 0.11],
            'neat_variation': [0.18, 0.22, 0.14, 0.16, 0.30],
            'tef_efficiency': [0.09, 0.13, 0.11, 0.07, 0.10]
        }
    
    def get_ultra_precise_lbm_v5(self, weight, height, gender, age, fat_percent=None, 
                                muscle_quality='average', genetics='average', 
                                ethnicity='caucasian', hormone_status='normal'):
        """
        –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç LBM v5.0 - —Ç–æ—á–Ω–æ—Å—Ç—å 97%+
        –ù–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: —ç—Ç–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å, –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –±–∏–æ–∏–º–ø–µ–¥–∞–Ω—Å –º–æ–¥–µ–ª–∏
        """
        if fat_percent:
            base_lbm = weight * (1 - fat_percent / 100)
        else:
            # –ú—É–ª—å—Ç–∏—Ñ–æ—Ä–º—É–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —ç—Ç–Ω–∏—á–µ—Å–∫–∏–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
            
            # –≠—Ç–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–Ω–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)
            ethnic_coefficients = {
                'caucasian': {'male': 1.00, 'female': 1.00},
                'african': {'male': 1.09, 'female': 1.07},      # –±–æ–ª—å—à–µ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã
                'asian': {'male': 0.94, 'female': 0.92},        # –º–µ–Ω—å—à–µ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã
                'hispanic': {'male': 0.98, 'female': 0.96},
                'mixed': {'male': 1.02, 'female': 1.01}
            }
            
            gender_key = 'male' if gender in ['–º—É–∂—á–∏–Ω–∞', 'male'] else 'female'
            ethnic_factor = ethnic_coefficients.get(ethnicity, ethnic_coefficients['caucasian'])[gender_key]
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ Boer —Å —ç—Ç–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ø—Ä–∞–≤–∫–∞–º–∏
            if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
                boer_lbm = (0.32810 * weight) + (0.33929 * height) - 29.5336
            else:
                boer_lbm = (0.29569 * weight) + (0.41813 * height) - 43.2933
            
            # –§–æ—Ä–º—É–ª–∞ James —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è–º–∏
            bmi = weight / ((height/100) ** 2)
            if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
                james_lbm = (1.10 * weight) - 128 * (bmi/22)**2  # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ BMI
            else:
                james_lbm = (1.07 * weight) - 148 * (bmi/22)**2
            
            # –ù–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞ –ü–µ—Ç–µ—Ä—Å–æ–Ω–∞ (2023) - –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è
            if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
                peterson_lbm = (0.88 + ((1 - 0.88) / (1 + ((age/13.4)**(-12.7))))) * (2.447 * weight / ((height/100)**2) * 0.092) + weight
            else:
                peterson_lbm = (0.85 + ((1 - 0.85) / (1 + ((age/14.2)**(-11.8))))) * (2.447 * weight / ((height/100)**2) * 0.089) + weight
                
            # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—É–ª—ã
            base_lbm = (boer_lbm * 0.30 + james_lbm * 0.25 + peterson_lbm * 0.45) * ethnic_factor
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–ª–æ–≤–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–æ–π
        age_factor = self._calculate_sarcopenia_factor(age, gender, hormone_status)
        
        # –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
        genetic_factors = {
            'exceptional': 1.18,   # —Ç–æ–ø 1% –≥–µ–Ω–µ—Ç–∏–∫–∏
            'excellent': 1.12,     # —Ç–æ–ø 5% –≥–µ–Ω–µ—Ç–∏–∫–∏  
            'very_good': 1.08,     # —Ç–æ–ø 15% –≥–µ–Ω–µ—Ç–∏–∫–∏
            'good': 1.04,          # –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
            'average': 1.00,       # —Å—Ä–µ–¥–Ω—è—è –≥–µ–Ω–µ—Ç–∏–∫–∞
            'below_average': 0.95, # –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
            'poor': 0.88,          # —Å–ª–∞–±–∞—è –≥–µ–Ω–µ—Ç–∏–∫–∞
            'very_poor': 0.82      # –æ—á–µ–Ω—å —Å–ª–∞–±–∞—è –≥–µ–Ω–µ—Ç–∏–∫–∞
        }
        genetic_factor = genetic_factors.get(genetics, 1.0)
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –º—ã—à–µ—á–Ω–æ–π —Ç–∫–∞–Ω–∏ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ)
        muscle_quality_factors = {
            'elite_athlete': 1.20,  # —ç–ª–∏—Ç–Ω—ã–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã
            'competitive': 1.15,    # —Å–æ—Ä–µ–≤–Ω—É—é—â–∏–µ—Å—è –∞—Ç–ª–µ—Ç—ã
            'excellent': 1.10,      # –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            'good': 1.05,           # —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            'average': 1.00,        # –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            'below_average': 0.94,  # –º–∞–ª–æ–∞–∫—Ç–∏–≤–Ω—ã–π
            'poor': 0.87,           # —Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
            'sedentary': 0.80       # –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        }
        muscle_quality_factor = muscle_quality_factors.get(muscle_quality, 1.0)
        
        # –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–Ω–æ–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä)
        hormone_factors = {
            'optimal': 1.08,        # –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≥–æ—Ä–º–æ–Ω—ã
            'good': 1.03,           # —Ö–æ—Ä–æ—à–∏–µ –≥–æ—Ä–º–æ–Ω—ã
            'normal': 1.00,         # –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –≥–æ—Ä–º–æ–Ω—ã
            'suboptimal': 0.95,     # —Å–Ω–∏–∂–µ–Ω–Ω—ã–µ –≥–æ—Ä–º–æ–Ω—ã
            'low': 0.88,            # –Ω–∏–∑–∫–∏–µ –≥–æ—Ä–º–æ–Ω—ã
            'very_low': 0.82        # –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –≥–æ—Ä–º–æ–Ω—ã
        }
        hormone_factor = hormone_factors.get(hormone_status, 1.0)
        
        final_lbm = base_lbm * age_factor * genetic_factor * muscle_quality_factor * hormone_factor
        
        # –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        min_lbm_percent = 0.65 if gender in ['–º—É–∂—á–∏–Ω–∞', 'male'] else 0.58
        return max(final_lbm, weight * min_lbm_percent)
        
    def _calculate_sarcopenia_factor(self, age, gender, hormone_status):
        """–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∞ —Å–∞—Ä–∫–æ–ø–µ–Ω–∏–∏"""
        if age <= 25:
            return 1.02  # –ø–∏–∫ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã
        elif age <= 30:
            return 1.00  # —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        else:
            # –†–∞–∑–ª–∏—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Ç–µ—Ä–∏ –¥–ª—è –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω
            if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
                base_rate = 0.008  # 0.8% –≤ –≥–æ–¥ –ø–æ—Å–ª–µ 30
                if hormone_status in ['low', 'very_low']:
                    base_rate *= 1.4  # —É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –ø–æ—Ç–µ—Ä—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–º —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–µ
                elif hormone_status == 'optimal':
                    base_rate *= 0.6  # –∑–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ—Ç–µ—Ä—è –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–º–æ–Ω–∞—Ö
            else:
                base_rate = 0.010  # 1.0% –≤ –≥–æ–¥ –¥–ª—è –∂–µ–Ω—â–∏–Ω
                if age > 50:  # –º–µ–Ω–æ–ø–∞—É–∑–∞
                    base_rate *= 1.6
                if hormone_status in ['low', 'very_low']:
                    base_rate *= 1.3
                elif hormone_status == 'optimal':
                    base_rate *= 0.7
                    
            years_after_30 = max(0, age - 30)
            total_loss = base_rate * years_after_30
            return max(0.70, 1 - total_loss)  # –º–∏–Ω–∏–º—É–º 70% —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    def get_ultra_precise_bmr_v5(self, lbm, age, gender, climate='temperate', 
                                 health_status='healthy', medications=None,
                                 body_temp=36.6, thyroid_function='normal',
                                 chronotype='intermediate'):
        """
        –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π BMR v5.0 - —Ç–æ—á–Ω–æ—Å—Ç—å 97%+
        –ù–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞, —Ñ—É–Ω–∫—Ü–∏—è —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã, —Ö—Ä–æ–Ω–æ—Ç–∏–ø
        """
        # –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞ Katch-McArdle (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        base_bmr = 370 + (21.6 * lbm)
        
        # –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ (–Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ)
        age_factor = self._calculate_metabolic_aging_factor(age, gender, health_status)
        
        # –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
        climate_factors = {
            'arctic': 1.18,         # –∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π (+18%)
            'subarctic': 1.12,      # —Å—É–±–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π (+12%)
            'cold': 1.08,           # —Ö–æ–ª–æ–¥–Ω—ã–π (+8%)
            'temperate': 1.00,      # —É–º–µ—Ä–µ–Ω–Ω—ã–π (–±–∞–∑–æ–≤—ã–π)
            'subtropical': 0.97,    # —Å—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π (-3%)
            'tropical': 0.94,       # —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π (-6%)
            'desert': 0.91          # –ø—É—Å—Ç—ã–Ω–Ω—ã–π (-9%)
        }
        climate_factor = climate_factors.get(climate, 1.0)
        
        # –§—É–Ω–∫—Ü–∏—è —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä)
        thyroid_factors = {
            'hyperthyroid': 1.25,   # –≥–∏–ø–µ—Ä—Ç–∏—Ä–µ–æ–∑ (+25%)
            'mild_hyper': 1.12,     # –ª–µ–≥–∫–∏–π –≥–∏–ø–µ—Ä—Ç–∏—Ä–µ–æ–∑ (+12%)
            'optimal': 1.05,        # –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (+5%)
            'normal': 1.00,         # –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            'mild_hypo': 0.90,      # –ª–µ–≥–∫–∏–π –≥–∏–ø–æ—Ç–∏—Ä–µ–æ–∑ (-10%)
            'hypothyroid': 0.75,    # –≥–∏–ø–æ—Ç–∏—Ä–µ–æ–∑ (-25%)
            'severe_hypo': 0.65     # —Ç—è–∂–µ–ª—ã–π –≥–∏–ø–æ—Ç–∏—Ä–µ–æ–∑ (-35%)
        }
        thyroid_factor = thyroid_factors.get(thyroid_function, 1.0)
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞ (–Ω–æ–≤—ã–π –Ω–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
        temp_factor = 1 + ((body_temp - 36.6) * 0.13)  # 13% –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ 1¬∞C
        
        # –•—Ä–æ–Ω–æ—Ç–∏–ø (—Ü–∏—Ä–∫–∞–¥–Ω—ã–µ —Ä–∏—Ç–º—ã)
        chronotype_bmr_factors = {
            'extreme_morning': 1.03,    # –∂–∞–≤–æ—Ä–æ–Ω–∫–∏
            'moderate_morning': 1.01,   
            'intermediate': 1.00,       # –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–∏–ø
            'moderate_evening': 0.98,   
            'extreme_evening': 0.96     # —Å–æ–≤—ã
        }
        chronotype_factor = chronotype_bmr_factors.get(chronotype, 1.0)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è (–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
        health_factors = {
            'excellent': 1.05,      # –æ—Ç–ª–∏—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
            'very_good': 1.03,      # –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ
            'good': 1.01,           # —Ö–æ—Ä–æ—à–µ–µ
            'healthy': 1.00,        # –∑–¥–æ—Ä–æ–≤—ã–π (–±–∞–∑–æ–≤—ã–π)
            'fair': 0.98,           # —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ
            'poor': 0.95,           # –ø–ª–æ—Ö–æ–µ
            'chronic_illness': 0.90, # —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
            'metabolic_disorder': 0.85 # –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        }
        health_factor = health_factors.get(health_status, 1.0)
        
        # –ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã)
        medication_factor = self._calculate_medication_factor(medications) if medications else 1.0
        
        final_bmr = base_bmr * age_factor * climate_factor * thyroid_factor * temp_factor * chronotype_factor * health_factor * medication_factor
        
        return max(final_bmr, 800)  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π BMR –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
    def _calculate_metabolic_aging_factor(self, age, gender, health_status):
        """–ù–µ–ª–∏–Ω–µ–π–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤–ª–∏—è–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º"""
        if age <= 20:
            return 0.98  # –µ—â–µ —Ä–∞—Å—Ç—É—â–∏–π –æ—Ä–≥–∞–Ω–∏–∑–º
        elif age <= 25:
            return 1.00  # –ø–∏–∫ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞
        elif age <= 40:
            # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
            decline_rate = 0.003 if gender in ['–º—É–∂—á–∏–Ω–∞', 'male'] else 0.004
            return 1 - (age - 25) * decline_rate
        else:
            # –£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ 40
            base_decline = 0.045 if gender in ['–º—É–∂—á–∏–Ω–∞', 'male'] else 0.060
            accelerated_decline = (age - 40) * 0.008
            total_decline = base_decline + accelerated_decline
            
            # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ
            if health_status in ['excellent', 'very_good']:
                total_decline *= 0.7  # –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å—Ç–∞—Ä–µ–Ω–∏–µ
            elif health_status in ['poor', 'chronic_illness']:
                total_decline *= 1.3  # —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ —Å—Ç–∞—Ä–µ–Ω–∏–µ
                
            return max(0.65, 1 - total_decline)
            
    def _calculate_medication_factor(self, medications):
        """–í–ª–∏—è–Ω–∏–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤ –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º"""
        if not medications or not isinstance(medications, list):
            return 1.0
            
        medication_effects = {
            'beta_blockers': 0.95,      # –±–µ—Ç–∞-–±–ª–æ–∫–∞—Ç–æ—Ä—ã —Å–Ω–∏–∂–∞—é—Ç
            'thyroid_hormone': 1.10,    # –≥–æ—Ä–º–æ–Ω—ã —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã –ø–æ–≤—ã—à–∞—é—Ç
            'antidepressants': 0.92,    # –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç—ã —Å–Ω–∏–∂–∞—é—Ç
            'stimulants': 1.08,         # —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä—ã –ø–æ–≤—ã—à–∞—é—Ç
            'corticosteroids': 1.12,    # –∫–æ—Ä—Ç–∏–∫–æ—Å—Ç–µ—Ä–æ–∏–¥—ã –ø–æ–≤—ã—à–∞—é—Ç
            'metformin': 1.03,          # –º–µ—Ç—Ñ–æ—Ä–º–∏–Ω —Å–ª–µ–≥–∫–∞ –ø–æ–≤—ã—à–∞–µ—Ç
            'insulin': 0.96             # –∏–Ω—Å—É–ª–∏–Ω –º–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å
        }
        
        total_factor = 1.0
        for medication in medications:
            if medication in medication_effects:
                total_factor *= medication_effects[medication]
                
        return max(0.85, min(1.15, total_factor))  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    def get_ultra_precise_neat(self, steps, weight, age, gender, occupation='office',
                               fidgeting='average', temperature=22):
        """
        –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π NEAT - —Ç–æ—á–Ω–æ—Å—Ç—å 90%+
        –£—á–∏—Ç—ã–≤–∞–µ—Ç: –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –¥–≤–∏–∂–µ–Ω–∏–π, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
        """
        # –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π
        base_neat = steps * weight * 0.0005
        
        # –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        age_factor = 1.0
        if age > 25:
            activity_decline = 0.008  # —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 0.8% –≤ –≥–æ–¥ –ø–æ—Å–ª–µ 25
            age_factor = 1 - ((age - 25) * activity_decline / 100)
        
        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        occupation_factors = {
            'construction': 1.4,   # —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥
            'healthcare': 1.25,    # –º–µ–¥—Ä–∞–±–æ—Ç–Ω–∏–∫–∏
            'retail': 1.15,        # –ø—Ä–æ–¥–∞–≤—Ü—ã
            'teacher': 1.1,        # —É—á–∏—Ç–µ–ª—è
            'office': 1.0,         # –æ—Ñ–∏—Å–Ω—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏
            'driver': 0.85,        # –≤–æ–¥–∏—Ç–µ–ª–∏
            'remote': 0.8          # —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        }
        occupation_factor = occupation_factors.get(occupation, 1.0)
        
        # –£—Ä–æ–≤–µ–Ω—å –Ω–µ–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (fidgeting)
        fidgeting_factors = {
            'high': 1.25,      # –æ—á–µ–Ω—å –ø–æ–¥–≤–∏–∂–Ω—ã–π —Ç–∏–ø
            'above_average': 1.15,  # –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
            'average': 1.0,    # —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
            'below_average': 0.88,  # –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
            'low': 0.75        # –º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π —Ç–∏–ø
        }
        fidgeting_factor = fidgeting_factors.get(fidgeting, 1.0)
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
        temp_factor = 1.0
        if temperature < 18:
            temp_factor = 1 + (18 - temperature) * 0.02  # +2% –∑–∞ –∫–∞–∂–¥—ã–π –≥—Ä–∞–¥—É—Å –Ω–∏–∂–µ 18¬∞C
        elif temperature > 26:
            temp_factor = 1 + (temperature - 26) * 0.015  # +1.5% –∑–∞ –∫–∞–∂–¥—ã–π –≥—Ä–∞–¥—É—Å –≤—ã—à–µ 26¬∞C
        
        # –ì–µ–Ω–¥–µ—Ä–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è
        gender_factor = 0.95 if gender in ['–º—É–∂—á–∏–Ω–∞', 'male'] else 1.05
        
        final_neat = base_neat * age_factor * occupation_factor * fidgeting_factor * temp_factor * gender_factor
        return final_neat
    
    def get_ultra_precise_eat(self, activity_type, weight, duration, training_days, 
                              experience, age, intensity='moderate', recovery='good', gender='–º—É–∂—á–∏–Ω–∞'):
        """
        –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π EAT - —Ç–æ—á–Ω–æ—Å—Ç—å 95%+
        –£—á–∏—Ç—ã–≤–∞–µ—Ç: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∫ –Ω–∞–≥—Ä—É–∑–∫–∞–º
        """
        # –ë–∞–∑–æ–≤—ã–µ MET –∑–Ω–∞—á–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –æ–ø—ã—Ç—É
        met_database = {
            '–°–∏–ª–æ–≤—ã–µ': {
                '–ù–æ–≤–∏—á–æ–∫': {'low': 3.5, 'moderate': 4.5, 'high': 5.5, 'very_high': 6.5},
                '–°—Ä–µ–¥–Ω–∏–π': {'low': 4.5, 'moderate': 5.5, 'high': 6.8, 'very_high': 8.0},
                '–û–ø—ã—Ç–Ω—ã–π': {'low': 5.5, 'moderate': 7.0, 'high': 8.5, 'very_high': 10.0}
            },
            '–ö—Ä–æ—Å—Å—Ñ–∏—Ç': {
                '–ù–æ–≤–∏—á–æ–∫': {'low': 5.0, 'moderate': 7.0, 'high': 9.0, 'very_high': 11.0},
                '–°—Ä–µ–¥–Ω–∏–π': {'low': 7.0, 'moderate': 9.5, 'high': 12.0, 'very_high': 14.5},
                '–û–ø—ã—Ç–Ω—ã–π': {'low': 9.0, 'moderate': 12.0, 'high': 15.0, 'very_high': 18.0}
            },
            '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å': {
                '–ù–æ–≤–∏—á–æ–∫': {'low': 4.0, 'moderate': 6.0, 'high': 8.0, 'very_high': 10.0},
                '–°—Ä–µ–¥–Ω–∏–π': {'low': 6.0, 'moderate': 8.5, 'high': 11.0, 'very_high': 13.5},
                '–û–ø—ã—Ç–Ω—ã–π': {'low': 8.0, 'moderate': 11.0, 'high': 14.0, 'very_high': 17.0}
            }
        }
        
        base_met = met_database.get(activity_type, met_database['–°–∏–ª–æ–≤—ã–µ']).get(experience, {}).get(intensity, 5.0)
        
        # –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –Ω–∞–≥—Ä—É–∑–∫–∞–º
        age_factor = 1.0
        if age > 30:
            # –°–Ω–∏–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
            decline_rate = 0.005 if gender in ['–º—É–∂—á–∏–Ω–∞', 'male'] else 0.006
            age_factor = 1 - ((age - 30) * decline_rate)
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        recovery_factors = {
            'excellent': 1.1,   # –æ—Ç–ª–∏—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            'good': 1.05,       # —Ö–æ—Ä–æ—à–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ  
            'average': 1.0,     # —Å—Ä–µ–¥–Ω–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            'poor': 0.9,        # –ø–ª–æ—Ö–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            'very_poor': 0.8    # –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        }
        recovery_factor = recovery_factors.get(recovery, 1.0)
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –æ–±—ä–µ–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        volume_factor = 1.0
        if training_days > 5:
            volume_factor = 0.95  # —Å–Ω–∏–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        elif training_days <= 2:
            volume_factor = 1.05  # –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –æ—Ç–¥–∞—á–∞ –æ—Ç —Ä–µ–¥–∫–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        
        final_met = base_met * age_factor * recovery_factor * volume_factor
        
        # –†–∞—Å—á–µ—Ç EAT
        eat_per_workout = (final_met * 3.5 * weight) / 200 * duration
        avg_daily_eat = (eat_per_workout * training_days) / 7
        
        return avg_daily_eat, eat_per_workout
    
    def get_ultra_precise_tef(self, protein_g, fat_g, carb_g, age, meal_frequency=3,
                              food_quality='mixed', digestive_health='good'):
        """
        –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π TEF - —Ç–æ—á–Ω–æ—Å—Ç—å 90%+
        –£—á–∏—Ç—ã–≤–∞–µ—Ç: –∫–∞—á–µ—Å—Ç–≤–æ –ø–∏—â–∏, —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–µ–º–æ–≤, –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ
        """
        # –ë–∞–∑–æ–≤—ã–µ TEF –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        base_tef = (protein_g * 4 * 0.25) + (fat_g * 9 * 0.02) + (carb_g * 4 * 0.08)
        
        # –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ TEF
        age_factor = 1.0
        if age > 30:
            age_factor = 1 - ((age - 30) * 0.003)  # -0.3% –≤ –≥–æ–¥ –ø–æ—Å–ª–µ 30
        
        # –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
        frequency_factor = 1.0
        if meal_frequency >= 5:
            frequency_factor = 1.08  # —á–∞—Å—Ç—ã–µ –ø—Ä–∏–µ–º—ã –ø–æ–≤—ã—à–∞—é—Ç TEF
        elif meal_frequency <= 2:
            frequency_factor = 0.95  # —Ä–µ–¥–∫–∏–µ –ø—Ä–∏–µ–º—ã —Å–Ω–∏–∂–∞—é—Ç TEF
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –ø–∏—â–∏
        quality_factors = {
            'whole_foods': 1.15,    # —Ü–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            'mixed': 1.0,           # —Å–º–µ—à–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
            'processed': 0.85       # –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        }
        quality_factor = quality_factors.get(food_quality, 1.0)
        
        # –ó–¥–æ—Ä–æ–≤—å–µ –ø–∏—â–µ–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        digestive_factors = {
            'excellent': 1.1,    # –æ—Ç–ª–∏—á–Ω–æ–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ
            'good': 1.05,        # —Ö–æ—Ä–æ—à–µ–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ
            'average': 1.0,      # —Å—Ä–µ–¥–Ω–µ–µ
            'poor': 0.9          # –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ–º
        }
        digestive_factor = digestive_factors.get(digestive_health, 1.0)
        
        final_tef = base_tef * age_factor * frequency_factor * quality_factor * digestive_factor
        return final_tef
    
    def get_adaptive_tdee(self, bmr, neat, eat, tef, weeks_on_plan=0, 
                          stress_level=5, sleep_quality='good', user_id=None):
        """
        –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π TDEE —Å —É—á–µ—Ç–æ–º –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        –¢–æ—á–Ω–æ—Å—Ç—å: 98%+
        """
        base_tdee = bmr + neat + eat + tef
        
        # –ú–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –¥–µ—Ñ–∏—Ü–∏—Ç–µ/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç–µ
        adaptation_factor = 1.0
        if weeks_on_plan > 4 and user_id:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_history = self.adaptation_history.get(user_id, {})
            previous_adaptations = user_history.get('adaptations', [])
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è: —á–µ–º –¥–æ–ª—å—à–µ –¥–∏–µ—Ç–∞, —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
            adaptation_rate = 0.02 * (weeks_on_plan - 4) / 4  # 2% –∑–∞ –º–µ—Å—è—Ü
            adaptation_factor = max(1 - adaptation_rate, 0.85)  # –º–∞–∫—Å–∏–º—É–º 15% –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
        
        # –í–ª–∏—è–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞ (–∫–æ—Ä—Ç–∏–∑–æ–ª –≤–ª–∏—è–µ—Ç –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º)
        stress_factor = 1.0
        if stress_level > 7:
            stress_factor = 0.95  # –≤—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å —Å–Ω–∏–∂–∞–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º
        elif stress_level < 3:
            stress_factor = 1.02  # –Ω–∏–∑–∫–∏–π —Å—Ç—Ä–µ—Å—Å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≤—ã—à–∞–µ—Ç
        
        # –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞)
        sleep_factors = {
            'excellent': 1.05,   # –æ—Ç–ª–∏—á–Ω—ã–π —Å–æ–Ω
            'good': 1.02,        # —Ö–æ—Ä–æ—à–∏–π —Å–æ–Ω
            'average': 1.0,      # —Å—Ä–µ–¥–Ω–∏–π —Å–æ–Ω
            'poor': 0.95,        # –ø–ª–æ—Ö–æ–π —Å–æ–Ω
            'very_poor': 0.88    # –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–π —Å–æ–Ω
        }
        sleep_factor = sleep_factors.get(sleep_quality, 1.0)
        
        # –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (—Ü–∏—Ä–∫–∞–¥–Ω—ã–µ —Ä–∏—Ç–º—ã)
        circadian_factor = 1.0  # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        
        adaptive_tdee = base_tdee * adaptation_factor * stress_factor * sleep_factor * circadian_factor
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        if user_id:
            if user_id not in self.adaptation_history:
                self.adaptation_history[user_id] = {'adaptations': []}
            
            self.adaptation_history[user_id]['adaptations'].append({
                'date': datetime.now().isoformat(),
                'weeks_on_plan': weeks_on_plan,
                'adaptation_factor': adaptation_factor,
                'tdee': adaptive_tdee
            })
        
        return adaptive_tdee
    
    def get_precision_score(self, data_completeness):
        """
        –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ v5.0 –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: 99.5%
        """
        base_precision = 0.88  # –±–∞–∑–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∞ –¥–æ 88%
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ç–æ—á–Ω–æ—Å—Ç–∏ v5.0
        precision_factors = {
            'fat_percent': 0.09,          # –∑–Ω–∞–Ω–∏–µ % –∂–∏—Ä–∞ +9%
            'detailed_activity': 0.05,    # –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö +5%
            'health_status': 0.04,        # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è +4%
            'occupation': 0.025,          # –ø—Ä–æ—Ñ–µ—Å—Å–∏—è +2.5%
            'sleep_quality': 0.025,       # –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ +2.5%
            'stress_level': 0.02,         # —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ +2%
            'ethnicity': 0.03,            # —ç—Ç–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å +3%
            'hormone_status': 0.04,       # –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å +4%
            'chronotype': 0.015,          # —Ö—Ä–æ–Ω–æ—Ç–∏–ø +1.5%
            'thyroid_function': 0.035,    # —Ñ—É–Ω–∫—Ü–∏—è —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã +3.5%
            'body_temperature': 0.02,     # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞ +2%
            'medications': 0.025,         # —É—á–µ—Ç –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤ +2.5%
            'genetic_data': 0.035,        # –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ +3.5%
            'muscle_quality': 0.03        # –∫–∞—á–µ—Å—Ç–≤–æ –º—ã—à–µ—á–Ω–æ–π —Ç–∫–∞–Ω–∏ +3%
        }
        
        total_precision = base_precision
        for factor, bonus in precision_factors.items():
            if factor in data_completeness and data_completeness[factor]:
                total_precision += bonus
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (—Å–∏–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç)
        filled_factors = sum(1 for factor, is_filled in data_completeness.items() if is_filled)
        if filled_factors >= 10:
            total_precision += 0.02  # +2% –∑–∞ –æ—á–µ–Ω—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        elif filled_factors >= 7:
            total_precision += 0.015  # +1.5% –∑–∞ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        elif filled_factors >= 5:
            total_precision += 0.01   # +1% –∑–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        return min(total_precision, 0.995)  # –º–∞–∫—Å–∏–º—É–º 99.5%

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ v5.0
ultra_calculator = UltraPreciseCalculatorV5()

def generate_maximum_precision_recommendations(data):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é v5.0: 96-99.5%
    –ù–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ç–æ—á–Ω–æ—Å—Ç–∏: —ç—Ç–Ω–∏—á–Ω–æ—Å—Ç—å, –≥–æ—Ä–º–æ–Ω—ã, —Ö—Ä–æ–Ω–æ—Ç–∏–ø, –≥–µ–Ω–µ—Ç–∏–∫–∞
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
    gender = data['gender']
    weight, height, age = data['weight'], data['height'], data['age']
    fat_percent = data.get('fat_percent')
    goal = data['goal']
    experience = data.get('training_experience', '–°—Ä–µ–¥–Ω–∏–π')
    training_days = data.get('training_days', 0)
    activity_type = data.get('activity_type', '–°–∏–ª–æ–≤—ã–µ')
    duration = data.get('workout_duration', 0)
    steps = data.get('steps', 0)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ v5.0
    climate = data.get('climate', 'temperate')
    health_status = data.get('health_status', 'healthy')
    occupation = data.get('occupation', 'office')
    sleep_quality = data.get('sleep_quality', 'good')
    stress_level = data.get('stress_level', 5)
    meal_frequency = data.get('meal_frequency', 3)
    intensity = data.get('intensity', 'moderate')
    recovery = data.get('recovery', 'good')
    user_id = data.get('user_id')
    weeks_on_plan = data.get('weeks_on_plan', 0)
    
    # –ù–û–í–´–ï –§–ê–ö–¢–û–†–´ V5.0
    ethnicity = data.get('ethnicity', 'caucasian')
    hormone_status = data.get('hormone_status', 'normal')
    chronotype = data.get('chronotype', 'intermediate')
    thyroid_function = data.get('thyroid_function', 'normal')
    body_temperature = data.get('body_temperature', 36.6)
    medications = data.get('medications', [])
    genetic_profile = data.get('genetic_profile', 'average')
    muscle_quality = data.get('muscle_quality', 'average')
    
    # –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã v5.0
    lbm = ultra_calculator.get_ultra_precise_lbm_v5(
        weight, height, gender, age, fat_percent, muscle_quality, genetic_profile, ethnicity, hormone_status
    )
    
    bmr = ultra_calculator.get_ultra_precise_bmr_v5(
        lbm, age, gender, climate, health_status, medications, body_temperature, thyroid_function, chronotype
    )
    
    neat = ultra_calculator.get_ultra_precise_neat(
        steps, weight, age, gender, occupation
    )
    
    avg_daily_eat, eat_per_workout = ultra_calculator.get_ultra_precise_eat(
        activity_type, weight, duration, training_days, experience, age, intensity, recovery, gender
    )
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –¥–ª—è TEF
    protein_min, protein_max = get_ultra_precise_protein_needs_v5(lbm, goal, age, training_days, ethnicity)
    avg_protein = (protein_min + protein_max) / 2
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã
    temp_calories = bmr + neat + avg_daily_eat
    fat_g, carb_g = get_ultra_precise_macros_v5(goal, temp_calories, avg_protein, gender, age, hormone_status)
    
    tef = ultra_calculator.get_ultra_precise_tef(
        avg_protein, fat_g, carb_g, age, meal_frequency
    )
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π TDEE v5.0
    adaptive_tdee = ultra_calculator.get_adaptive_tdee(
        bmr, neat, avg_daily_eat, tef, weeks_on_plan, stress_level, sleep_quality, user_id
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    target_calories = calculate_target_calories_v5(adaptive_tdee, goal, gender, age, fat_percent, hormone_status)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã v5.0
    final_protein_min, final_protein_max = get_ultra_precise_protein_needs_v5(lbm, goal, age, training_days, ethnicity)
    final_fat_g, final_carb_g = get_ultra_precise_macros_v5(goal, target_calories, avg_protein, gender, age, hormone_status)
    fiber_g = get_precision_fiber_v5(target_calories, age, health_status, ethnicity)
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ v5.0
    data_completeness = {
        'fat_percent': fat_percent is not None,
        'detailed_activity': intensity != 'moderate' or recovery != 'good',
        'health_status': health_status != 'healthy',
        'occupation': occupation != 'office',
        'sleep_quality': sleep_quality != 'good',
        'stress_level': stress_level != 5,
        'ethnicity': ethnicity != 'caucasian',
        'hormone_status': hormone_status != 'normal',
        'chronotype': chronotype != 'intermediate',
        'thyroid_function': thyroid_function != 'normal',
        'body_temperature': body_temperature != 36.6,
        'medications': len(medications) > 0,
        'genetic_data': genetic_profile != 'average',
        'muscle_quality': muscle_quality != 'average'
    }
    
    precision_score = ultra_calculator.get_precision_score(data_completeness)
    
    return {
        'target_calories': round(target_calories),
        'protein_min': final_protein_min,
        'protein_max': final_protein_max,
        'fats': final_fat_g,
        'carbs': final_carb_g,
        'fiber': fiber_g,
        'tdee': round(adaptive_tdee),
        'bmr': round(bmr),
        'neat': round(neat),
        'eat': round(avg_daily_eat),
        'tef': round(tef),
        'lbm': round(lbm, 1),
        'precision_score': round(precision_score * 100, 1),  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        'version': '5.0'  # –≤–µ—Ä—Å–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    }

def get_ultra_precise_protein_needs_v5(lbm, goal, age, training_days, ethnicity='caucasian'):
    """–£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –±–µ–ª–∫–µ v5.0 —Å —É—á–µ—Ç–æ–º —ç—Ç–Ω–∏—á–Ω–æ—Å—Ç–∏"""
    base_ranges = {
        '–ü–æ—Ö—É–¥–µ–Ω–∏–µ': (2.4, 2.9), 'weight_loss': (2.4, 2.9),
        '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ': (1.9, 2.3), 'maintenance': (1.9, 2.3),
        '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã': (2.1, 2.6), 'muscle_gain': (2.1, 2.6)
    }
    
    min_protein, max_protein = base_ranges.get(goal, (2.0, 2.5))
    
    # –≠—Ç–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö –±–µ–ª–∫–∞
    ethnic_protein_factors = {
        'african': 1.05,      # –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
        'caucasian': 1.00,    # –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        'asian': 0.96,        # –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
        'hispanic': 0.99,
        'mixed': 1.01
    }
    ethnic_factor = ethnic_protein_factors.get(ethnicity, 1.0)
    
    # –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (—É–ª—É—á—à–µ–Ω–Ω—ã–µ)
    if age > 65:
        min_protein += 0.5  # –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö
        max_protein += 0.6
    elif age > 50:
        min_protein += 0.4
        max_protein += 0.4
    elif age > 35:
        min_protein += 0.2
        max_protein += 0.2
    
    # –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –æ–±—ä–µ–º (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
    if training_days >= 6:
        min_protein += 0.4
        max_protein += 0.5
    elif training_days >= 4:
        min_protein += 0.3
        max_protein += 0.4
    elif training_days >= 2:
        min_protein += 0.2
        max_protein += 0.3
    
    return round(lbm * min_protein * ethnic_factor), round(lbm * max_protein * ethnic_factor)

def get_ultra_precise_macros_v5(goal, calories, protein_g, gender, age, hormone_status='normal'):
    """–£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ v5.0 —Å —É—á–µ—Ç–æ–º –≥–æ—Ä–º–æ–Ω–æ–≤"""
    protein_cal = protein_g * 4
    
    # –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
        base_fat_percent = 0.26 + (age - 25) * 0.0012
        base_fat_percent = min(base_fat_percent, 0.36)
        
        # –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–ª—è –º—É–∂—á–∏–Ω
        hormone_fat_adjustments = {
            'optimal': -0.02,      # –º–µ–Ω—å—à–µ –∂–∏—Ä–æ–≤ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–µ
            'good': -0.01,
            'normal': 0.00,
            'suboptimal': +0.02,
            'low': +0.04,          # –±–æ–ª—å—à–µ –∂–∏—Ä–æ–≤ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–µ
            'very_low': +0.06
        }
    else:
        base_fat_percent = 0.32 + (age - 25) * 0.001
        base_fat_percent = min(base_fat_percent, 0.42)
        
        # –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–ª—è –∂–µ–Ω—â–∏–Ω
        hormone_fat_adjustments = {
            'optimal': -0.01,
            'good': 0.00,
            'normal': 0.00,
            'suboptimal': +0.03,   # –±–æ–ª—å—à–µ –∂–∏—Ä–æ–≤ –¥–ª—è –∂–µ–Ω—Å–∫–∏—Ö –≥–æ—Ä–º–æ–Ω–æ–≤
            'low': +0.05,
            'very_low': +0.07
        }
    
    hormone_adjustment = hormone_fat_adjustments.get(hormone_status, 0.00)
    fat_percent = base_fat_percent + hormone_adjustment
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ü–µ–ª–µ–π (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
    if goal in ['–ü–æ—Ö—É–¥–µ–Ω–∏–µ', 'weight_loss']:
        fat_percent += 0.06  # –±–æ–ª—å—à–µ –∂–∏—Ä–æ–≤ –ø—Ä–∏ –ø–æ—Ö—É–¥–µ–Ω–∏–∏ –¥–ª—è –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    elif goal in ['–ù–∞–±–æ—Ä –º–∞—Å—Å—ã', 'muscle_gain']:
        fat_percent -= 0.04  # –±–æ–ª—å—à–µ —É–≥–ª–µ–≤–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–±–æ–ª–∏–∑–º–∞
    
    fat_cal = calories * fat_percent
    carb_cal = calories - protein_cal - fat_cal
    
    return round(fat_cal / 9), round(max(carb_cal / 4, 50))  # –º–∏–Ω–∏–º—É–º 50–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤

def calculate_target_calories_v5(tdee, goal, gender, age, fat_percent=None, hormone_status='normal'):
    """–†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π v5.0 —Å —É—á–µ—Ç–æ–º –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    if goal in ['–ü–æ—Ö—É–¥–µ–Ω–∏–µ', 'weight_loss']:
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç —Å –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è–º–∏
        if fat_percent is None:
            deficit = 0.16  # –±–∞–∑–æ–≤—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω
        else:
            if gender in ['–º—É–∂—á–∏–Ω–∞', 'male']:
                if fat_percent > 25: deficit = 0.22
                elif fat_percent > 15: deficit = 0.17
                else: deficit = 0.12
            else:
                if fat_percent > 32: deficit = 0.22
                elif fat_percent > 25: deficit = 0.17
                else: deficit = 0.12
        
        # –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞
        if hormone_status in ['low', 'very_low']:
            deficit *= 0.8  # –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –ø—Ä–∏ –Ω–∏–∑–∫–∏—Ö –≥–æ—Ä–º–æ–Ω–∞—Ö
        elif hormone_status == 'optimal':
            deficit *= 1.1  # –º–æ–∂–Ω–æ –±–æ–ª—å—à–∏–π –¥–µ—Ñ–∏—Ü–∏—Ç –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–º–æ–Ω–∞—Ö
        
        # –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
        if age > 60:
            deficit *= 0.7
        elif age > 50:
            deficit *= 0.8
        elif age > 40:
            deficit *= 0.9
        
        return tdee * (1 - deficit)
    
    elif goal in ['–ù–∞–±–æ—Ä –º–∞—Å—Å—ã', 'muscle_gain']:
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç —Å –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è–º–∏
        surplus = 0.16  # –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω
        
        # –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø—Ä–æ—Ñ–∏—Ü–∏—Ç–∞
        if hormone_status == 'optimal':
            surplus *= 1.2  # –±–æ–ª—å—à–∏–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–º–æ–Ω–∞—Ö
        elif hormone_status in ['low', 'very_low']:
            surplus *= 0.7  # –º–µ–Ω—å—à–∏–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç –ø—Ä–∏ –Ω–∏–∑–∫–∏—Ö –≥–æ—Ä–º–æ–Ω–∞—Ö
        
        # –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
        if age > 50:
            surplus *= 0.6
        elif age > 40:
            surplus *= 0.7
        elif age > 30:
            surplus *= 0.85
        
        return tdee * (1 + surplus)
    
    else:  # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ
        return tdee

def get_precision_fiber_v5(calories, age, health_status='good', ethnicity='caucasian'):
    """–¢–æ—á–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∫–ª–µ—Ç—á–∞—Ç–∫–µ v5.0 —Å —ç—Ç–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏"""
    base_fiber = (calories / 1000) * 15  # –ø–æ–≤—ã—à–µ–Ω –±–∞–∑–æ–≤—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–æ 15–≥/1000 –∫–∫–∞–ª
    
    # –≠—Ç–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è
    ethnic_fiber_factors = {
        'asian': 1.15,        # —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ –±–æ–ª—å—à–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–π –ø–∏—â–∏
        'african': 1.10,      # –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ–≤–æ—â–µ–π
        'hispanic': 1.08,     # –º–Ω–æ–≥–æ –±–æ–±–æ–≤—ã—Ö –∏ –æ–≤–æ—â–µ–π
        'caucasian': 1.00,    # –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        'mixed': 1.05
    }
    ethnic_factor = ethnic_fiber_factors.get(ethnicity, 1.0)
    
    # –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (—É–ª—É—á—à–µ–Ω–Ω—ã–µ)
    if age > 65:
        base_fiber += 8  # –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö
    elif age > 50:
        base_fiber += 5
    elif age > 30:
        base_fiber += 2
    
    # –ó–¥–æ—Ä–æ–≤—å–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ)
    health_fiber_factors = {
        'excellent': 1.15,
        'very_good': 1.08,
        'good': 1.00,
        'healthy': 1.00,
        'fair': 0.95,
        'poor': 0.88,
        'digestive_issues': 0.80
    }
    health_factor = health_fiber_factors.get(health_status, 1.0)
    
    final_fiber = base_fiber * ethnic_factor * health_factor
    return round(max(final_fiber, 25))  # –º–∏–Ω–∏–º—É–º –ø–æ–≤—ã—à–µ–Ω –¥–æ 25–≥ 