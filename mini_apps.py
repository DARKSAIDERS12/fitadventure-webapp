#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è FitAdventure Bot
"""

import json
import datetime
from pathlib import Path
from products_database import (
    PRODUCTS_DATABASE, 
    get_products_by_goal, 
    get_products_by_category,
    search_product,
    format_product_info,
    get_recommended_products
)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = "user_mini_apps_data.json"

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# === –ú–ò–ù–ò-–ü–†–ò–õ–û–ñ–ï–ù–ò–ï: –ë–ê–ó–ê –ü–†–û–î–£–ö–¢–û–í ===
async def show_products_menu(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    keyboard = [
        ['ü•© –ë–µ–ª–∫–∏', 'üçû –£–≥–ª–µ–≤–æ–¥—ã'],
        ['üßà –ñ–∏—Ä—ã', 'üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞'],
        ['üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 'üîô –ù–∞–∑–∞–¥']
    ]
    
    text = """üçé **–ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ FitAdventure**

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:

ü•© **–ë–µ–ª–∫–∏** - –º—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞, –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
üçû **–£–≥–ª–µ–≤–æ–¥—ã** - –∫—Ä—É–ø—ã, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, —Ö–ª–µ–±
üßà **–ñ–∏—Ä—ã** - –æ—Ä–µ—Ö–∏, –º–∞—Å–ª–∞, —Å–µ–º–µ–Ω–∞
üîç **–ü–æ–∏—Å–∫** - –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
üìä **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** - –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–¥ –≤–∞—à—É —Ü–µ–ª—å"""
    
    from telegram import ReplyKeyboardMarkup
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return 19  # PRODUCTS_MENU state

async def show_products_category(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    text = update.message.text
    chat_id = str(update.message.chat_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = load_user_data()
    user_goal = user_data.get(chat_id, {}).get('goal', '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ')
    
    category_map = {
        'ü•© –ë–µ–ª–∫–∏': '–±–µ–ª–∫–∏',
        'üçû –£–≥–ª–µ–≤–æ–¥—ã': '—É–≥–ª–µ–≤–æ–¥—ã', 
        'üßà –ñ–∏—Ä—ã': '–∂–∏—Ä—ã'
    }
    
    if text in category_map:
        category = category_map[text]
        products = get_products_by_category(user_goal, category)
        
        if not products:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 19  # PRODUCTS_MENU state
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        result = f"üçé **{category.title()}** –¥–ª—è —Ü–µ–ª–∏: **{user_goal.replace('_', ' ').title()}**\n\n"
        
        for i, (name, data) in enumerate(list(products.items())[:10], 1):
            result += f"{i}. **{name}** - {data['–∫–∞–ª–æ—Ä–∏–∏']} –∫–∫–∞–ª/100–≥\n"
            result += f"   ü•©{data['–±–µ–ª–∫–∏']}–≥ üßà{data['–∂–∏—Ä—ã']}–≥ üçû{data['—É–≥–ª–µ–≤–æ–¥—ã']}–≥\n\n"
        
        if len(products) > 10:
            result += f"... –∏ –µ—â–µ {len(products) - 10} –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        
        result += "\nüí° –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        
        await update.message.reply_text(result, parse_mode='Markdown')
        return 19  # PRODUCTS_MENU state
    
    return 19  # PRODUCTS_MENU state

async def search_product_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    text = update.message.text
    
    if text == 'üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞':
        await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        return 20  # PRODUCT_SEARCH state
    
    # –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
    results = search_product(text)
    
    if not results:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        return 19  # PRODUCTS_MENU state
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{text}':**\n\n"
    
    for goal, categories in results.items():
        result += f"üéØ **{goal.replace('_', ' ').title()}:**\n"
        for category, products in categories.items():
            result += f"  üìÇ {category.title()}:\n"
            for name, data in products.items():
                result += f"    ‚Ä¢ {name} - {data['–∫–∞–ª–æ—Ä–∏–∏']} –∫–∫–∞–ª/100–≥\n"
        result += "\n"
    
    result += "üí° –ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    
    await update.message.reply_text(result, parse_mode='Markdown')
    return 19  # PRODUCTS_MENU state

async def show_product_details(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ"""
    product_name = update.message.text
    results = search_product(product_name)
    
    if not results:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 19  # PRODUCTS_MENU state
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    exact_match = None
    for goal, categories in results.items():
        for category, products in categories.items():
            for name, data in products.items():
                if name.lower() == product_name.lower():
                    exact_match = (name, data, goal, category)
                    break
    
    if exact_match:
        name, data, goal, category = exact_match
        result = format_product_info(name, data)
        result += f"\n\nüéØ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è:** {goal.replace('_', ' ').title()}"
        result += f"\nüìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category.title()}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é
        if goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ":
            result += "\n\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è!"
        elif goal == "–Ω–∞–±–æ—Ä_–º–∞—Å—Å—ã":
            result += "\n\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã!"
        else:
            result += "\n\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–æ—Ä–º—ã!"
        
        await update.message.reply_text(result, parse_mode='Markdown')
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        result = f"üîç **–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è '{product_name}':**\n\n"
        for goal, categories in results.items():
            for category, products in categories.items():
                for name, data in products.items():
                    result += f"‚Ä¢ **{name}** ({goal.replace('_', ' ').title()})\n"
                    result += f"  {data['–∫–∞–ª–æ—Ä–∏–∏']} –∫–∫–∞–ª/100–≥\n\n"
        
        result += "üí° –ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        await update.message.reply_text(result, parse_mode='Markdown')
    
    return 19  # PRODUCTS_MENU state

async def show_recommendations(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    text = update.message.text
    
    if text != 'üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        return 19  # PRODUCTS_MENU state
    
    chat_id = str(update.message.chat_id)
    user_data = load_user_data()
    user_goal = user_data.get(chat_id, {}).get('goal', '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ')
    
    result = f"üìä **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è {user_goal.replace('_', ' ').title()}:**\n\n"
    
    categories = ['–±–µ–ª–∫–∏', '—É–≥–ª–µ–≤–æ–¥—ã', '–∂–∏—Ä—ã']
    for category in categories:
        recommended = get_recommended_products(user_goal, category, 3)
        if recommended:
            result += f"**{category.title()}:**\n"
            for name, data in recommended:
                result += f"‚Ä¢ {name} - {data['–∫–∞–ª–æ—Ä–∏–∏']} –∫–∫–∞–ª/100–≥\n"
            result += "\n"
    
    result += "üí° –≠—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏!"
    
    await update.message.reply_text(result, parse_mode='Markdown')
    return 19  # PRODUCTS_MENU state

# === –ú–ò–ù–ò-–ü–†–ò–õ–û–ñ–ï–ù–ò–ï: –¢–†–ï–ö–ï–† –í–û–î–´ ===
async def show_water_tracker(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä –≤–æ–¥—ã"""
    chat_id = str(update.message.chat_id)
    user_data = load_user_data()
    
    today = datetime.date.today().isoformat()
    water_data = user_data.get(chat_id, {}).get('water', {})
    today_water = water_data.get(today, 0)
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã (–≤ –º–ª)
    recommended_water = 2500  # 2.5 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å
    
    progress = min(today_water / recommended_water * 100, 100)
    progress_bar = "üíß" * int(progress / 10) + "‚¨ú" * (10 - int(progress / 10))
    
    keyboard = [
        ['üíß +250–º–ª', 'üíß +500–º–ª'],
        ['üíß +1000–º–ª', 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üîô –ù–∞–∑–∞–¥']
    ]
    
    text = f"""üíß **–¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã**

–°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: **{today_water}–º–ª** –∏–∑ **{recommended_water}–º–ª**
–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} **{progress:.1f}%**

{get_water_motivation(progress)}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:"""
    
    from telegram import ReplyKeyboardMarkup
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return "WATER_TRACKER"

def get_water_motivation(progress):
    """–ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if progress >= 100:
        return "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –≤–æ–¥—ã!"
    elif progress >= 80:
        return "üëç –ü–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!"
    elif progress >= 60:
        return "üí™ –•–æ—Ä–æ—à–æ –∏–¥–µ—Ç–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    elif progress >= 40:
        return "üö∞ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–∏—Ç—å –≤–æ–¥—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ!"
    elif progress >= 20:
        return "üíß –ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å –≤–æ–¥—ã! –í–∞—à–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–º—É —ç—Ç–æ –Ω—É–∂–Ω–æ!"
    else:
        return "üåä –í—Ä–µ–º—è –ø–∏—Ç—å –≤–æ–¥—É! –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"

async def add_water(update, context):
    """–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É –≤ —Ç—Ä–µ–∫–µ—Ä"""
    text = update.message.text
    chat_id = str(update.message.chat_id)
    
    water_amounts = {
        'üíß +250–º–ª': 250,
        'üíß +500–º–ª': 500,
        'üíß +1000–º–ª': 1000
    }
    
    if text in water_amounts:
        amount = water_amounts[text]
        
        user_data = load_user_data()
        if chat_id not in user_data:
            user_data[chat_id] = {}
        if 'water' not in user_data[chat_id]:
            user_data[chat_id]['water'] = {}
        
        today = datetime.date.today().isoformat()
        if today not in user_data[chat_id]['water']:
            user_data[chat_id]['water'][today] = 0
        
        user_data[chat_id]['water'][today] += amount
        save_user_data(user_data)
        
        new_total = user_data[chat_id]['water'][today]
        recommended_water = 2500
        progress = min(new_total / recommended_water * 100, 100)
        
        progress_bar = "üíß" * int(progress / 10) + "‚¨ú" * (10 - int(progress / 10))
        
        result = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ **{amount}–º–ª** –≤–æ–¥—ã!\n\n"
        result += f"–í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: **{new_total}–º–ª** –∏–∑ **{recommended_water}–º–ª**\n"
        result += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} **{progress:.1f}%**\n\n"
        result += get_water_motivation(progress)
        
        await update.message.reply_text(result, parse_mode='Markdown')
        return "WATER_TRACKER"
    
    elif text == 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å':
        user_data = load_user_data()
        if chat_id in user_data and 'water' in user_data[chat_id]:
            today = datetime.date.today().isoformat()
            user_data[chat_id]['water'][today] = 0
            save_user_data(user_data)
        
        await update.message.reply_text("üîÑ –°—á–µ—Ç—á–∏–∫ –≤–æ–¥—ã —Å–±—Ä–æ—à–µ–Ω!")
        return "WATER_TRACKER"
    
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await show_water_statistics(update, context)
        return "WATER_TRACKER"
    
    return "WATER_TRACKER"

async def show_water_statistics(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–¥—ã"""
    chat_id = str(update.message.chat_id)
    user_data = load_user_data()
    water_data = user_data.get(chat_id, {}).get('water', {})
    
    if not water_data:
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ã –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã!")
        return "WATER_TRACKER"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    today = datetime.date.today()
    stats = []
    
    for i in range(7):
        date = today - datetime.timedelta(days=i)
        date_str = date.isoformat()
        amount = water_data.get(date_str, 0)
        stats.append((date, amount))
    
    result = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n\n"
    
    for date, amount in reversed(stats):
        day_name = date.strftime("%A")  # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        date_str = date.strftime("%d.%m")
        progress = min(amount / 2500 * 100, 100)
        progress_bar = "üíß" * int(progress / 20) + "‚¨ú" * (5 - int(progress / 20))
        
        result += f"**{day_name}** ({date_str}): {amount}–º–ª {progress_bar} {progress:.1f}%\n"
    
    result += "\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞: 2500–º–ª –≤ –¥–µ–Ω—å"
    
    await update.message.reply_text(result, parse_mode='Markdown')
    return "WATER_TRACKER"

# === –ú–ò–ù–ò-–ü–†–ò–õ–û–ñ–ï–ù–ò–ï: –¢–†–ï–ö–ï–† –¶–ï–õ–ï–ô ===
async def show_goals_tracker(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä —Ü–µ–ª–µ–π"""
    chat_id = str(update.message.chat_id)
    user_data = load_user_data()
    
    goals = user_data.get(chat_id, {}).get('goals', {})
    
    keyboard = [
        ['üìù –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å', '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å'],
        ['üìä –ú–æ–∏ —Ü–µ–ª–∏', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å'],
        ['üîô –ù–∞–∑–∞–¥']
    ]
    
    text = "üéØ **–¢—Ä–µ–∫–µ—Ä —Ü–µ–ª–µ–π**\n\n"
    
    if goals:
        text += "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏:\n"
        for i, (goal_id, goal_data) in enumerate(goals.items(), 1):
            progress = goal_data.get('progress', 0)
            target = goal_data.get('target', 0)
            if target > 0:
                progress_percent = min(progress / target * 100, 100)
            else:
                progress_percent = 0
            
            text += f"{i}. **{goal_data['name']}**\n"
            text += f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{target} ({progress_percent:.1f}%)\n\n"
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å!"
    
    from telegram import ReplyKeyboardMarkup
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return "GOALS_TRACKER"

async def add_goal(update, context):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å"""
    text = update.message.text
    
    if text == 'üìù –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å':
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–°–±—Ä–æ—Å–∏—Ç—å 5 –∫–≥'):"
        )
        return "ADD_GOAL_NAME"
    
    return "GOALS_TRACKER"

async def handle_goal_name(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏"""
    goal_name = update.message.text
    chat_id = str(update.message.chat_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data = load_user_data()
    if chat_id not in user_data:
        user_data[chat_id] = {}
    if 'temp_goal' not in user_data[chat_id]:
        user_data[chat_id]['temp_goal'] = {}
    
    user_data[chat_id]['temp_goal']['name'] = goal_name
    save_user_data(user_data)
    
    await update.message.reply_text(
        f"üìä –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{goal_name}' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –¥–ª—è 5 –∫–≥):"
    )
    return "ADD_GOAL_TARGET"

async def handle_goal_target(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    try:
        target = float(update.message.text)
        chat_id = str(update.message.chat_id)
        
        user_data = load_user_data()
        temp_goal = user_data.get(chat_id, {}).get('temp_goal', {})
        goal_name = temp_goal.get('name', '–ù–æ–≤–∞—è —Ü–µ–ª—å')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å
        if 'goals' not in user_data[chat_id]:
            user_data[chat_id]['goals'] = {}
        
        goal_id = str(len(user_data[chat_id]['goals']) + 1)
        user_data[chat_id]['goals'][goal_id] = {
            'name': goal_name,
            'target': target,
            'progress': 0,
            'created': datetime.date.today().isoformat()
        }
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'temp_goal' in user_data[chat_id]:
            del user_data[chat_id]['temp_goal']
        
        save_user_data(user_data)
        
        await update.message.reply_text(
            f"‚úÖ –¶–µ–ª—å '{goal_name}' —Å —Ü–µ–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º {target} –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
        )
        
        return await show_goals_tracker(update, context)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return "ADD_GOAL_TARGET"

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ú–ò–ù–ò-–ü–†–ò–õ–û–ñ–ï–ù–ò–ô ===
async def show_mini_apps_menu(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    keyboard = [
        ['üçé –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', 'üíß –¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã'],
        ['üéØ –¢—Ä–µ–∫–µ—Ä —Ü–µ–ª–µ–π', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
        ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    
    text = """üéÆ **–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FitAdventure**

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:

üçé **–ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤** - –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ë–ñ–£ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
üíß **–¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã
üéØ **–¢—Ä–µ–∫–µ—Ä —Ü–µ–ª–µ–π** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ —Ü–µ–ª—è–º
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    
    from telegram import ReplyKeyboardMarkup
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return 18  # MINI_APPS_MENU state

async def handle_mini_apps_navigation(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö"""
    text = update.message.text
    
    if text == 'üçé –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤':
        return await show_products_menu(update, context)
    elif text == 'üíß –¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã':
        return await show_water_tracker(update, context)
    elif text == 'üéØ –¢—Ä–µ–∫–µ—Ä —Ü–µ–ª–µ–π':
        return await show_goals_tracker(update, context)
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        return await show_general_statistics(update, context)
    elif text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return await return_to_main_menu(update, context)
    
    return 18  # MINI_APPS_MENU state

async def show_general_statistics(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    chat_id = str(update.message.chat_id)
    user_data = load_user_data()
    
    text = "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ã
    water_data = user_data.get(chat_id, {}).get('water', {})
    if water_data:
        total_water_days = len(water_data)
        total_water = sum(water_data.values())
        avg_water = total_water / total_water_days if total_water_days > 0 else 0
        
        text += f"üíß **–í–æ–¥–∞:**\n"
        text += f"   –î–Ω–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {total_water_days}\n"
        text += f"   –í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {total_water}–º–ª\n"
        text += f"   –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {avg_water:.0f}–º–ª\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–ª–µ–π
    goals = user_data.get(chat_id, {}).get('goals', {})
    if goals:
        active_goals = len(goals)
        completed_goals = sum(1 for goal in goals.values() 
                            if goal.get('progress', 0) >= goal.get('target', 0))
        
        text += f"üéØ **–¶–µ–ª–∏:**\n"
        text += f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π: {active_goals}\n"
        text += f"   –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö: {completed_goals}\n\n"
    
    if not water_data and not goals:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
        text += "–ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!"
    
    keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º']]
    from telegram import ReplyKeyboardMarkup
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return "STATISTICS"

async def return_to_main_menu(update, context):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    
    try:
        from main import return_to_main_menu as main_return_to_main_menu
        return await main_return_to_main_menu(update, context)
    except ImportError:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        return "GENDER" 