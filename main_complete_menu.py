#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FitAdventure Bot v4.0 - Complete Menu System with Commands
–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
"""

import os
import asyncio
import logging
import json
import random
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, BotCommand
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—ã
try:
    from ultra_precise_formulas_FIXED import generate_maximum_precision_recommendations
except ImportError:
    from ultra_precise_formulas import generate_maximum_precision_recommendations

# === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –¢–û–ö–ï–ù–ê ===
def setup_bot_token():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    env_file = Path('.env')
    
    if env_file.exists():
        load_dotenv()
        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if token:
            print("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return token
    
    print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram")
    print("2. –ù–∞–π–¥–∏—Ç–µ @BotFather")
    print("3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot")
    print("4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω")
    
    while True:
        token = input("üîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: ").strip()
        
        if not token:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            continue
            
        if not token.startswith(('1', '2', '5', '6')) or ':' not in token:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞!")
            continue
            
        try:
            with open('.env', 'w', encoding='utf-8') as f:
                f.write(f"TELEGRAM_BOT_TOKEN={token}\n")
            
            print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª .env")
            return token
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            continue

load_dotenv()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
LANGUAGE_CHOICE, GENDER, AGE, WEIGHT, HEIGHT, FAT_PERCENTAGE, FAT_PERCENTAGE_INPUT, GOAL, TRAINING_EXPERIENCE, TRAINING_DAYS, ACTIVITY_TYPE, WORKOUT_DURATION, STEPS, INTENSITY, RECOVERY, SLEEP_QUALITY, STRESS_LEVEL, OCCUPATION, USER_SETTINGS, MENU_STATE, COMMANDS_MENU = range(21)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
user_data_storage = {}
user_settings = {}
achievements_data = {}

# === –ü–†–û–°–¢–´–ï –ü–†–û–ì–†–ï–°–°-–ë–ê–†–´ –ë–ï–ó –î–ï–ö–û–†–ê ===
def create_clean_progress(current: int, total: int = 12) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    progress_percent = min(current / total, 1.0) * 100
    filled = int(current * 10 / total)
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑ –æ–±—ã—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    progress_bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
    
    return f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{total} ({progress_percent:.0f}%)\n{progress_bar}"

# === –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô ===
def check_achievements(user_id: int, action: str, value=None) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in achievements_data:
        achievements_data[user_id] = {
            'started_survey': False,
            'completed_survey': False,
            'perfectionist': False,
            'fitness_expert': False,
            'health_enthusiast': False
        }
    
    new_achievements = []
    
    if action == "start_survey" and not achievements_data[user_id]['started_survey']:
        achievements_data[user_id]['started_survey'] = True
        new_achievements.append({
            'name': '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
            'description': '–ù–∞—á–∞–ª–∏ –∞–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è',
            'icon': 'üåü'
        })
    
    elif action == "complete_survey" and not achievements_data[user_id]['completed_survey']:
        achievements_data[user_id]['completed_survey'] = True
        new_achievements.append({
            'name': '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
            'description': '–ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å',
            'icon': 'üöÄ'
        })
    
    elif action == "high_precision" and value and value >= 98 and not achievements_data[user_id]['perfectionist']:
        achievements_data[user_id]['perfectionist'] = True
        new_achievements.append({
            'name': '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
            'description': '–ü–æ–ª—É—á–∏–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å 98%+',
            'icon': 'üëë'
        })
    
    return new_achievements

def format_achievement_notification(achievements: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö"""
    if not achievements:
        return ""
    
    notification = f"\nüëë –ù–û–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø üëë\n"
    for achievement in achievements:
        notification += f"{achievement['icon']} **{achievement['name']}**\n"
        notification += f"   _{achievement['description']}_\n"
    notification += f"üëë –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üëë\n"
    
    return notification

# === –°–ò–°–¢–ï–ú–ê –ú–ï–ù–Æ ===
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    chat_id = update.effective_chat.id
    user_lang = user_data_storage.get(chat_id, {}).get('language', 'ru')
    
    if user_lang == 'ru':
        menu_text = """
ü§ñ **FITADVENTURE BOT v4.0 - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç!

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
üí° –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        keyboard = [
            [InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data='start_analysis')],
            [InlineKeyboardButton("üéÆ –ö–æ–º–∞–Ω–¥—ã", callback_data='show_commands'),
             InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='show_settings')],
            [InlineKeyboardButton("üìä –û –±–æ—Ç–µ", callback_data='about_bot'),
             InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data='show_achievements')],
            [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã", callback_data='show_tips'),
             InlineKeyboardButton("üåç –Ø–∑—ã–∫", callback_data='change_language')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help_info')]
        ]
    else:
        menu_text = """
ü§ñ **FITADVENTURE BOT v4.0 - MAIN MENU**

Welcome to the most accurate fitness bot!

üìã **Available features:**
üéØ Personal nutrition plan creation
‚öôÔ∏è Settings and personalization
üèÜ Achievement system
üìä Results export
üí° Smart recommendations

Choose an action:
"""
        keyboard = [
            [InlineKeyboardButton("üéØ Start Analysis", callback_data='start_analysis')],
            [InlineKeyboardButton("üéÆ Commands", callback_data='show_commands'),
             InlineKeyboardButton("‚öôÔ∏è Settings", callback_data='show_settings')],
            [InlineKeyboardButton("üìä About Bot", callback_data='about_bot'),
             InlineKeyboardButton("üèÜ Achievements", callback_data='show_achievements')],
            [InlineKeyboardButton("üí° Tips", callback_data='show_tips'),
             InlineKeyboardButton("üåç Language", callback_data='change_language')],
            [InlineKeyboardButton("‚ùì Help", callback_data='help_info')]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            menu_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            menu_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    return MENU_STATE

async def show_commands_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_lang = user_data_storage.get(chat_id, {}).get('language', 'ru')
    
    if user_lang == 'ru':
        commands_text = """
üéÆ **–ú–ï–ù–Æ –ö–û–ú–ê–ù–î**

–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:

üìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ü–æ–º–æ—â—å –∏ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
‚Ä¢ –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
"""
        keyboard = [
            [InlineKeyboardButton("üîÑ /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data='cmd_start')],
            [InlineKeyboardButton("üìã /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cmd_menu')],
            [InlineKeyboardButton("‚ùì /help - –ü–æ–º–æ—â—å", callback_data='cmd_help')],
            [InlineKeyboardButton("‚ÑπÔ∏è /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='cmd_info')],
            [InlineKeyboardButton("‚ùå /cancel - –û—Ç–º–µ–Ω–∞", callback_data='cmd_cancel')],
            [InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
    else:
        commands_text = """
üéÆ **COMMANDS MENU**

All bot commands are available through the buttons below.
Click a button to execute the command:

üìù **Available commands:**
‚Ä¢ Restart bot
‚Ä¢ Main menu
‚Ä¢ Help and support
‚Ä¢ Bot information
‚Ä¢ Cancel current action
"""
        keyboard = [
            [InlineKeyboardButton("üîÑ /start - Restart", callback_data='cmd_start')],
            [InlineKeyboardButton("üìã /menu - Main Menu", callback_data='cmd_menu')],
            [InlineKeyboardButton("‚ùì /help - Help", callback_data='cmd_help')],
            [InlineKeyboardButton("‚ÑπÔ∏è /info - Information", callback_data='cmd_info')],
            [InlineKeyboardButton("‚ùå /cancel - Cancel", callback_data='cmd_cancel')],
            [InlineKeyboardButton("üè† Back to Main Menu", callback_data='main_menu')]
        ]
    
    await query.edit_message_text(
        commands_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return COMMANDS_MENU

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ß–ï–†–ï–ó –ö–ù–û–ü–ö–ò ===
async def execute_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
    
    chat_id = query.message.chat_id
    user_data_storage[chat_id] = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    new_achievements = check_achievements(chat_id, "start_survey")
    achievement_text = format_achievement_notification(new_achievements)
    
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("üá∫üá∏ English", callback_data='lang_en')]
    ]
    
    await query.edit_message_text(
        "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:**" + achievement_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return LANGUAGE_CHOICE

async def execute_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /menu —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer("üìã –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    
    return await show_main_menu(update, context)

async def execute_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /help —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer("‚ùì –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É...")
    
    return await help_info(update, context)

async def execute_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /info —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer("‚ÑπÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    chat_id = query.message.chat_id
    user_lang = user_data_storage.get(chat_id, {}).get('language', 'ru')
    
    if user_lang == 'ru':
        info_text = """
ü§ñ **FitAdventure Bot v4.0 Complete Menu**

üéÆ **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  
/help - –ü–æ–º–æ—â—å –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

üí° **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è (—Ç–æ—á–Ω–æ—Å—Ç—å 95-99%)
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
‚Ä¢ –£–¥–æ–±–Ω–æ–µ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üéÆ –ö–æ–º–∞–Ω–¥—ã" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å!
"""
    else:
        info_text = """
ü§ñ **FitAdventure Bot v4.0 Complete Menu**

üéÆ **Commands:**
/start - Start bot
/menu - Show main menu
/help - Help and navigation
/info - Bot information
/cancel - Cancel current action

üí° **Features:**
‚Ä¢ Personal nutrition plans (95-99% accuracy)
‚Ä¢ Achievement and motivation system
‚Ä¢ Smart recommendations based on your data
‚Ä¢ Support for Russian and English languages
‚Ä¢ Convenient navigation menu
‚Ä¢ Commands through buttons

üì± Use the "üéÆ Commands" button to access all commands through the interface!
"""
    
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if user_lang == 'ru' else "üè† Main Menu", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        info_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return MENU_STATE

async def execute_cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /cancel —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer("‚ùå –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ...")
    
    chat_id = query.message.chat_id
    user_lang = user_data_storage.get(chat_id, {}).get('language', 'ru')
    
    cancel_text = "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ" if user_lang == 'ru' else "‚ùå Action canceled"
    
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if user_lang == 'ru' else "üè† Main Menu", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        cancel_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if chat_id in user_data_storage:
        del user_data_storage[chat_id]
    
    return MENU_STATE

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return await show_main_menu(update, context)

async def about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_lang = user_data_storage.get(chat_id, {}).get('language', 'ru')
    
    if user_lang == 'ru':
        about_text = """
üîÆ **FITADVENTURE BOT v4.0 COMPLETE MENU**

üéØ **–û –ø—Ä–æ–µ–∫—Ç–µ:**
–°–∞–º—ã–π —Ç–æ—á–Ω—ã–π –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 95-99%

üöÄ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ 12-—ç—Ç–∞–ø–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –£—á–µ—Ç –≤—Å–µ—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –£–º–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —è–∑—ã–∫–æ–≤
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏

‚ö° **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ TDEE
‚Ä¢ –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üìÖ **–í–µ—Ä—Å–∏—è:** 4.0 Complete Menu Edition
üìä **–¢–æ—á–Ω–æ—Å—Ç—å:** 95-99%
üåü **–°–æ–∑–¥–∞–Ω–æ:** –° –ª—é–±–æ–≤—å—é –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏

üéÆ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–º–æ—â—å
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/cancel - –û—Ç–º–µ–Ω–∞

üí° **–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å:** –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é "üéÆ –ö–æ–º–∞–Ω–¥—ã"!
"""
    else:
        about_text = """
üîÆ **FITADVENTURE BOT v4.0 COMPLETE MENU**

üéØ **About the project:**
The most accurate bot for personal nutrition calculation with 95-99% accuracy

üöÄ **Features:**
‚Ä¢ 12-step detailed analysis
‚Ä¢ Consideration of all individual factors
‚Ä¢ Achievement and motivation system
‚Ä¢ Smart personal recommendations
‚Ä¢ Results export
‚Ä¢ Support for two languages
‚Ä¢ Commands through buttons

‚ö° **Technologies:**
‚Ä¢ Ultra-precise calculation formulas
‚Ä¢ Adaptive TDEE
‚Ä¢ Multilingual interface
‚Ä¢ User progress system

üìÖ **Version:** 4.0 Complete Menu Edition
üìä **Accuracy:** 95-99%
üåü **Created:** With love for healthy lifestyle

üéÆ **Available commands:**
/start - Start bot
/menu - Main menu
/help - Help
/info - Information
/cancel - Cancel

üí° **Unique feature:** All commands are available through convenient buttons in the "üéÆ Commands" menu!
"""
    
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if user_lang == 'ru' else "üè† Main Menu", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        about_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return MENU_STATE

async def show_user_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_lang = user_data_storage.get(chat_id, {}).get('language', 'ru')
    
    user_achievements = achievements_data.get(chat_id, {})
    
    if user_lang == 'ru':
        achievements_text = "üèÜ **–í–ê–®–ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø**\n\n"
        
        if not any(user_achievements.values()):
            achievements_text += "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n–ù–∞—á–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!"
        else:
            if user_achievements.get('started_survey'):
                achievements_text += "üåü **–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏** - –ù–∞—á–∞–ª–∏ –∞–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è\n"
            if user_achievements.get('completed_survey'):
                achievements_text += "üöÄ **–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å** - –ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å\n"
            if user_achievements.get('perfectionist'):
                achievements_text += "üëë **–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç** - –ü–æ–ª—É—á–∏–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å 98%+\n"
            if user_achievements.get('fitness_expert'):
                achievements_text += "üí™ **–§–∏—Ç–Ω–µ—Å-—ç–∫—Å–ø–µ—Ä—Ç** - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
            if user_achievements.get('health_enthusiast'):
                achievements_text += "‚ù§Ô∏è **–≠–Ω—Ç—É–∑–∏–∞—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è** - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏\n"
    else:
        achievements_text = "üèÜ **YOUR ACHIEVEMENTS**\n\n"
        
        if not any(user_achievements.values()):
            achievements_text += "üòî You don't have any achievements yet\n\nStart the analysis to get your first achievement!"
        else:
            if user_achievements.get('started_survey'):
                achievements_text += "üåü **First Steps** - Started health analysis\n"
            if user_achievements.get('completed_survey'):
                achievements_text += "üöÄ **Explorer** - Completed full survey\n"
            if user_achievements.get('perfectionist'):
                achievements_text += "üëë **Perfectionist** - Achieved 98%+ accuracy\n"
            if user_achievements.get('fitness_expert'):
                achievements_text += "üí™ **Fitness Expert** - Advanced parameters\n"
            if user_achievements.get('health_enthusiast'):
                achievements_text += "‚ù§Ô∏è **Health Enthusiast** - Healthy habits\n"
    
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if user_lang == 'ru' else "üè† Main Menu", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        achievements_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return MENU_STATE

async def show_quick_tips(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Å–æ–≤–µ—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_lang = user_data_storage.get(chat_id, {}).get('language', 'ru')
    
    if user_lang == 'ru':
        tips_text = """
üí° **–ë–´–°–¢–†–´–ï –°–û–í–ï–¢–´ –ü–û –ü–ò–¢–ê–ù–ò–Æ**

ü•ó **–û—Å–Ω–æ–≤—ã –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è:**
‚Ä¢ –ü–µ–π—Ç–µ 2-3 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å
‚Ä¢ –ï—à—å—Ç–µ 4-5 —Ä–∞–∑ –≤ –¥–µ–Ω—å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏
‚Ä¢ –í–∫–ª—é—á–∞–π—Ç–µ –±–µ–ª–∫–∏ –≤ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏
‚Ä¢ –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –∑–∞–≤—Ç—Ä–∞–∫

üî• **–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è:**
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 10-20%
‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä–¥–∏–æ –Ω–∞–≥—Ä—É–∑–∫–∏

üí™ **–î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã:**
‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 10-15%
‚Ä¢ –ï—à—å—Ç–µ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
‚Ä¢ –§–æ–∫—É—Å –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–∞—Ö
‚Ä¢ –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é

‚ö° **–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:**
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ
‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
‚Ä¢ –ì–æ—Ç–æ–≤—å—Ç–µ –¥–æ–º–∞ —á–∞—â–µ
‚Ä¢ –í—ã—Å—ã–ø–∞–π—Ç–µ—Å—å 7-8 —á–∞—Å–æ–≤

üéÆ **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üéÆ –ö–æ–º–∞–Ω–¥—ã" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!
"""
    else:
        tips_text = """
üí° **QUICK NUTRITION TIPS**

ü•ó **Healthy eating basics:**
‚Ä¢ Drink 2-3 liters of water daily
‚Ä¢ Eat 4-5 times a day in small portions
‚Ä¢ Include proteins in every meal
‚Ä¢ Don't skip breakfast

üî• **For weight loss:**
‚Ä¢ Create 10-20% calorie deficit
‚Ä¢ Increase protein intake
‚Ä¢ Limit simple carbohydrates
‚Ä¢ Add cardio workouts

üí™ **For muscle gain:**
‚Ä¢ Increase calories by 10-15%
‚Ä¢ Eat every 3 hours
‚Ä¢ Focus on complex carbohydrates
‚Ä¢ Strength training 3-4 times a week

‚ö° **General tips:**
‚Ä¢ Plan your meals in advance
‚Ä¢ Read product ingredients
‚Ä¢ Cook at home more often
‚Ä¢ Get 7-8 hours of sleep

üéÆ **Tip:** Use the "üéÆ Commands" button for quick access to all bot functions!
"""
    
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if user_lang == 'ru' else "üè† Main Menu", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        tips_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return MENU_STATE

async def change_language_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ú–µ–Ω—é —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    language_text = """
üåç **–í–´–ë–û–† –Ø–ó–´–ö–ê / LANGUAGE SELECTION**

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
Choose your preferred interface language
"""
    
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='set_lang_ru')],
        [InlineKeyboardButton("üá∫üá∏ English", callback_data='set_lang_en')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / Main Menu", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        language_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return MENU_STATE

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    
    if query.data == 'set_lang_ru':
        if chat_id not in user_data_storage:
            user_data_storage[chat_id] = {}
        user_data_storage[chat_id]['language'] = 'ru'
        success_text = "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
    else:
        if chat_id not in user_data_storage:
            user_data_storage[chat_id] = {}
        user_data_storage[chat_id]['language'] = 'en'
        success_text = "‚úÖ Language changed to English"
    
    await query.answer(success_text)
    return await show_main_menu(update, context)

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
def get_user_theme(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_settings.get(user_id, {}).get('theme', 'default')

def set_user_theme(user_id: int, theme: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_settings:
        user_settings[user_id] = {}
    user_settings[user_id]['theme'] = theme

def save_user_progress(user_id: int, step: int):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_settings:
        user_settings[user_id] = {}
    user_settings[user_id]['last_step'] = step
    user_settings[user_id]['last_session'] = datetime.now().isoformat()

# === –£–ú–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
def generate_smart_tips(user_data: dict) -> list:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tips = []
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    age = user_data.get('age', 0)
    if age < 25:
        tips.append({
            'title': '–°–æ–≤–µ—Ç –¥–ª—è –º–æ–ª–æ–¥—ã—Ö',
            'text': '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–∏—Ç–∞–Ω–∏—è',
            'icon': 'üå±'
        })
    elif age > 40:
        tips.append({
            'title': '–°–æ–≤–µ—Ç –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö',
            'text': '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ –∏ –æ–º–µ–≥–∞-3',
            'icon': 'üëë'
        })
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–ª–∏
    goal = user_data.get('goal', '')
    if '–ü–æ—Ö—É–¥–µ–Ω–∏–µ' in goal:
        tips.append({
            'title': '–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è',
            'text': '–°–æ–∑–¥–∞–π—Ç–µ —É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 10-20%',
            'icon': 'üî•'
        })
    
    return tips

def format_smart_tips(tips: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    if not tips:
        return ""
    
    formatted = f"\nü™Ñ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –°–û–í–ï–¢–´ ü™Ñ\n"
    for tip in tips:
        formatted += f"{tip['icon']} **{tip['title']}**\n"
        formatted += f"   _{tip['text']}_\n\n"
    
    return formatted

# === –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø ===
def generate_personalized_celebration(user_data: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
    age = user_data.get('age', 25)
    goal = user_data.get('goal', '')
    
    styles = ['energetic', 'motivational', 'wise']
    style = random.choice(styles)
    
    if style == 'energetic' and age < 30:
        return f"""
üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! üéâ
–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≥–æ—Ç–æ–≤!
–í—Ä–µ–º—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å!
"""
    elif style == 'motivational':
        return f"""
üí™ –û–¢–õ–ò–ß–ù–û! üí™
–í—ã —Å–¥–µ–ª–∞–ª–∏ –≤–∞–∂–Ω—ã–π —à–∞–≥ –∫ –∑–¥–æ—Ä–æ–≤—å—é
–í–∞—à–∏ —Ü–µ–ª–∏ –¥–æ—Å—Ç–∏–∂–∏–º—ã!
"""
    else:
        return f"""
‚ú® –ü–†–ï–í–û–°–•–û–î–ù–û! ‚ú®
–í–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω
–ü—É—Ç—å –∫ —É—Å–ø–µ—Ö—É –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è
"""

# === –≠–ö–°–ü–û–†–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
def create_result_summary(user_data: dict, results: dict) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    summary = f"""
üîÆ FITADVENTURE ULTRA v4.0 üîÆ
–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('user_id', 'Unknown')}
üéØ –¶–µ–ª—å: {user_data.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üí™ –û–ø—ã—Ç: {user_data.get('training_experience', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:
–¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {results.get('target_calories', 0)} –∫–∫–∞–ª
–ë–µ–ª–∫–∏: {results.get('protein_min', 0)}-{results.get('protein_max', 0)} –≥
–ñ–∏—Ä—ã: {results.get('fats', 0)} –≥
–£–≥–ª–µ–≤–æ–¥—ã: {results.get('carbs', 0)} –≥

üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {results.get('precision_score', 0)}%
"""
    return summary

# === –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê ===
TEXTS = {
    'ru': {
        'welcome': "üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitAdventure v4.0!**\n\n–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.\n\nüöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –∫ —Ç–µ–ª—É –º–µ—á—Ç—ã?",
        'choose_language': "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:**",
        'language_set': "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π",
        'start_journey': "üéØ **–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ**",
        'help_info': "‚ÑπÔ∏è **–ü–æ–¥—Ä–æ–±–Ω–µ–µ**",
        'help_button': "‚ùì **–ü–æ–º–æ—â—å**",
        'settings': "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**",
        'stage_titles': {
            'gender': "üë§ **–≠—Ç–∞–ø 1/12:** –í–∞—à –ø–æ–ª?",
            'age': "üéÇ **–≠—Ç–∞–ø 2/12:** –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?",
            'weight': "‚öñÔ∏è **–≠—Ç–∞–ø 3/12:** –í–∞—à –≤–µ—Å (–∫–≥)?",
            'height': "üìè **–≠—Ç–∞–ø 4/12:** –í–∞—à —Ä–æ—Å—Ç (—Å–º)?",
            'fat': "üî• **–≠—Ç–∞–ø 5/12:** –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞?",
            'goal': "üéØ **–≠—Ç–∞–ø 6/12:** –í–∞—à–∞ —Ü–µ–ª—å?",
            'experience': "üí™ **–≠—Ç–∞–ø 7/12:** –û–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
            'activity': "üèÉ **–≠—Ç–∞–ø 8/12:** –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            'intensity': "üî• **–≠—Ç–∞–ø 9/12:** –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
            'recovery': "üò¥ **–≠—Ç–∞–ø 10/12:** –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è?",
            'sleep': "üåô **–≠—Ç–∞–ø 11/12:** –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞?",
            'lifestyle': "üíº **–≠—Ç–∞–ø 12/12:** –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏"
        },
        'buttons': {
            'male': "üë® –ú—É–∂—á–∏–Ω–∞",
            'female': "üë© –ñ–µ–Ω—â–∏–Ω–∞",
            'know_fat': "‚úÖ –î–∞, –∑–Ω–∞—é",
            'dont_know_fat': "‚ùå –ù–µ –∑–Ω–∞—é",
            'goal_loss': "üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ",
            'goal_maintain': "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ",
            'goal_gain': "üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã",
            'exp_beginner': "üå± –ù–æ–≤–∏—á–æ–∫",
            'exp_intermediate': "üî• –°—Ä–µ–¥–Ω–∏–π",
            'exp_advanced': "‚ö° –û–ø—ã—Ç–Ω—ã–π",
            'activity_strength': "üèãÔ∏è –°–∏–ª–æ–≤—ã–µ",
            'activity_cardio': "üèÉ –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
            'activity_crossfit': "‚ö° –ö—Ä–æ—Å—Å—Ñ–∏—Ç",
            'intensity_low': "üü¢ –ù–∏–∑–∫–∞—è",
            'intensity_moderate': "üü° –°—Ä–µ–¥–Ω—è—è",
            'intensity_high': "üî¥ –í—ã—Å–æ–∫–∞—è",
            'intensity_very_high': "‚ö° –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è",
            'recovery_excellent': "‚≠ê –û—Ç–ª–∏—á–Ω–æ",
            'recovery_good': "‚úÖ –•–æ—Ä–æ—à–æ",
            'recovery_average': "üî∂ –°—Ä–µ–¥–Ω–µ",
            'recovery_poor': "‚ùå –ü–ª–æ—Ö–æ",
            'sleep_excellent': "üò¥ –û—Ç–ª–∏—á–Ω–æ (8+ —á)",
            'sleep_good': "üòä –•–æ—Ä–æ—à–æ (7-8 —á)",
            'sleep_average': "üòê –°—Ä–µ–¥–Ω–µ (6-7 —á)",
            'sleep_poor': "üòû –ü–ª–æ—Ö–æ (<6 —á)",
            'stress_low': "üòå –ù–∏–∑–∫–∏–π",
            'stress_medium': "üòê –°—Ä–µ–¥–Ω–∏–π",
            'stress_high': "üò∞ –í—ã—Å–æ–∫–∏–π",
            'occupation_office': "üíª –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            'occupation_active': "üèÉ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            'occupation_physical': "üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥"
        },
        'result_title': "üéâ **–í–∞—à —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!**",
        'calculating': "üß† –í—ã–ø–æ–ª–Ω—è—é —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤...",
        'precision_info': "üéØ **–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞:** {precision}%",
        'error_invalid': "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
        'canceled': "‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        'help_text': "üìö **–°–ø—Ä–∞–≤–∫–∞ FitAdventure v4.0**\n\nüéØ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n\nüìä –ú—ã —É—á–∏—Ç—ã–≤–∞–µ–º:\n‚Ä¢ –í–∞—à–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n‚Ä¢ –¶–µ–ª–∏ –∏ –æ–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ\n‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞\n‚Ä¢ –¢–∏–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n‚ú® –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 95-99%!\n\nüéÆ **–ö–æ–º–∞–Ω–¥—ã:**\n/start - –ù–∞—á–∞—Ç—å\n/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help - –ü–æ–º–æ—â—å\n/info - –û –±–æ—Ç–µ\n/cancel - –û—Ç–º–µ–Ω–∞\n\nüí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üéÆ –ö–æ–º–∞–Ω–¥—ã\" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å!**"
    },
    'en': {
        'welcome': "üéØ **Welcome to FitAdventure v4.0!**\n\nI'll help create a personalized nutrition plan to achieve your goals.\n\nüöÄ Ready to start your journey to your dream body?",
        'choose_language': "üåç **Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:**",
        'language_set': "‚úÖ Language set: English",
        'start_journey': "üéØ **Start Journey**",
        'help_info': "‚ÑπÔ∏è **More Info**",
        'help_button': "‚ùì **Help**",
        'settings': "‚öôÔ∏è **Settings**",
        'stage_titles': {
            'gender': "üë§ **Step 1/12:** Your gender?",
            'age': "üéÇ **Step 2/12:** Your age?",
            'weight': "‚öñÔ∏è **Step 3/12:** Your weight (kg)?",
            'height': "üìè **Step 4/12:** Your height (cm)?",
            'fat': "üî• **Step 5/12:** Do you know your body fat %?",
            'goal': "üéØ **Step 6/12:** Your goal?",
            'experience': "üí™ **Step 7/12:** Training experience?",
            'activity': "üèÉ **Step 8/12:** Activity details",
            'intensity': "üî• **Step 9/12:** Training intensity?",
            'recovery': "üò¥ **Step 10/12:** Recovery quality?",
            'sleep': "üåô **Step 11/12:** Sleep quality?",
            'lifestyle': "üíº **Step 12/12:** Lifestyle"
        },
        'buttons': {
            'male': "üë® Male",
            'female': "üë© Female",
            'know_fat': "‚úÖ Yes, I know",
            'dont_know_fat': "‚ùå Don't know",
            'goal_loss': "üìâ Weight Loss",
            'goal_maintain': "‚öñÔ∏è Maintenance",
            'goal_gain': "üìà Muscle Gain",
            'exp_beginner': "üå± Beginner",
            'exp_intermediate': "üî• Intermediate",
            'exp_advanced': "‚ö° Advanced",
            'activity_strength': "üèãÔ∏è Strength",
            'activity_cardio': "üèÉ Cardio",
            'activity_crossfit': "‚ö° CrossFit",
            'intensity_low': "üü¢ Low",
            'intensity_moderate': "üü° Moderate",
            'intensity_high': "üî¥ High",
            'intensity_very_high': "‚ö° Very High",
            'recovery_excellent': "‚≠ê Excellent",
            'recovery_good': "‚úÖ Good",
            'recovery_average': "üî∂ Average",
            'recovery_poor': "‚ùå Poor",
            'sleep_excellent': "üò¥ Excellent (8+ h)",
            'sleep_good': "üòä Good (7-8 h)",
            'sleep_average': "üòê Average (6-7 h)",
            'sleep_poor': "üòû Poor (<6 h)",
            'stress_low': "üòå Low",
            'stress_medium': "üòê Medium",
            'stress_high': "üò∞ High",
            'occupation_office': "üíª Office work",
            'occupation_active': "üèÉ Active work",
            'occupation_physical': "üí™ Physical work"
        },
        'result_title': "üéâ **Your ultra-precise nutrition plan is ready!**",
        'calculating': "üß† Performing ultra-precise calculations with all factors...",
        'precision_info': "üéØ **Calculation Accuracy:** {precision}%",
        'error_invalid': "‚ùå Please enter a valid value",
        'canceled': "‚ùå Analysis canceled",
        'help_text': "üìö **FitAdventure v4.0 Help**\n\nüéØ This bot helps calculate personalized nutrition plans\n\nüìä We consider:\n‚Ä¢ Your physical parameters\n‚Ä¢ Goals and training experience\n‚Ä¢ Activity level\n‚Ä¢ Body fat percentage\n‚Ä¢ Sleep and recovery quality\n‚Ä¢ Stress levels\n‚Ä¢ Professional activity type\n\n‚ú® Get precise recommendations with 95-99% accuracy!\n\nüéÆ **Commands:**\n/start - Start\n/menu - Main menu\n/help - Help\n/info - About bot\n/cancel - Cancel\n\nüí° **Use the \"üéÆ Commands\" button to run commands through the interface!**"
    }
}

def get_text(user_id: int, key: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_lang = user_data_storage.get(user_id, {}).get('language', 'ru')
    return TEXTS[user_lang].get(key, TEXTS['ru'].get(key, ""))

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞"""
    chat_id = update.message.chat_id
    user_data_storage[chat_id] = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    new_achievements = check_achievements(chat_id, "start_survey")
    achievement_text = format_achievement_notification(new_achievements)
    
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("üá∫üá∏ English", callback_data='lang_en')]
    ]
    
    await update.message.reply_text(
        "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:**" + achievement_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return LANGUAGE_CHOICE

async def language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    if query.data == 'lang_ru':
        user_data_storage[chat_id]['language'] = 'ru'
        lang_text = "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π"
    else:
        user_data_storage[chat_id]['language'] = 'en'
        lang_text = "‚úÖ Language set: English"
    
    await query.answer(lang_text)
    return await show_main_menu(update, context)

async def start_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    save_user_progress(chat_id, 1)
    progress = create_clean_progress(1, 12)
    stage_text = get_text(chat_id, 'stage_titles')['gender']
    
    keyboard = [
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['male'], callback_data='–º—É–∂—á–∏–Ω–∞')],
        [InlineKeyboardButton(get_text(chat_id, 'buttons')['female'], callback_data='–∂–µ–Ω—â–∏–Ω–∞')]
    ]
    
    await query.edit_message_text(
        f"{progress}\n\n{stage_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return GENDER

# === –£–ü–†–û–©–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞) ===
async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    user_data_storage[chat_id]['gender'] = query.data
    await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏.", parse_mode=ParseMode.MARKDOWN)
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]
    await query.message.reply_text(
        "–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return MENU_STATE

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer("üîÆ –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
    
    chat_id = query.message.chat_id
    user_lang = user_data_storage.get(chat_id, {}).get('language', 'ru')
    
    settings_text = "‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò**\n\n–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞." if user_lang == 'ru' else "‚öôÔ∏è **SETTINGS**\n\nVarious bot settings will be available here in the full version."
    
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if user_lang == 'ru' else "üè† Main Menu", callback_data='main_menu')]]
    
    await query.edit_message_text(
        settings_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return MENU_STATE

async def help_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    help_text = get_text(chat_id, 'help_text')
    
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]
    
    await query.edit_message_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    return MENU_STATE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    chat_id = update.message.chat_id
    await update.message.reply_text(get_text(chat_id, 'canceled'), reply_markup=ReplyKeyboardRemove())
    if chat_id in user_data_storage: del user_data_storage[chat_id]
    return ConversationHandler.END

# === –ö–û–ú–ê–ù–î–´ ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await show_main_menu(update, context)

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /info"""
    info_text = """
ü§ñ **FitAdventure Bot v4.0 Complete Menu**

üéÆ **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  
/help - –ü–æ–º–æ—â—å –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

üí° **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å:** –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üéÆ –ö–æ–º–∞–Ω–¥—ã" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!
"""
    await update.message.reply_text(info_text, parse_mode=ParseMode.MARKDOWN)

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ FitAdventure Bot v4.0 Complete Menu...")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞
    try:
        TOKEN = setup_bot_token()
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except KeyboardInterrupt:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return
        
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    try:
        application = Application.builder().token(TOKEN).build()
        print("‚úÖ Telegram Application —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANGUAGE_CHOICE: [
                CallbackQueryHandler(language_choice, pattern='^lang_'),
                CallbackQueryHandler(show_main_menu, pattern='^main_menu$'),
            ],
            MENU_STATE: [
                CallbackQueryHandler(start_analysis, pattern='^start_analysis$'),
                CallbackQueryHandler(show_commands_menu, pattern='^show_commands$'),
                CallbackQueryHandler(show_settings, pattern='^show_settings$'),
                CallbackQueryHandler(about_bot, pattern='^about_bot$'),
                CallbackQueryHandler(show_user_achievements, pattern='^show_achievements$'),
                CallbackQueryHandler(show_quick_tips, pattern='^show_tips$'),
                CallbackQueryHandler(change_language_menu, pattern='^change_language$'),
                CallbackQueryHandler(help_info, pattern='^help_info$'),
                CallbackQueryHandler(show_main_menu, pattern='^main_menu$'),
                CallbackQueryHandler(set_language, pattern='^set_lang_'),
            ],
            COMMANDS_MENU: [
                CallbackQueryHandler(execute_start_command, pattern='^cmd_start$'),
                CallbackQueryHandler(execute_menu_command, pattern='^cmd_menu$'),
                CallbackQueryHandler(execute_help_command, pattern='^cmd_help$'),
                CallbackQueryHandler(execute_info_command, pattern='^cmd_info$'),
                CallbackQueryHandler(execute_cancel_command, pattern='^cmd_cancel$'),
                CallbackQueryHandler(show_main_menu, pattern='^main_menu$'),
            ],
            GENDER: [CallbackQueryHandler(gender)],
            USER_SETTINGS: [
                CallbackQueryHandler(show_main_menu, pattern='^main_menu$')
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True,
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('menu', menu_command))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('info', info_command))
    
    logger.info("üéØ FitAdventure Bot v4.0 Complete Menu –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üéÆ –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
    print("\nüéØ FitAdventure Bot v4.0 Complete Menu –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üéÆ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ö–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!")
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /menu, /help, /info, /cancel")
    print("üí° –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üéÆ –ö–æ–º–∞–Ω–¥—ã' –≤ –º–µ–Ω—é!")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞")
    print("‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        application.run_polling()
    except KeyboardInterrupt:
        print("\n‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main() 