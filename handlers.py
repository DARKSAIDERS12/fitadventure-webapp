#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ FitAdventure Bot
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
"""

import logging
from typing import Dict, Any
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from config import States, Keyboards, Messages, CalculationConstants
from calculations import generate_ultra_precise_recommendations

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_storage: Dict[int, Dict[str, Any]] = {}

class InputValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    
    @staticmethod
    def validate_age(text: str) -> int:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        try:
            age = int(text)
            if not (CalculationConstants.MIN_AGE <= age <= CalculationConstants.MAX_AGE):
                raise ValueError
            return age
        except ValueError:
            raise ValueError(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç {CalculationConstants.MIN_AGE} –¥–æ {CalculationConstants.MAX_AGE})")
    
    @staticmethod
    def validate_weight(text: str) -> float:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Å–∞"""
        try:
            weight = float(text)
            if not (CalculationConstants.MIN_WEIGHT <= weight <= CalculationConstants.MAX_WEIGHT):
                raise ValueError
            return weight
        except ValueError:
            raise ValueError(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ –æ—Ç {CalculationConstants.MIN_WEIGHT} –¥–æ {CalculationConstants.MAX_WEIGHT} –∫–≥)")
    
    @staticmethod
    def validate_height(text: str) -> float:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ—Å—Ç–∞"""
        try:
            height = float(text)
            if not (CalculationConstants.MIN_HEIGHT <= height <= CalculationConstants.MAX_HEIGHT):
                raise ValueError
            return height
        except ValueError:
            raise ValueError(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ –æ—Ç {CalculationConstants.MIN_HEIGHT} –¥–æ {CalculationConstants.MAX_HEIGHT} —Å–º)")
    
    @staticmethod
    def validate_fat_percentage(text: str) -> float:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
        try:
            fat_percent = float(text)
            if not (CalculationConstants.MIN_FAT_PERCENT <= fat_percent <= CalculationConstants.MAX_FAT_PERCENT):
                raise ValueError
            return fat_percent
        except ValueError:
            raise ValueError(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (—á–∏—Å–ª–æ –æ—Ç {CalculationConstants.MIN_FAT_PERCENT} –¥–æ {CalculationConstants.MAX_FAT_PERCENT})")
    
    @staticmethod
    def validate_steps(text: str) -> int:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤"""
        try:
            steps = int(text)
            if not (CalculationConstants.MIN_STEPS <= steps <= CalculationConstants.MAX_STEPS):
                raise ValueError
            return steps
        except ValueError:
            raise ValueError(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–æ—Ç {CalculationConstants.MIN_STEPS} –¥–æ {CalculationConstants.MAX_STEPS})")
    
    @staticmethod
    def validate_workout_duration(text: str) -> int:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        try:
            duration = int(text)
            if not (CalculationConstants.MIN_WORKOUT_DURATION <= duration <= CalculationConstants.MAX_WORKOUT_DURATION):
                raise ValueError
            return duration
        except ValueError:
            raise ValueError(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–æ—Ç {CalculationConstants.MIN_WORKOUT_DURATION} –¥–æ {CalculationConstants.MAX_WORKOUT_DURATION} –º–∏–Ω—É—Ç)")

class MessageFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @staticmethod
    def format_results_message(results: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞"""
        if results['has_training_experience']:
            return f"""üéâ **–í–∞—à —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!**

üéØ **–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞:** {results['precision_score']}%

üìä **–ö–ê–õ–û–†–ò–ò –ü–û –î–ù–Ø–ú:**
‚Ä¢ üí§ –î–Ω–∏ –æ—Ç–¥—ã—Ö–∞: **{results['target_calories_rest']} –∫–∫–∞–ª**
‚Ä¢ üèãÔ∏è –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: **{results['target_calories_training']} –∫–∫–∞–ª**
‚Ä¢ üìà –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: **{results['target_calories_average']} –∫–∫–∞–ª**

ü•© **–ú–ê–ö–†–û–ù–£–¢–†–ò–ï–ù–¢–´:**

**ü•§ –ë–µ–ª–∫–∏:** {results['protein_grams']} –≥ ({results['protein_min']}-{results['protein_max']} –≥)

**ü•ë –ñ–∏—Ä—ã:**
‚Ä¢ –î–Ω–∏ –æ—Ç–¥—ã—Ö–∞: {results['fats_rest']} –≥
‚Ä¢ –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {results['fats_training']} –≥

**üçû –£–≥–ª–µ–≤–æ–¥—ã:**
‚Ä¢ –î–Ω–∏ –æ—Ç–¥—ã—Ö–∞: {results['carbs_rest']} –≥  
‚Ä¢ –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {results['carbs_training']} –≥

**üåæ –ö–ª–µ—Ç—á–∞—Ç–∫–∞:**
‚Ä¢ –î–Ω–∏ –æ—Ç–¥—ã—Ö–∞: {results['fiber_rest']} –≥
‚Ä¢ –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {results['fiber_training']} –≥

**üíß –í–æ–¥–∞:** {results['water']} –º–ª/–¥–µ–Ω—å

üìà **–î–ï–¢–ê–õ–¨–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**
‚Ä¢ üî• BMR (–±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º): {results['bmr']} –∫–∫–∞–ª
‚Ä¢ ‚ö° TDEE –æ—Ç–¥—ã—Ö: {results['tdee_rest']} –∫–∫–∞–ª
‚Ä¢ üèãÔ∏è TDEE —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {results['tdee_training']} –∫–∫–∞–ª
‚Ä¢ üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç–¥—ã—Ö–∞: {results['rest_day_factor']}
‚Ä¢ üí™ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {results['training_day_factor']}

üìä **–ê–ù–ê–õ–ò–ó –¢–ï–õ–ê:**
‚Ä¢ üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞: **{results['fat_percent']}%**
‚Ä¢ üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{results['fat_category']}**

**üìö –û–ë–™–Ø–°–ù–ï–ù–ò–Ø:**
‚Ä¢ **BMR** - –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø–æ–∫–æ–µ
‚Ä¢ **TDEE** - –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ **–¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏** - –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π —Ü–µ–ª–∏
‚Ä¢ **–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞** - —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

‚ú® *–†–∞—Å—á–µ—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –í–°–ï –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏!*

üéØ –°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π!"""
        else:
            return f"""üéâ **–í–∞—à —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!**

üéØ **–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞:** {results['precision_score']}%

üìä **–ö–ê–õ–û–†–ò–ò:**
‚Ä¢ üìà –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: **{results['target_calories_average']} –∫–∫–∞–ª**

ü•© **–ú–ê–ö–†–û–ù–£–¢–†–ò–ï–ù–¢–´:**

**ü•§ –ë–µ–ª–∫–∏:** {results['protein_grams']} –≥ ({results['protein_min']}-{results['protein_max']} –≥)

**ü•ë –ñ–∏—Ä—ã:** {results['fats_rest']} –≥

**üçû –£–≥–ª–µ–≤–æ–¥—ã:** {results['carbs_rest']} –≥

**üåæ –ö–ª–µ—Ç—á–∞—Ç–∫–∞:** {results['fiber_rest']} –≥

**üíß –í–æ–¥–∞:** {results['water']} –º–ª/–¥–µ–Ω—å

üìà **–î–ï–¢–ê–õ–¨–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**
‚Ä¢ üî• BMR (–±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º): {results['bmr']} –∫–∫–∞–ª
‚Ä¢ ‚ö° TDEE (–æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏): {results['tdee_average']} –∫–∫–∞–ª
‚Ä¢ üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {results['rest_day_factor']}

üìä **–ê–ù–ê–õ–ò–ó –¢–ï–õ–ê:**
‚Ä¢ üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞: **{results['fat_percent']}%**
‚Ä¢ üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{results['fat_category']}**

**üìö –û–ë–™–Ø–°–ù–ï–ù–ò–Ø:**
‚Ä¢ **BMR** - –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø–æ–∫–æ–µ
‚Ä¢ **TDEE** - –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ **–¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏** - –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π —Ü–µ–ª–∏
‚Ä¢ **–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞** - —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:** –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø–µ—Ä–µ—Å—á–∏—Ç–∞–π—Ç–µ –ø–ª–∞–Ω —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!

‚ú® *–†–∞—Å—á–µ—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –í–°–ï –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏!*

üéØ –°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π!"""

class CommandHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    
    @staticmethod
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
        chat_id = update.message.chat_id
        user_data_storage[chat_id] = {}
        
        reply_markup = ReplyKeyboardMarkup(
            Keyboards.MAIN_MENU, 
            resize_keyboard=True, 
            one_time_keyboard=False
        )
        
        await update.message.reply_text(
            Messages.WELCOME,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        logger.info(f"User {chat_id} started the bot")
        return States.GENDER
    
    @staticmethod
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        await update.message.reply_text(Messages.HELP, parse_mode=ParseMode.MARKDOWN)
        return States.GENDER
    
    @staticmethod
    async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        chat_id = update.message.chat_id
        
        reply_markup = ReplyKeyboardMarkup(Keyboards.MAIN_MENU, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ùå **–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω**\n\n–ù–∞–∂–º–∏—Ç–µ üöÄ –ù–∞—á–∞—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        if chat_id in user_data_storage:
            del user_data_storage[chat_id]
        
        return States.GENDER

class SurveyHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–ø—Ä–æ—Å–∞"""
    
    @staticmethod
    async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞"""
        chat_id = update.message.chat_id
        user_data_storage[chat_id] = {}
        
        reply_markup = ReplyKeyboardMarkup(Keyboards.GENDER_CHOICE, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            "üë§ **–≠—Ç–∞–ø 1/12:** –í–∞—à –ø–æ–ª?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        logger.info(f"Starting survey for user {chat_id}")
        return States.GENDER
    
    @staticmethod
    async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
        chat_id = update.message.chat_id
        text = update.message.text
        
        try:
            if text in ['üë® –ú—É–∂—á–∏–Ω–∞', '–º—É–∂—á–∏–Ω–∞', '–ú—É–∂—á–∏–Ω–∞']:
                user_data_storage[chat_id]['gender'] = '–º—É–∂—á–∏–Ω–∞'
            elif text in ['üë© –ñ–µ–Ω—â–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞']:
                user_data_storage[chat_id]['gender'] = '–∂–µ–Ω—â–∏–Ω–∞'
            else:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
                return States.GENDER
            
            logger.info(f"User {chat_id} selected gender: {user_data_storage[chat_id]['gender']}")
            
            reply_markup = ReplyKeyboardMarkup(Keyboards.MAIN_MENU, resize_keyboard=True)
            await update.message.reply_text(
                "üéÇ **–≠—Ç–∞–ø 2/12:** –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 16 –¥–æ 80)",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            return States.AGE
            
        except Exception as e:
            logger.error(f"[ERROR] gender() exception: {e}")
            await update.message.reply_text(f"[gender] –û—à–∏–±–∫–∞: {e}")
            return States.GENDER
    
    @staticmethod
    async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        chat_id = update.message.chat_id
        text = update.message.text
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
            if text in ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å', 'üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']:
                return await ButtonHandlers.handle_buttons(update, context)
            
            age_value = InputValidator.validate_age(text)
            user_data_storage[chat_id]['age'] = age_value
            
            logger.info(f"User {chat_id} entered age: {age_value}")
            await update.message.reply_text(
                "‚öñÔ∏è **–≠—Ç–∞–ø 3/12:** –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70)",
                parse_mode=ParseMode.MARKDOWN
            )
            return States.WEIGHT
            
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}")
            return States.AGE
        except Exception as e:
            logger.error(f"[ERROR] age() exception: {e}")
            await update.message.reply_text(f"[age] –û—à–∏–±–∫–∞: {e}")
            return States.AGE
    
    @staticmethod
    async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
        chat_id = update.message.chat_id
        text = update.message.text
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
            if text in ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å', 'üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']:
                return await ButtonHandlers.handle_buttons(update, context)
            
            weight_value = InputValidator.validate_weight(text)
            user_data_storage[chat_id]['weight'] = weight_value
            
            logger.info(f"User {chat_id} entered weight: {weight_value}")
            await update.message.reply_text(
                "üìè **–≠—Ç–∞–ø 4/12:** –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175)",
                parse_mode=ParseMode.MARKDOWN
            )
            return States.HEIGHT
            
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}")
            return States.WEIGHT
    
    @staticmethod
    async def height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
        chat_id = update.message.chat_id
        text = update.message.text
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
            if text in ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å', 'üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']:
                return await ButtonHandlers.handle_buttons(update, context)
            
            height_value = InputValidator.validate_height(text)
            user_data_storage[chat_id]['height'] = height_value
            
            logger.info(f"User {chat_id} entered height: {height_value}")
            
            reply_markup = ReplyKeyboardMarkup(Keyboards.FAT_PERCENTAGE_CHOICE, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(
                "üî• **–≠—Ç–∞–ø 5/12:** –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ?",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            return States.FAT_PERCENTAGE
            
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}")
            return States.HEIGHT
    
    @staticmethod
    async def fat_percentage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
        chat_id = update.message.chat_id
        text = update.message.text
        
        if text == '‚úÖ –î–∞, –∑–Ω–∞—é':
            reply_markup = ReplyKeyboardMarkup(Keyboards.MAIN_MENU, resize_keyboard=True, persistent=True)
            await update.message.reply_text(
                "üìä –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (—á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 50, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15)",
                reply_markup=reply_markup
            )
            return States.FAT_PERCENTAGE_INPUT
        elif text == '‚ùå –ù–µ –∑–Ω–∞—é':
            user_data_storage[chat_id]['fat_percent'] = None
            logger.info(f"User {chat_id} doesn't know fat percentage")
            return await SurveyHandlers.show_goal_selection(update, context)
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
            return States.FAT_PERCENTAGE
    
    @staticmethod
    async def fat_percentage_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
        chat_id = update.message.chat_id
        text = update.message.text
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
            if text in ['üöÄ –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å', 'üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']:
                return await ButtonHandlers.handle_buttons(update, context)
            
            fat_value = InputValidator.validate_fat_percentage(text)
            user_data_storage[chat_id]['fat_percent'] = fat_value
            
            logger.info(f"User {chat_id} entered fat percentage: {fat_value}")
            return await SurveyHandlers.show_goal_selection(update, context)
            
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}")
            return States.FAT_PERCENTAGE_INPUT
    
    @staticmethod
    async def show_goal_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ü–µ–ª–∏"""
        reply_markup = ReplyKeyboardMarkup(Keyboards.GOAL_CHOICE, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            "üéØ **–≠—Ç–∞–ø 6/12:** –í–∞—à–∞ —Ü–µ–ª—å?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return States.GOAL
    
    @staticmethod
    async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
        chat_id = update.message.chat_id
        text = update.message.text
        
        goal_map = {
            'üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ': '–ü–æ—Ö—É–¥–µ–Ω–∏–µ',
            '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ',
            'üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã': '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã'
        }
        
        if text in goal_map:
            user_data_storage[chat_id]['goal'] = goal_map[text]
            logger.info(f"User {chat_id} selected goal: {goal_map[text]}")
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
            return States.GOAL
        
        reply_markup = ReplyKeyboardMarkup(Keyboards.TRAINING_EXPERIENCE, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "üí™ **–≠—Ç–∞–ø 7/12:** –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏–ª–∏ —Å–ø–æ—Ä—Ç–µ?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return States.HAS_TRAINING_EXPERIENCE

class ButtonHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫"""
    
    @staticmethod
    async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
        text = update.message.text
        chat_id = update.message.chat_id
        
        button_handlers = {
            'üöÄ –ù–∞—á–∞—Ç—å': SurveyHandlers.start_survey,
            '‚ùì –ü–æ–º–æ—â—å': CommandHandlers.help_command,
            'üìä –û –±–æ—Ç–µ': ButtonHandlers.show_about,
            'üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é': ButtonHandlers.show_consultation,
            'üöÄ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ': SurveyHandlers.start_survey
        }
        
        if text in button_handlers:
            return await button_handlers[text](update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if text == 'üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è':
            return await ButtonHandlers.show_mini_apps_menu(update, context)
        elif text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            return await ButtonHandlers.return_to_main_menu(update, context)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return await ButtonHandlers.handle_message(update, context)
    
    @staticmethod
    async def show_about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        await update.message.reply_text(Messages.ABOUT, parse_mode=ParseMode.MARKDOWN)
        return States.GENDER
    
    @staticmethod
    async def show_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        consultation_keyboard = [['üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'], ['üöÄ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', '‚ùì –ü–æ–º–æ—â—å'], ['üåç –Ø–∑—ã–∫', 'üìä –û –±–æ—Ç–µ']]
        reply_markup = ReplyKeyboardMarkup(consultation_keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            Messages.CONSULTATION,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return States.GENDER
    
    @staticmethod
    async def show_mini_apps_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        reply_markup = ReplyKeyboardMarkup(Keyboards.MINI_APPS_MENU, resize_keyboard=True)
        
        text = """üéÆ **–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FitAdventure**

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:

üçé **–ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤** - –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ë–ñ–£ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   ‚Ä¢ üåæ –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
   ‚Ä¢ ‚ö° –ü—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
   ‚Ä¢ ü•© –ë–µ–ª–∫–∏
   ‚Ä¢ ü´í –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã
   ‚Ä¢ üßà –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã
   ‚Ä¢ üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞
   ‚Ä¢ üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   ‚Ä¢ üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥ –≤–∞—à—É —Ü–µ–ª—å
   ‚Ä¢ üí° –°–æ–≤–µ—Ç—ã –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é"""
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return States.GENDER
    
    @staticmethod
    async def return_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        chat_id = update.message.chat_id
        user_data_storage[chat_id] = {}
        
        reply_markup = ReplyKeyboardMarkup(Keyboards.MAIN_MENU, resize_keyboard=True, one_time_keyboard=False)
        
        await update.message.reply_text(
            Messages.WELCOME,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        return States.GENDER
    
    @staticmethod
    async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\nüéÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
            parse_mode=ParseMode.MARKDOWN
        )
        return States.GENDER 