#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
HTTPS –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Web App –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
"""

from http.server import HTTPServer, SimpleHTTPRequestHandler
import ssl
import os

class CORSRequestHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()

    def do_OPTIONS(self):
        self.send_response(200)
        self.end_headers()

def run_https_server(port=8443):
    """–ó–∞–ø—É—Å–∫ HTTPS –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    server_address = ('', port)
    httpd = HTTPServer(server_address, CORSRequestHandler)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    import tempfile
    import subprocess
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    with tempfile.NamedTemporaryFile(delete=False, suffix='.key') as key_file:
        key_path = key_file.name
    
    with tempfile.NamedTemporaryFile(delete=False, suffix='.crt') as cert_file:
        cert_path = cert_file.name
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        subprocess.run([
            'openssl', 'req', '-x509', '-newkey', 'rsa:2048', 
            '-keyout', key_path, '-out', cert_path, '-days', '365', '-nodes',
            '-subj', '/C=RU/ST=State/L=City/O=Organization/CN=localhost'
        ], check=True, capture_output=True)
        
        context.load_cert_chain(cert_path, key_path)
        httpd.socket = context.wrap_socket(httpd.socket, server_side=True)
        
        print(f"üîí HTTPS –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        print(f"üì± Web App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://localhost:{port}/products_webapp.html")
        print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)")
        print("üîÑ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        httpd.serve_forever()
        
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
        print("üí° –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –±–µ–∑ OpenSSL
        try:
            context.load_default_certs()
            httpd.socket = context.wrap_socket(httpd.socket, server_side=True)
            
            print(f"üîí HTTPS –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            print(f"üì± Web App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://localhost:{port}/products_webapp.html")
            print("üîÑ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            httpd.serve_forever()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            print("üí° –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤–º–µ—Å—Ç–æ HTTPS...")
            run_http_server(port)
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.unlink(key_path)
            os.unlink(cert_path)
        except:
            pass

def run_http_server(port=8000):
    """–ó–∞–ø—É—Å–∫ HTTP –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∫ fallback"""
    server_address = ('', port)
    httpd = HTTPServer(server_address, CORSRequestHandler)
    print(f"üåê HTTP –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üì± Web App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}/products_webapp.html")
    print("üîÑ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    httpd.serve_forever()

if __name__ == '__main__':
    run_https_server() 