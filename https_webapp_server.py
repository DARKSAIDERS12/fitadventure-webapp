#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
HTTPS –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Web App –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
"""

import ssl
import socket
from http.server import HTTPServer, SimpleHTTPRequestHandler
import os
import sys
from pathlib import Path

class CustomHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Web App
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
    
    def do_GET(self):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –Ω–∞ –Ω–∞—à HTML —Ñ–∞–π–ª
        if self.path == '/':
            self.path = '/webapp_products.html'
        return super().do_GET()

def create_self_signed_cert():
    """–°–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    cert_file = 'webapp_cert.pem'
    key_file = 'webapp_key.pem'
    
    if not os.path.exists(cert_file) or not os.path.exists(key_file):
        print("üîê –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å –ø–æ–º–æ—â—å—é OpenSSL
        os.system(f'openssl req -x509 -newkey rsa:4096 -keyout {key_file} -out {cert_file} -days 365 -nodes -subj "/C=RU/ST=Moscow/L=Moscow/O=FitAdventure/CN=localhost"')
        
        if os.path.exists(cert_file) and os.path.exists(key_file):
            print("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
            return None, None
    
    return cert_file, key_file

def main():
    port = 8443
    print(f"üöÄ –ó–∞–ø—É—Å–∫ HTTPS –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –ú–µ–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Ç–µ–∫—É—â—É—é
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    cert_file, key_file = create_self_signed_cert()
    
    if not cert_file or not key_file:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
        server = HTTPServer(('0.0.0.0', port), CustomHandler)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL
        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        context.load_cert_chain(cert_file, key_file)
        server.socket = context.wrap_socket(server.socket, server_side=True)
        
        print(f"üåê HTTPS URL: https://localhost:{port}")
        print(f"üì± Web App URL: https://localhost:{port}/webapp_products.html")
        print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        print("‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        server.serve_forever()
        
    except KeyboardInterrupt:
        print("\n‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 