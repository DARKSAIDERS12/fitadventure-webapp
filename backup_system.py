#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üóÑÔ∏è FitAdventure Backup System
üíæ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
üîí –í–µ—Ä—Å–∏—è: 1.0 - Safe Archive
"""

import os
import shutil
import datetime
import json
from pathlib import Path
import subprocess

# –ö—Ä–∞—Å–∏–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
BACKUP = "üíæ"
SAFE = "üîí"
ARCHIVE = "üì¶"
SUCCESS = "‚úÖ"
WARNING = "‚ö†Ô∏è"
ERROR = "‚ùå"
INFO = "üí°"
TIME = "‚è∞"

class FitAdventureBackup:
    def __init__(self):
        self.project_dir = Path.cwd()
        self.backup_dir = self.project_dir / "backups"
        self.backup_dir.mkdir(exist_ok=True)
        
        # –í–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.important_files = [
            "main.py",
            "main_ultra_ui.py", 
            "ultra_precise_formulas.py",
            "run_bot.py",
            "run_ultra_bot.py",
            "requirements.txt",
            ".env",
            "*.md",  # –í—Å–µ markdown —Ñ–∞–π–ª—ã
            "start_*.sh"
        ]
        
        # –ü–∞–ø–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.important_dirs = [
            "__pycache__",  # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –Ω—É–∂–Ω—ã —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        ]
        
        # –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.exclude_patterns = [
            "*.log",
            "venv/",
            "backups/",
            ".git/",
            "*.pyc",
            "__pycache__/*",
            "*.tmp",
            ".DS_Store"
        ]

    def create_backup_info(self, backup_name: str) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        return {
            "backup_name": backup_name,
            "timestamp": datetime.datetime.now().isoformat(),
            "version": "Ultra Beauty v3.0",
            "files_count": 0,
            "description": "FitAdventure Ultra Beauty –ø–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è",
            "components": [
                "Ultra Beautiful UI (main_ultra_ui.py)",
                "Smart Launcher (run_ultra_bot.py)",
                "Precise Formulas (ultra_precise_formulas.py)",
                "Complete Documentation",
                "Configuration Files"
            ],
            "features": [
                "–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã",
                "–ö—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", 
                "–ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å (RU/EN)",
                "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
                "95-99% —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤",
                "–°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
            ]
        }

    def get_backup_name(self, custom_name: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        if custom_name:
            return f"FitAdventure_{custom_name}_{timestamp}"
        return f"FitAdventure_UltraBeauty_{timestamp}"

    def create_backup(self, description: str = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è") -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        backup_name = self.get_backup_name()
        backup_path = self.backup_dir / backup_name
        
        print(f"{BACKUP} –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_name}")
        print(f"{TIME} –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_path.mkdir(exist_ok=True)
            files_copied = 0
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
            print(f"{INFO} –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
            for pattern in self.important_files:
                if "*" in pattern:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                    for file_path in self.project_dir.glob(pattern):
                        if file_path.is_file() and self._should_include(file_path):
                            shutil.copy2(file_path, backup_path)
                            files_copied += 1
                            print(f"  {SUCCESS} {file_path.name}")
                else:
                    file_path = self.project_dir / pattern
                    if file_path.exists() and self._should_include(file_path):
                        if file_path.is_file():
                            shutil.copy2(file_path, backup_path)
                        else:
                            shutil.copytree(file_path, backup_path / pattern, dirs_exist_ok=True)
                        files_copied += 1
                        print(f"  {SUCCESS} {pattern}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_info = self.create_backup_info(backup_name)
            backup_info["files_count"] = files_copied
            backup_info["description"] = description
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            with open(backup_path / "backup_info.json", 'w', encoding='utf-8') as f:
                json.dump(backup_info, f, ensure_ascii=False, indent=2)
            
            # –°–æ–∑–¥–∞–µ–º README –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            self._create_backup_readme(backup_path, backup_info)
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
            archive_path = self.backup_dir / f"{backup_name}.zip"
            shutil.make_archive(str(backup_path), 'zip', str(backup_path))
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            shutil.rmtree(backup_path)
            
            print(f"{SUCCESS} –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {archive_path.name}")
            print(f"{ARCHIVE} –§–∞–π–ª–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {files_copied}")
            print(f"{SAFE} –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {self._get_file_size(archive_path)}")
            
            return True
            
        except Exception as e:
            print(f"{ERROR} –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False

    def _should_include(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —Ñ–∞–π–ª –≤ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        file_str = str(file_path.relative_to(self.project_dir))
        for pattern in self.exclude_patterns:
            if pattern.replace("*", "") in file_str or file_str.endswith(pattern.replace("*", "")):
                return False
        return True

    def _create_backup_readme(self, backup_path: Path, backup_info: dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ README –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        readme_content = f"""# {BACKUP} –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è FitAdventure Ultra Beauty

## {INFO} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏

- **–ù–∞–∑–≤–∞–Ω–∏–µ:** {backup_info['backup_name']}
- **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {backup_info['timestamp'][:19].replace('T', ' ')}
- **–í–µ—Ä—Å–∏—è:** {backup_info['version']}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:** {backup_info['files_count']}
- **–û–ø–∏—Å–∞–Ω–∏–µ:** {backup_info['description']}

## {ARCHIVE} –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞

"""
        for component in backup_info['components']:
            readme_content += f"- {SUCCESS} {component}\n"

        readme_content += f"""
## {SAFE} –§—É–Ω–∫—Ü–∏–∏ Ultra Beauty

"""
        for feature in backup_info['features']:
            readme_content += f"- ‚ú® {feature}\n"

        readme_content += f"""
## {INFO} –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏

### 1. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
```bash
unzip {backup_info['backup_name']}.zip
cd {backup_info['backup_name']}
```

### 2. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
```bash
# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –≤ —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
cp * /path/to/your/project/
```

### 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
```bash
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
pip install -r requirements.txt

# –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ
# TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω
```

### 4. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
```bash
# –£–ª—å—Ç—Ä–∞ –∫—Ä–∞—Å–∏–≤–∞—è –≤–µ—Ä—Å–∏—è
python3 run_ultra_bot.py

# –ò–ª–∏ –ø—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫
python3 main_ultra_ui.py
```

## {WARNING} –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è

- –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ .env —Ñ–∞–π–ª–µ
- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

---
*–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π FitAdventure Backup*
"""
        
        with open(backup_path / "RESTORE_README.md", 'w', encoding='utf-8') as f:
            f.write(readme_content)

    def _get_file_size(self, file_path: Path) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        size = file_path.stat().st_size
        for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
            if size < 1024:
                return f"{size:.1f} {unit}"
            size /= 1024
        return f"{size:.1f} –¢–ë"

    def list_backups(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        print(f"{BACKUP} –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:")
        print("=" * 60)
        
        backups = list(self.backup_dir.glob("*.zip"))
        if not backups:
            print(f"{WARNING} –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        backups.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        
        for i, backup_file in enumerate(backups, 1):
            size = self._get_file_size(backup_file)
            mtime = datetime.datetime.fromtimestamp(backup_file.stat().st_mtime)
            print(f"{i}. {backup_file.name}")
            print(f"   {TIME} {mtime.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"   {ARCHIVE} {size}")
            print()

    def restore_backup(self, backup_name: str, target_dir: str = None):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        if target_dir is None:
            target_dir = str(self.project_dir)
        
        backup_path = self.backup_dir / f"{backup_name}.zip"
        if not backup_path.exists():
            print(f"{ERROR} –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {backup_name}")
            return False
        
        print(f"{INFO} –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑: {backup_name}")
        print(f"{WARNING} –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã!")
        
        confirm = input(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N): ").lower()
        if confirm != 'y':
            print(f"{INFO} –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return False
        
        try:
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            shutil.unpack_archive(str(backup_path), str(target_dir))
            print(f"{SUCCESS} –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤: {target_dir}")
            return True
        except Exception as e:
            print(f"{ERROR} –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False

    def cleanup_old_backups(self, keep_count: int = 10):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        backups = list(self.backup_dir.glob("*.zip"))
        if len(backups) <= keep_count:
            print(f"{INFO} –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ({len(backups)} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π)")
            return
        
        backups.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        to_delete = backups[keep_count:]
        
        print(f"{WARNING} –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(to_delete)} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        for backup in to_delete:
            print(f"  - {backup.name}")
        
        confirm = input(f"–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–ø–∏–∏? (y/N): ").lower()
        if confirm == 'y':
            for backup in to_delete:
                backup.unlink()
                print(f"{SUCCESS} –£–¥–∞–ª–µ–Ω–æ: {backup.name}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    backup_system = FitAdventureBackup()
    
    print(f"""
{BACKUP}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{BACKUP}
{SAFE}                FITADVENTURE BACKUP SYSTEM                   {SAFE}
{ARCHIVE}              –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è               {ARCHIVE}
{BACKUP}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{BACKUP}

{INFO} –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
1. {BACKUP} –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
2. {ARCHIVE} –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
3. {SAFE} –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
4. {WARNING} –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–ø–∏–∏
5. {ERROR} –í—ã—Ö–æ–¥
""")
    
    while True:
        choice = input(f"\n{INFO} –í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()
        
        if choice == '1':
            description = input(f"{INFO} –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (Enter –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ): ").strip()
            if not description:
                description = "–†—É—á–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è Ultra Beauty"
            backup_system.create_backup(description)
            
        elif choice == '2':
            backup_system.list_backups()
            
        elif choice == '3':
            backup_system.list_backups()
            backup_name = input(f"{INFO} –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–±–µ–∑ .zip): ").strip()
            if backup_name:
                backup_system.restore_backup(backup_name)
            
        elif choice == '4':
            try:
                keep = int(input(f"{INFO} –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–ø–∏–π –æ—Å—Ç–∞–≤–∏—Ç—å? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ") or "10")
                backup_system.cleanup_old_backups(keep)
            except ValueError:
                print(f"{ERROR} –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            
        elif choice == '5':
            print(f"{SAFE} –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print(f"{ERROR} –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main() 